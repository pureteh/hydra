-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | On-Chain Merkle Trees
--   
--   On-Chain Merkle Trees
@package plutus-merkle-tree
@version 1.1.0


-- | A purely functional implementation of MerkleTrees that is suitable for
--   usage on-chain. Note however that the construction of
--   <a>MerkleTree</a> and membership proofs are still expected to happen
--   *off-chain* while only the proof verification should be done on-chain.
--   
--   Note that this module is meant to used as a qualified import, for
--   example:
--   
--   <pre>
--   import qualified Plutus.MerkleTree as MT
--   </pre>
module Plutus.MerkleTree

-- | A MerkleTree representation, suitable for on-chain manipulation.
--   Construction of the merkle tree shouldn't be done by hand, but via
--   <a>fromList</a>.
data MerkleTree
MerkleEmpty :: MerkleTree
MerkleNode :: Hash -> MerkleTree -> MerkleTree -> MerkleTree
MerkleLeaf :: Hash -> BuiltinByteString -> MerkleTree

-- | Construct a <a>MerkleTree</a> from a list of serialized data as
--   <a>BuiltinByteString</a>.
--   
--   Note that, while this operation is doable on-chain, it is expensive
--   and preferably done off-chain.
fromList :: [BuiltinByteString] -> MerkleTree

-- | Deconstruct a <a>MerkleTree</a> back to a list of elements.
--   
--   <pre>
--   &gt;&gt;&gt; toList (fromList xs) == xs
--   True
--   </pre>
toList :: MerkleTree -> [BuiltinByteString]

-- | Obtain the root hash of a <a>MerkleTree</a>. In particular we have:
--   
--   <pre>
--   &gt;&gt;&gt; (mt == mt') == (rootHash mt == rootHash mt')
--   True
--   </pre>
rootHash :: MerkleTree -> Hash

-- | Return true if the <a>MerkleTree</a> is empty.
--   
--   <pre>
--   &gt;&gt;&gt; null mt == (size mt == 0)
--   True
--   </pre>
null :: MerkleTree -> Bool

-- | Total numbers of leaves in the tree.
size :: MerkleTree -> Integer

-- | A membership <a>Proof</a>. The type is meant to be opaque.
type Proof = [Either Hash Hash]

-- | Construct a membership <a>Proof</a> from an element and a
--   <a>MerkleTree</a>. Returns <a>Nothing</a> if the element isn't a
--   member of the tree to begin with.
mkProof :: BuiltinByteString -> MerkleTree -> Maybe Proof

-- | Check whether a element is part of a <a>MerkleTree</a> using only its
--   root hash and a <a>Proof</a>. The proof is guaranteed to be in log(n)
--   of the size of the tree, which is why we are interested in such
--   data-structure in the first place.
member :: BuiltinByteString -> Hash -> Proof -> Bool

-- | A type for representing hash digests.
newtype Hash
Hash :: BuiltinByteString -> Hash

-- | Computes a SHA-256 hash of a given <a>BuiltinByteString</a> message.
hash :: BuiltinByteString -> Hash

-- | Combines two hashes digest into a new one. This is effectively a new
--   hash digest of the same length.
combineHash :: Hash -> Hash -> Hash
instance PlutusTx.IsData.Class.ToData Plutus.MerkleTree.Hash
instance PlutusTx.IsData.Class.FromData Plutus.MerkleTree.Hash
instance PlutusTx.IsData.Class.UnsafeFromData Plutus.MerkleTree.Hash
instance GHC.Classes.Eq Plutus.MerkleTree.Hash
instance GHC.Show.Show Plutus.MerkleTree.MerkleTree
instance GHC.Classes.Eq Plutus.MerkleTree.MerkleTree
instance PlutusTx.Eq.Eq Plutus.MerkleTree.MerkleTree
instance PlutusTx.Eq.Eq Plutus.MerkleTree.Hash
instance GHC.Show.Show Plutus.MerkleTree.Hash
