"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[9896],{51065:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-06","metadata":{"permalink":"/head-protocol/fr/monthly/2023-06","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-06-monthly.md","source":"@site/monthly/2023-06-monthly.md","title":"June 2023","description":"This report summarizes the work on Hydra since May 2023. It serves as","date":"2023-06-27T07:53:28.000Z","formattedDate":"27 juin 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":6.975,"hasTruncateMarker":false,"authors":[{"name":"Sasha Bogicevic","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"June 2023","slug":"2023-06","authors":["v0d1ch","ch1bo"],"tags":["monthly"]},"nextItem":{"title":"May 2023","permalink":"/head-protocol/fr/monthly/2023-05"}},"content":"This report summarizes the work on Hydra since May 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nWhile there was no release this month, the team implemented several notable\\nfeatures, which will be released soon as version 0.11.0:\\n\\n![The roadmap without idea items](./img/2023-06-roadmap-ex-ideas.png) <small><center>The roadmap without idea items</center></small>\\n\\n#### Notable roadmap updates\\n\\n- Realized [allowing commit txs with multiple UTxO\\n  #774](https://github.com/input-output-hk/hydra/pull/774) as a dedicated roadmap\\n  item separate from the related [commit from external wallet\\n  #215](https://github.com/input-output-hk/hydra/issues/215) (which grew too\\n  big).\\n\\n- Revisited [off-chain performance by doing benchmarks\\n  #186](https://github.com/input-output-hk/hydra/issues/186). Identified a\\n  bottleneck, groomed and planned a follow-up performance improvement feature\\n  for [Event sourced persistence\\"\\n  #913](https://github.com/input-output-hk/hydra/issues/913)\\n\\n- Plan to release 0.11.0 without [Authenticate network messages\\n  #727](https://github.com/input-output-hk/hydra/issues/727) to deliver enabling\\n  featues earlier.\\n\\n- API improvements and exploring batched transactions on L2 showed that [ReqSN\\n  only sends transaction IDs\\n  #728](https://github.com/input-output-hk/hydra/issues/728) is in demand,\\n  front-loads further API changes and is estimated to be a low-hanging fruit.\\n\\n- Reprioritized items in `<= 1.0.0` column, to do items with on-chain protocol\\n  impact earlier and not much feedback has been received on snapshotting items. In\\n  fact, if [Support larger # of UTXO via split-fanout\\n  #190](https://github.com/input-output-hk/hydra/issues/190) is done slightly\\n  differently, that should avoid some of the problems of impossible to finalize\\n  snapshots.\\n\\n![The latest roadmap with features and ideas](./img/2023-06-roadmap.png) <small><center>The latest roadmap with featuresand ideas</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-05-24..2023-06-22)\\n\\nThis month, the team worked on the following:\\n\\n#### Commits with multiple UTXO [#774](https://github.com/input-output-hk/hydra/pull/774)\\n\\nOne of the early adopting projects is exploring how to move scripts from layer 1\\nto layer 2. For that purpose, it was necessary to not only commit the actual\\nscript UTXO, but also a \\"regular\\" UTXO holding only ada to be used as collateral\\n(the `cardano-ledger` always requires collateral although it would not be\\nnecessary on a layer 2).\\n\\nTo enable this, the specification and on-chain protocol needed updating. Before\\na protocol participant could commit zero or one UTXO, which changed now to a\\nlist of UTXO. As the specification is now [part of the\\nrepository](/monthly/2023-04#versioned-docs-and-specification), it could be kept\\nconsistent within the same pull request.\\n\\nDespite being a **breaking change**, leading to new Hydra script hashes to be\\npublished and used starting with version 0.11.0, this change was suprisingly\\neasy to do and demonstrated the amenability of the Head protocol and the system\\narchitecture.\\n\\n#### Commits from external wallet [#215](https://github.com/input-output-hk/hydra/issues/215)\\n\\nThe team started to mark _fuel_ some time ago as it was an easy workaround to\\ndistinguish UTXOs that can be committed into a head apart from regular outputs\\nholding ada to pay for fees - the so-called _fuel_. However, this required users\\nto \\"send funds\\" they want to commit first to the `hydra-node`s internal wallet\\nand involved additional steps in tagging such outputs with a special datum hash\\n\\nTo commit from external wallets, a new API endpoint was introduced for the\\npurpose of _drafting_ a commit transaction. The clients would request such draft\\ntransaction by sending a POST request to `/commit` and the `hydra-node` would\\nrespond with a transaction already authorized by the internal wallet. If the\\ncommit involved user funds (empty commits are still possible), then the client\\napplication would need to sign the transaction using the corresponding signing\\nkey. Also, submitting this transaction has shifted from `hydra-node` to the\\nclient.\\n\\nThis removes direct custody of `hydra-node` over user funds since clients can\\nnow use whatever key they own, not known to the `hydra-node`, to do a commit\\nstep and no single `hydra-node` has access to user funds used in the Head\\nprotocol.\\n\\nWithin this work package, _marking fuel_ became deprecated and all UTXOs owned\\nby the internal wallet are considered fuel. Fuel marking wil be completely\\nremoved in the future. Furthermore, a good old HTTP-based API is now used\\nfor the new query (so far it was only WebSocket-based), which prompts a\\npotential shift to using OpenAPI as API specification since AsyncAPI does not\\ndescribe synchronous requests well.\\n\\n#### Benchmark performance of Hydra Head [#186](https://github.com/input-output-hk/hydra/issues/215)\\n\\nLow confirmation time is a key feature of Hydra Head protocol and is\\nneeded for some use cases. The existing end-to-end \\nbenchmarks have been revived and tailored for a _baseline scenario_, one with a\\nsingle hydra-node and a single client. While this scenario is not\\nrepresentative of target deployments, it\'s interesting as it gives us\\nan upper bound on the performance of a Hydra Head network.\\n\\nThe results have been somewhat disappointing, and further investigations lead to a few insights:\\n\\n- There was a misconfiguration in the RTS of the hydra-node executable\\n  which was therefore not taking advantage of parallelism\\n- We identified the main bottleneck to be persistence of the node\'s\\n  state, which is currently done by overwriting a single file with the\\n  JSON content of the _full_ state on _state change_ which is pretty\\n  inefficient. As a consequence, the team will work on improving the\\n  persistence strategy as described in [this\\n  ADR](https://github.com/input-output-hk/hydra/pull/940)\\n- More benchmarks:\\n  - The aforementioned [End-to-end benchmarks](/benchmarks/end-to-end-benchmarks),\\n  - [Ledger Micro-benchmarks](/benchmarks/ledger) as a comparison basis.\\n\\n#### Operating hydra nodes\\n\\nAs a \\"dogfooding\\" exercise, the Hydra team is operating a Hydra Head\\non mainnet on top of which is running our `hydraw` application. \\nThe Head protocol got stuck a couple of times and\\npost-mortem investigations lead to a few improvements in how to\\noperate a hydra-node and network:\\n\\n- Better reporting on the version of executable `hydra-node` and\\n  `hydra-tui` which now report the Git SHA1 at which they were built\\n- Reduction in the volume of logs emitted by hydra-node by removing\\n  some chatty network-related logs and using ids to link `Begin/End`\\n  pairs\\n- Rework the\\n  [log-filter](https://github.com/input-output-hk/hydra/blob/35f2964ba6d4a780a5f8e669f1afce565a492cec/hydra-cluster/exe/log-filter/Main.hs#L34)\\n  tool to provide timings for various events and effects keyed by\\n  transactions\\n\\n## Community\\n\\n#### Hydra hackathon / workshop\\n\\nThe Hydra team is considering holding a workshop at/around Rare Evo at the end\\nof August and is in contact with the event teams at IOG and the Rare Evo\\norganizers. The concrete format, scope and agenda is still a bit unclear as we\\nare contemplating whether to do a workshop/tutorial style or rather a\\nintroduction + challenge setting event. If it does not work out for Rare Evo, we\\nwill find another event or do it ourselves.\\n\\nIf you are reading this and would be interested in joining such an event please\\ndrop us a line on [discord](https://discord.gg/Qq5vNTg9PT) or DM\\n[@ch1bo](https://twitter.com/ch1bo_)! Ideally along with some thoughts on\\npreferred format or what you would be interested in.\\n\\n#### Hydra for Auctions contributions and closing of project\\n\\nOne of the Hydra lighthouse projects is slowly coming to an end. The\\ncollaboration project between IOG and MLabs on using Hydra for auctions is\\ncurrently finalizing documentation and creating demonstration running the whole\\nthing on a public testnet. Although the demo video was not available at the copy\\ndeadline of this report, watch this space for more about this next\\nmonth.\\n\\nThe project yielded multiple github issues containing ideas and sparked great\\ndiscussions on improving Hydra like [reported last\\nmonth](https://hydra.family/head-protocol/monthly/2023-05#hydrozoa-850). It is\\nalso the first project which demonstrates how to move smart contracts from the\\nlayer 1 (L1) to the layer 2 (L2)! Overall it is a great example of establishing\\ncrucial state on L1 and achieving scalability through Hydra as L2.\\n\\nThe code is fully open source and available on Github\\n[hydra-auction](https://github.com/mlabs-haskell/hydra-auction/).\\n\\n## Conclusion\\n\\nThe monthly review meeting for May was held on 2023-06-21 via Google Meet with\\nthese [slides][slides] and here is the [recording][recording].\\n\\nIt was a fairly straight-forward month and consequently unexciting review meeting\\nthis month. Unfortunately, we could not release 0.11.0 yet, but we wanted to get\\nthe quite significant change of supporting commits from external wallets done\\nfirst. This feature in particular was more involved than expected, but as the\\ndemonstration in the meeting showed, we are in the final stages of getting this\\nover the line.\\n\\nBesides some nice findings to potential performance improvements for layer 2\\ntransaction processing, there was not much to announce this time around. Behind\\nthe scenes, however, there have been great progress on the Hydra for Payments\\nproject and the next updates are going to be more interesting again.\\n\\nDespite holiday season approaching, we will march on, steadily adding features\\nand enabling more and more use cases to scale through Hydra.\\n\\n[slides]: https://docs.google.com/presentation/d/1TVzjaFKXBi9DAugSd2L8MSUSZGIU9EjTmwf6yccckPI\\n[recording]: https://drive.google.com/file/d/1_N6b4RDe579TgLawiJzbE0NLofD3ljE6/view"},{"id":"2023-05","metadata":{"permalink":"/head-protocol/fr/monthly/2023-05","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-05-monthly.md","source":"@site/monthly/2023-05-monthly.md","title":"May 2023","description":"This report summarizes the work on Hydra since April 2023. It serves as","date":"2023-05-30T14:30:18.000Z","formattedDate":"30 mai 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":8.445,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Pascal Grange","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/pgrange","imageURL":"https://github.com/pgrange.png","key":"pgrange"},{"name":"Franco Testagrossa","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"May 2023","slug":"2023-05","authors":["ch1bo","pgrange","ffakenz"],"tags":["monthly"]},"prevItem":{"title":"June 2023","permalink":"/head-protocol/fr/monthly/2023-06"},"nextItem":{"title":"April 2023","permalink":"/head-protocol/fr/monthly/2023-04"}},"content":"This report summarizes the work on Hydra since April 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month the team released version 0.10.0 which includes many important features.\\nThe project [roadmap](https://github.com/orgs/input-output-hk/projects/21) was\\nonly slightly updated this month and already saw one more feature completed:\\n\\n![The roadmap without idea items](./img/2023-05-roadmap-ex-ideas.png)\\n<small><center>The roadmap without idea items</center></small>\\n\\n#### Release 0.10.0\\n\\n- First mainnet compatible release of `hydra-node` including technical changes and documentation\\n\\n- Mainnet exposure currently limited to 100\u20b3 per participant\\n\\n- Added some missing features to the client API (short-term solutions)\\n\\n- Some quality of life improvements in running the `hydra-node`\\n\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.10.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/8?closed=1)\\n\\n#### Notable roadmap updates\\n\\n- Got new input and a concrete scenario for benchmarking (off-chain) performance\\n  of a Hydra head. As it is a very basic one, we moved the item from an\\n  idea to a feature and started work on it.\\n\\n- Added a new feature item to add Hydra as a tool to developer platforms within\\n  our agenda of [promoting Hydra as an open-source\\n  platform](https://hydra.family/head-protocol/monthly/2023-01#themes-for-2023)\\n  for scalability on Cardano.\\n\\n- Already completed a first feature for 0.11.0 and considering whether to release it as\\n  early as possible with latest advances.\\n\\n![The latest roadmap with features and ideas](./img/2023-05-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-04-26..2023-05-24)\\n\\nThis month, the team worked on the following:\\n\\n#### Timed transactions [#196](https://github.com/input-output-hk/hydra/issues/196#)\\n\\nTo realize the Hydra Head protocol, a `hydra-node` observes and follows the\\nchain progress on the layer 1 (L1). Until now, this component was only observing\\nprotocol related transactions. Now, on every block roll forward, a `Tick` event\\ncarrying the notion of time from L1 is observed by the `hydra-node` and is used\\nto validate transactions in a Hydra head. This means that clients can submit\\ntime bounded transactions to an open head and expect them to be validated using\\nthe same slot that would be used on L1. It is important to mention that time\\nonly advances on L1 when a block is produced.\\n\\n![Timed transactions in a Hydra Head state channel](./img/2023-05-timed-transactions.jpg) <small><center>Timed transactions in a Hydra Head state channel</center></small>\\n\\nThis feature will make the Hydra L2 ledger now en-par with UTXO features\\navailable on the Cardano L1. A logical next step in this direction could be to\\nmake time in the state channel advance every configured `slotLength` (e.g. every\\nsecond) using the system clock in between blocks as a form of [dead reckoning](https://en.wikipedia.org/wiki/Dead_reckoning).\\n\\n#### Removing --ledger-genesis [#863](https://github.com/input-output-hk/hydra/pull/863)\\n\\nThe hydra-node had two command line options to configure the ledger used for validating layer 2 (L2) transactions: `--ledger-protocol-parameters` and `--ledger-genesis`. The former option, which is self-explanatory, allows configuration of the Cardano protocol parameters to be used. Often, the same parameters as those on L1 are configured, or similar parameters with reduced fees, for example. On the other hand, the second option required the `genesis-shelley.json` file previously used to initialize the Shelley era by the cardano-node.\\n\\nWhen we started using the current slot in the L2 ledger (see above), we realized\\nthat only the start time and slot length are effectively used from that\\nconfiguration file. Moreover, it would be quite surprising if those were\\ndifferent and slots would be longer or shorter on L2 (unless explicitly\\nconfigured). We opted to remove the option altogether and have the `hydra-node`\\nfetch the genesis parameters from the Cardano network. This makes the system\\neasier to configure and more isomorphic to L1.\\n\\n#### Improving CI runtime\\n\\nThe Hydra project [embraces Test Driven Development](./adr/12) and implements\\n[Continuous\\nIntegration](https://github.com/input-output-hk/hydra/actions/workflows/ci-nix.yaml)\\n(CI), checking all these tests pass and more.\\n\\nThe CI could sometimes take as long as an hour or\\nmore to run, which has a negative impact on the project\'s workflow.\\nFor instance, all the project\'s branches have to be [fast-forward with\\nmaster](https://github.com/input-output-hk/hydra/wiki/Coding-Standards#merge-prs-with-merge-commits-and-rebase-branches-on-top-of-master)\\nbefore being merged.\\nSo if all the tests on a branch are green and the pull request has been\\napproved but is lagging a bit behind master, it has to be rebased, so the\\nCI has to run again, incurring a one hour or so delay in this case before\\nbeing able to merge it. The situation becomes worse when several pull requests\\nare _ready_ to be merged.\\n\\nAnalyzing the run from [May, 10th](https://github.com/input-output-hk/hydra/actions/runs/4933005294)\\nwe can see that:\\n\\n- Building and testing takes 19 minutes for the longest\\n- Generating haddock documentation and running the benchmarks takes 28 minutes\\n  for the longest\\n- Documentation (which will need artifacts generated in previous steps) will take\\n  14 minutes\\n- In total, this run took 1 hour and 16 minutes.\\n\\nLet\'s focus on the build and the testing stage first. We\'re expecting the\\nplutus-merkle-tree to run fast but [it took 8 minutes and 52\\nseconds](https://github.com/input-output-hk/hydra/actions/runs/4933005294/jobs/8816564512)\\n, 7m and 11 seconds being spent setting up the build environment.\\nIn other words, 81% of the build time is downloading binary dependencies from some nix cache.\\n\\nCompiling the code requires cabal and other nix dependencies that will trigger\\nmassive downloads. Instead, let\'s, straight on, run the tests with nix and let\\nnix decide what needs to be compiled. Sometimes, most of the code will not have\\nchanged and the test binary will already be available in some nix cache to be run\\nwithout any compilation step.\\n\\nThis has been done in [#867](https://github.com/input-output-hk/hydra/pull/867).\\nMerging this PR, the [build on master took 45\\nminutes](https://github.com/input-output-hk/hydra/actions/runs/5003046049) and,\\nspecifically, the same [plutus-merkle-tree\\njob](https://github.com/input-output-hk/hydra/actions/runs/5003046049/jobs/8963773583)\\nonly took 1 minute and 44 seconds, only 20% of the time observed before.\\n\\nThen, let\'s focus on documentation (14 minutes). Most of the time spent by this\\nprocess is website optimization. It makes sense for the documentation that will\\nactually be published on the website (master or release). But what about all\\nthe builds in branches for which the website will never be published?\\nWe need to keep this documentation step in branches because it gives us sanity\\nchecks, preventing broken links, for instance. But we can definitely remove the\\noptimization step.\\n\\nThis has been done in [#880](https://github.com/input-output-hk/hydra/pull/880)\\nand it [saves 10 minutes](https://github.com/input-output-hk/hydra/actions/runs/5067084637/jobs/9098252031)\\nfrom this step.\\n\\nOur first goal was to reduce CI execution time when pushing\\non branches and this has been improved. We\'re now having execution time\\nsignificantly under 30 minutes where it used to be 45 minutes or even an hour.\\n\\nWe had some issues with compilation output, obfuscated by nix, which have been\\nsolved by [#889](https://github.com/input-output-hk/hydra/pull/889).\\n\\nEvery morning, we rebuild our master branch and we can observe the whole\\nexecution time on the following graph (in seconds):\\n\\n![CI perf](./img/2023-05-ci-perf.png) <small><center>C.I. execution total execution time</center></small>\\n\\nAlthough we observed performance improvements on branches CI execution time,\\nmaster execution time has not been reduced that much. We may save 10 minutes\\nfrom the documentation step because optimizing the _unstable_ documentation is\\nmaybe not worthwhile.\\nBut what\'s more problematic here is the process variability.\\n\\nThis variability can be explained by nix cache misses. That\'s something we need\\nto investigate. It\'s hard to optimize a process with buffers, especially here\\nwhere in case of a cache miss, recompilation has to happen and takes time.\\nSo every cache miss introduces several minutes of overhead which explains why we\\nobserve so much variation between two days with this master execution time.\\n\\nNext steps:\\n\\n- Inspect why we have an unexpected random cache miss\\n- Improve haddock generation time (15 minutes)\\n- Reduce bench time (we probably don\'t want to run the whole benchmark suite for\\n  every single commit, or a smaller one)\\n- Focus on the changed area (do not compile everything to generate the monthly\\n  report)\\n\\n## Community\\n\\n#### Hydrozoa [#850](https://github.com/input-output-hk/hydra/discussions/850)\\n\\nThis month, the project saw a new kind of contribution from the community.\\n@GeorgeFlerovsky has written a research piece about an adaptation of the\\n(Coordinated) Hydra Head protocol into a new flavor - Hydrozoa. The article is\\ncurrently being examined and [discussed on\\nGitHub](https://github.com/input-output-hk/hydra/discussions/850). Feedback so\\nfar has been positive. Of course, one does not simply change the Hydra Head\\nprotocol (pun intended), but the ideas contained could drive evolution and\\nbe followed up with concrete protocol extensions. Very much like the ideas\\npresented in the original paper.\\n\\n#### Hydra for Payments project update\\n\\nIn this collaborative effort between IOG and ObsidianSystems, we are pushing the\\nfrontiers of using Hydra in payment use cases. It will lower the entry barrier\\nfor developers and ultimately users to leverage Hydra L2 for sending\\nand receiving ada and Cardano native assets with very low fees and sub-second\\nfinality.\\n\\nThe project is in its second phase where the open-source\\n[hydra-pay](https://github.com/obsidiansystems/hydra-pay) library is being\\nexpanded with necessary features while the team pushes for building a\\ndedicated mobile application.\\n\\nWith the recently released hydra-pay version\\n[0.2.0](https://github.com/obsidiansystems/hydra-pay/releases/tag/v0.2.0), an\\nend-to-end workflow of the Android App nicknamed \\"HydraNow\\" can be realized.\\nThis app will act as a layer 2 wallet quite like a Bitcoin Lightning Wallet and\\ndrives feature development in both `hydra-pay` and `hydra` in the background.\\n\\n![Two instances of HydraNow (in browser) connected via a hydra-pay channel](./img/2023-05-hydra-now.png) <small><center>Two instances of HydraNow (in browser) connected via a hydra-pay channel</center></small>\\n\\n#### Spanish translation\\n\\nLast, but not least, we would like to thank @Agustinblockchain for their\\ncontribution of a [Spanish translation #866](https://github.com/input-output-hk/hydra/pull/866)\\nof the [hydra.family website](https://hydra.family/head-protocol/unstable/es/) \ud83c\uddea\ud83c\uddf8 \ud83c\udf89\\n\\n## Conclusion\\n\\nThe monthly review meeting for May was held on 2023-05-24 via Google Meet with\\nthese [slides][slides] and here is the [recording][recording].\\n\\nThe monthly review meeting was lively and we had stakeholders from IOG as well\\nas interested community members join. They were well served by two very nice\\ndemos shown by ObsidianSystems and IOG teams.\\n\\nAfter having dealt with some issues last month, we are happy to have\\nthe first mainnet-capable version released and have already another feature\\ncompleted this month.\\n\\nIt is great to see that more and more contributors from the community are\\nstepping up to become advocates of the technology. A community is forming and we\\nrealize that the project could need some help from someone dedicated to keep\\ntrack of all the great things happening. What a great problem to have!\\n\\n[slides]: https://docs.google.com/presentation/d/1anUC3Z1idloyR6uwiSHLZtV6-LQvUcByHPMUgCBOVIA\\n[recording]: https://drive.google.com/file/d/1_N6b4RDe579TgLawiJzbE0NLofD3ljE6/view"},{"id":"2023-04","metadata":{"permalink":"/head-protocol/fr/monthly/2023-04","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-04-monthly.md","source":"@site/monthly/2023-04-monthly.md","title":"April 2023","description":"This report summarizes the work on Hydra since March 2023. It serves as","date":"2023-05-03T06:45:42.000Z","formattedDate":"3 mai 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":8.99,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Arnaud Bailly","title":"Lead Architect - Hydra @ IOG","url":"https://github.com/abailly-iohk","imageURL":"https://github.com/abailly-iohk.png","key":"abailly"},{"name":"Sasha Bogicevic","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Pascal Grange","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/pgrange","imageURL":"https://github.com/pgrange.png","key":"pgrange"}],"frontMatter":{"title":"April 2023","slug":"2023-04","authors":["ch1bo","abailly","v0d1ch","pgrange"],"tags":["monthly"]},"prevItem":{"title":"May 2023","permalink":"/head-protocol/fr/monthly/2023-05"},"nextItem":{"title":"March 2023","permalink":"/head-protocol/fr/monthly/2023-03"}},"content":"This report summarizes the work on Hydra since March 2023. It serves as\\npreparation for the monthly review meeting (see\\n[slides](https://docs.google.com/presentation/d/10wZJy0tyGMbvMihbHnHk0QByA_TAZrtbcRbf5Gd-SHg/)\\nand the\\n[recording](https://drive.google.com/file/d/1X4yPerLTatPPMrX3RYS7XH9lfT_LYaaX/view?usp=sharing)),\\nwhere the team updates major project stakeholders on recent developments to\\ngather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThe project [roadmap](https://github.com/orgs/input-output-hk/projects/21) was\\nonly slightly updated this month:\\n\\n![](./img/2023-04-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable roadmap updates\\n\\n- There are still many \ud83d\udcad **idea** items on the roadmap, however, not on the\\n  current and next planned release columns. The process involves clarifying and\\n  refining each idea item into a \ud83d\udcac **feature** before starting work on it. This\\n  includes giving equal consideration to new user \ud83d\udcad **idea**s and requests.\\n\\n- Temporarily postponed the [Hydra heads explorer\\n  #696](https://github.com/input-output-hk/hydra/issues/696) item until there is\\n  more clarity. While there aren\'t any major blockers,the explorer just requires\\n  further detailing, especially since we\'re currently in talks with existing\\n  Cardano explorer platforms.\\n\\n- Converted the [aggregated multi-signature\\n  #193](https://github.com/input-output-hk/hydra/issues/193) from the concrete\\n  roadmap into an [idea discussion\\n  #787](https://github.com/input-output-hk/hydra/discussions/787). This is based\\n  on feedback from the community, and we believe that discussing it there would\\n  be more beneficial.\\n\\n- The main focus for the 0.10.0 release is implementing mainnet compatibility.\\n  This is mostly done and only requires some documentation and disclaimer\\n  updates. We\'re about to release 0.10.0, which will be the first\\n  mainnet-compatible version.\\n\\n- Meanwhile, work on the [configurable API\\n  #380](https://github.com/input-output-hk/hydra/issues/380) was completed,\\n  which gave rise to new ideas and follow-up feature requests from users. One of\\n  them ([Add HeadState/Snapshot to Greetings\\n  #823](https://github.com/input-output-hk/hydra/issues/823)) was fairly\\n  straightforward and necessary to deliver a consistent, usable increment on the\\n  API with the upcoming release.\\n\\n- Prioritized [Support timed transactions\\n  #196](https://github.com/input-output-hk/hydra/issues/196) higher as yet\\n  another use case would benefit from this.\\n\\n![](./img/2023-04-roadmap-ex-ideas.png) <small><center>The roadmap without idea items</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-03-29..2023-04-26)\\n\\nThis month, the team worked on the following:\\n\\n#### Configurable API\\n\\nThe API evolved a bit, driven by the issues our users reported\\n[#823](https://github.com/input-output-hk/hydra/issues/823)\\n[#813](https://github.com/input-output-hk/hydra/issues/813)\\n[#800](https://github.com/input-output-hk/hydra/issues/800)\\n[#789](https://github.com/input-output-hk/hydra/issues/789). Related changes\\nwere added to the API server so now our clients can:\\n\\n- Control the historical messages output. History messages can be displayed\\n  upon re/connection or not depending on client needs.\\n- Snapshot UTXOs can optionally be disabled.\\n- Transactions can be displayed in CBOR or JSON format.\\n\\nOur clients can also have a nice insight into the current Hydra node state and head UTXOs\\nthat are now displayed as part of a `Greetings` message.\\n\\nNext steps on the API level are to further fulfill user needs by grooming and\\nimplementing needed changes related to filtering, pagination etc.\\n\\n#### Versioned docs and specification\\n\\nOver the [last couple of months](/monthly/2023-02#development) the Hydra\\nspecification became an important artifact to use in discussion, review and\\npotential audit of the Hydra Head protocol implementation. The document was now\\nmoved from overleaf into the Hydra repository, where it is properly versioned\\nand built on each CI run. Changes can be proposed using our regular pull request\\nworfklow and the final PDF is built and [published to the\\nwebsite](https://hydra.family/head-protocol/unstable/core-concepts/specification)\\nautomatically.\\n\\nNote that the above link points to the new `/unstable` version of the\\ndocumentation, which holds the bleeding edge user manual, specification and\\nAPI reference (which got a new sidebar) built directly from `master`. The\\nnormal, non-unstable version of the website is always referring to the [last\\nreleased version](https://github.com/input-output-hk/hydra/releases).\\n\\n![](./img/2023-04-specification.png) <small><center>Specification on the Hydra website</center></small>\\n\\n#### Fixed scripts, Plutonomy and custom script contexts\\n\\nAs we made the specification use a more direct way to represent transactions\\n(instead of the constraint emitting machine formalism), we realized that our\\nscripts are not correctly ensuring _script continuity_. We identified these\\n\'gaps\' as red sections (see above) in the specification and worked on fixing\\nthem.\\n\\nWhile the [actual fix #777](https://github.com/input-output-hk/hydra/pull/777)\\nwas fairly straightforward and could easily be covered by our mutation-based\\ncontract tests, the script size increased and we could not publish all three\\nHydra scripts in a single publish transaction (which allows for a single\\n`--hydra-scripts-tx-id` parameter on the `hydra-node`).\\n\\nTo mitigate this, we looked into the UPLC optimizer\\n[Plutonomy](https://github.com/well-typed/plutonomy/tree/master/src/Plutonomy).\\nApplying it was fairly simple, our tests did also pass, script sizes _and\\ncosts_ also became lower. But, script size does not matter so much as we are\\nusing reference scripts and using a (not really maintained?) optimizer which\\nintroduces yet another question mark after compilation from `plutus-tx` to\\n`uplc` was not our cup of tea right now at least (and we might pull this out\\nof the drawer later).\\n\\nThere is an alternative: decoding `ScriptContext` involves quite some code,\\nbut we don\'t need everything in all validators. So we introduced a\\ncustomscript context that only decodes the fields we need.\\n\\n| scripts  | @0.9.0 | fixes | fixes + plutonomy | fixes + custom ScriptContext |\\n| -------- | ------ | ----- | ----------------- | ---------------------------- |\\n| \u03bdInitial | 4621   | 4727  | 3672              | 4300                         |\\n| \u03bdCommit  | 2422   | 2513  | 1816              | 2068                         |\\n| \u03bdHead    | 8954   | 9492  | 7579              | 9456 (no custom SC)          |\\n| \u03bcHead    | 4458   | 4537  | 3468              | 4104                         |\\n\\nAs part of this process, we also updated dependencies #[826](https://github.com/input-output-hk/hydra/pull/826) to the latest\\n`cardano-node` master. Although it didn\'t have an impact on script sizes, it\'s a\\ncrucial step towards preparing for upcoming hard-forks.\\n\\n#### Rollback bug hunt\\n\\nOpening our first head on mainnet failed. We didn\'t\\nlose any funds, except for some fees, but the head just did not open.\\nExploring the logs, we figured out that a rollback happened while opening the\\nhead and there was a bug.\\n\\nThis is our test pyramid. It already contained some tests about the rollback but\\nwe decided to enrich our model-based tests to simulate rollbacks (before that,\\nit used to run on a _perfect_ blockchain). You can find more about our\\nmodel-based test strategy in [Model-Based Testing with\\nQuickCheck](https://engineering.iog.io/2022-09-28-introduce-q-d/).\\n\\n![test pyramid](./img/2023-04-test-pyramide.png) <small><center>Testing pyramide</center></small>\\n\\nThe new property\\n[headOpensIfAllPartiesCommit](https://github.com/input-output-hk/hydra/blob/commit_vs_rollback/hydra-node/test/Hydra/ModelSpec.hs#L185)\\nhelped prove the issue. At the end of the day, the problem came from a\\nconcurrency issue introduced while implementing [ADR 18](./adr/18).\\n\\nIn the figure below, the `DirectChain` processes a new block, updating the\\n`chainState` stored inside the `headState`. This also leads to an event being\\npublished to some event queue. Later, the `HeadLogic` (called _Node_ in the\\npicture) will process this event, updating the `headState`.\\n\\nAt the end of the process, we can see that the new `headState` points to a\\n`previousRecoverableState` which contains the same `chainState`, `chainState 1`\\ninstead of `chainState 0`. If a rollback then happens, the `headState` will be\\nreverted to this `previousRecoverableState` and the fact that it contains\\n`chainState 1` instead of `chainState 0` makes some on-chain observations\\nimpossible.\\n\\n![Race condition](./img/2023-04-race-condition.png) <small><center>Race condition</center></small>\\n\\nThis explains the issue we had when opening our head:\\n\\n1. a commit A is observed on-chain;\\n2. a rollback happens so that the headState _forgets_ about this commit but not\\n   the `chainState` (remember, it\'s the wrong `chainState`);\\n3. the commit is observed again on the chain but ignored by the `chainState` (because\\n   it has already seen it, it just ignores it);\\n4. the `headState` will never hear about this commit again and so will never open\\n   the head, waiting forever for the missing commit.\\n\\nWe decided to implement the following solution:\\n\\n- A local chain state is re-introduced in the chain component, not shared with\\n  the head logic.\\n- A copy of the chain state is kept in the head state to keep the benefits of\\n  ADR [18](./adr/18) regarding persistence.\\n- The rollback event is removed from the API until [#185](https://github.com/input-output-hk/hydra/issues/185).\\n\\n![possible solution](./img/2023-04-possible-solution.png) <small><center>Possible solution</center></small>\\n\\nRollback management is quite a tricky business. It might be the case that we\'ve\\ntried to be a bit too smart. So we\'re doing a rollback in our way of handling\\nrollbacks until we focus on this topic again when dealing with this roadmap item:\\n[Handle rollbacks II](https://github.com/input-output-hk/hydra/issues/185).\\n\\n## Community\\n\\n#### Hydra for Voting\\n\\nThe project is advancing and a basic vote tallying scenario in the Catalyst use\\ncase was demonstrated in the review meeting. The project is driving the API\\ndiscussions as it is not using any Haskell tooling, but an application in Java\\nwith Aiken as the validator scripting language. Besides the catalyst use case,\\nother scenarios like the ballot voting for the summit are also explored now.\\n\\n#### Hydra for Auctions\\n\\nA new demo was recorded in the wake of an upcoming Twitter space discussing\\nauctions and NFT marketplaces with the community. The feature set currently\\nincludes starting the auction on L1, bidding on L1 or (and this is the novel\\nthing!) transferring the auction from L1 to L2, such that it can be bid on L2.\\n\\n<div style={{position: \\"relative\\", paddingBottom: \\"56.25%\\", height: 0}}>\\n  <iframe src=\\"https://www.loom.com/embed/7ed84e37d65748d994d8a0be147f7ecb\\"\\n  frameborder=\\"0\\" webkitallowfullscreen mozallowfullscreen allowfullscreen\\n  style={{position: \\"absolute\\", top: 0, left: 0, width: \\"100%\\", height:\\n  \\"100%\\"}}></iframe>\\n</div>\\n\\n#### Kupo x Hydra\\n\\nIn a good old pairing session between IOG and CF engineers, the integration of\\nKupo with Hydra was explored. This seems to be promising and work started [here\\nkupo#117](https://github.com/CardanoSolutions/kupo/pull/117). This will make it\\npossible to run `kupo` natively connected to a `hydra-node`, very much it would\\nrun with `cardano-node` or `ogmios`. Kupo is a lightweight indexer of chain data\\nlike unspent transaction outputs and allows its clients to query information\\non-demand. \ud83d\udc39\\n\\n#### CBIA meetings\\n\\nHydra Team is now a regular participant to [Cardano Blockchain Infrastructure\\nAlliance](https://www.cbia.io/) meetings which happen more or less on a monthly\\nbasis. Hydra was featured during the meetup that happened while the team was on\\na [workshop in Feldkirch](/monthly/2023-03) and through this participation we\\nhope to contribute to growth of the Cardano eco-system and position Hydra as a\\nkey infrastructure for builders.\\n\\n#### Twitter space on scaling Cardano\\n\\nThis month we took part in a Twitter space about scaling Cardano and how Hydra\\ncan contribute to this. Thanks for conducting this\\n[@thepizzaknight\\\\_](https://twitter.com/thepizzaknight_) \ud83d\ude4f\\n\\n<a href=\\"https://twitter.com/i/spaces/1vOxwMVDaXLGB\\">\\n\\n![](./img/2023-04-twitter-space.png)\\n\\n</a>\\n\\n## Conclusion\\n\\nThe monthly review meeting for April was held on 2023-04-26 via Google Meet with\\nthese\\n[slides](https://docs.google.com/presentation/d/10wZJy0tyGMbvMihbHnHk0QByA_TAZrtbcRbf5Gd-SHg/)\\nand here is the\\n[recording](https://drive.google.com/file/d/1X4yPerLTatPPMrX3RYS7XH9lfT_LYaaX/view?usp=sharing).\\n\\nAlthough it has been a busy month we could not cut a release, unfortunately.\\n\\nWe\'ve experienced several setbacks due to the commits vs. rollbacks bug and oversized script sizes, which have slowed down our progress. Additionally, the back and forth on the API, which at times required creative and unconventional solutions, has also been time-intensive. However, we view this feedback as **incredibly** valuable, as it will ultimately make hydra-node more user-friendly and capable, albeit through a step-by-step process.\\n\\nAssociated projects in the greater Hydra community are moving ahead nicely\\ndue to the collaborative approach and tight loops of interaction between the\\nindividual teams.\\n\\nAll things considered, the project can be considered on track. We are very close to cutting our first mainnet-compatible release and the rising number of user\\nrequests and interested developers are good indicators that Hydra adoption\\nis increasing."},{"id":"2023-03","metadata":{"permalink":"/head-protocol/fr/monthly/2023-03","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-03-monthly.md","source":"@site/monthly/2023-03-monthly.md","title":"March 2023","description":"This report summarizes the work on Hydra since February 2023. It serves as","date":"2023-04-04T13:15:50.000Z","formattedDate":"4 avril 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":5.03,"hasTruncateMarker":false,"authors":[{"name":"Franco Testagrossa","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"},{"name":"Sasha Bogicevic","title":"Senior software engineer - Hydra @ IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"March 2023","slug":"2023-03","authors":["ffakenz","v0d1ch","ch1bo"],"tags":["monthly"]},"prevItem":{"title":"April 2023","permalink":"/head-protocol/fr/monthly/2023-04"},"nextItem":{"title":"February 2023","permalink":"/head-protocol/fr/monthly/2023-02"}},"content":"This report summarizes the work on Hydra since February 2023. It serves as\\npreparation for the monthly review meeting\\n([slides](https://docs.google.com/presentation/d/1yZ4AqUQ8OBMG9ARMYvj3IOjaIAqglf7kZei4vsLMrbs/edit#slide=id.g1f87a7454a5_0_1392)/[recording](https://www.youtube.com/watch?v=mA9lMV0tKN8))\\n, where the team updates major project stakeholders on recent developments to\\ngather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThe project saw one release this month and several items on our\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21) were updated.\\n\\n#### Released version 0.9.0\\n\\n- This release brought in on-chain and off-chain changes that are now also fully\\n  reflected in our specification.\\n\\n- We managed to decrease the costs of our plutus scripts by using a new error code\\n  framework and made also the head script a reference script.\\n\\n- The mutation test suite is improved. Now, if tests fail they show the correct reason.\\n\\n- The contestation deadline is now pushed out by each contesting party, so the\\n  contestation period parameter can be chosen irrespective of number of parties.\\n\\n- Added a tutorial contributed by [@perturbing](https://github.com/perturbing/).\\n\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.9.0) and list of [delivered features](https://github.com/input-output-hk/hydra/milestone/9?closed=1)\\n\\n![](./img/2023-03-roadmap.png) <small><center>The latest roadmap, with many items marked as idea.</center></small>\\n\\n#### Notable roadmap updates\\n\\n- Now that 0.9.0 is released, the focus is on mainnet compatiblity. The\\n  next planned version **0.10.0** will be the first `hydra-node` to be\\n  mainnet compatible.\\n\\n- Also prioritized [API configurability\\n  #380](https://github.com/input-output-hk/hydra/issues/380) higher and planned\\n  it into 0.10.0 as more users were requesting this.\\n\\n- We aim for several more **0.x.0** versions to incorporate user-requested\\n  features before reaching a 1.0.0, which will be a fully maintained release\\n  where features can be considered stable and won\'t be removed without\\n  appropriate deprecation cycles.\\n\\n- Marked multiple features as \ud83d\udcad _idea_, meaning they are up for discussion.\\n  Many have been on the roadmap for a long time without user demand or input,\\n  while other ideas are incubating as [github idea\\n  discussion](https://github.com/input-output-hk/hydra/discussions/categories/ideas).\\n  We are planning to convert these idea issues to GitHub discussions as these\\n  provide better dicussion tools and allow to gauge interest in topics. In turn,\\n  by cleaning up we provide more room for the most popular ideas to be planned\\n  onto the roadmap in a more timely manner.\\n\\n- In short, if you want to see some feature added, **show your support** on the\\n  corresponding [idea\\n  discussion](https://github.com/input-output-hk/hydra/discussions/categories/ideas).\\n\\n- The \ud83d\udcac _feature_ items remaining are the currently identifed \\"must-haves\\" or\\n  too vague to remove \ud83d\udd34 _red_ items.\\n\\n![](./img/2023-03-roadmap-ex-ideas.png) <small><center>The roadmap without idea items.</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-02-24..2023-03-29)\\n\\nThis month, the team worked on the following:\\n\\n- **Making Hydra mainnet compatible.** Besides making it technically possible to\\n  run on mainnet, this is about safeguarding our users and preventing them from\\n  shooting themselves in the foot with a mainnet gun. That is why we\\n  [limited](https://github.com/input-output-hk/hydra/issues/762) the amount of\\n  ada you can commit to a head on mainnet. Our smoke tests should be running on\\n  mainnet also so we made sure to\\n  [return](https://github.com/input-output-hk/hydra/pull/770) the leftover funds\\n  back to our faucet. There was also\\n  [work](https://github.com/input-output-hk/hydra/pull/775) on our CI that\\n  enables running the tests on mainnet using a dedicated github runner.\\n\\n- **Improving the Hydra UX.** We noticed a possible pitfall when restarting the\\n  `hydra-node` using different parameters than in the persisted state. Now, the\\n  node would [prevent](https://github.com/input-output-hk/hydra/issues/764) this\\n  kind of misconfiguration.\\n\\n- **Optimize the on-chain scripts.** Reduced the cost of opening/closing a Head\\n  by reducing size of scripts via error codes\\n  [#748](https://github.com/input-output-hk/hydra/pull/748) and also having the\\n  head script as a reference only\\n  [#701](https://github.com/input-output-hk/hydra/pull/701)).\\n\\n  The mutation test also got improved by making all cases expect the\\n  corresponding error codes\\n  [#705](https://github.com/input-output-hk/hydra/issues/705) and new [golden\\n  test suite ](https://github.com/input-output-hk/hydra/pull/772) ensures the\\n  script hashes don\'t change accidentally.\\n\\n  Furthermore, we addressed a problem discovered in our property tests\\n  [#724](https://github.com/input-output-hk/hydra/pull/724) by preventing\\n  committing outputs with reference scripts to a Head\\n  [#766](https://github.com/input-output-hk/hydra/pull/766). This is still a\\n  documented known issue, but a workaround is available.\\n\\n## Community\\n\\n- **Team workshop in Austria.** Meetup of core contributors in Feldkirch,\\n  Austria for retrospective, grooming and discussions on future plans for\\n  Hydra. Part of the agenda was also a presentation of Hydra to members of the\\n  Cardano Foundation and a meeting with builders from the Cardano community.\\n\\n  The highlight, though was the common effort of going the last mile to open a\\n  head on mainnet for the monthly review meeting! \ud83c\udf89\\n\\n    <blockquote class=\\"twitter-tweet\\"><p lang=\\"en\\" dir=\\"ltr\\">JUST IN: We have a Hydra Head live on the <a href=\\"https://twitter.com/hashtag/Cardano?src=hash&amp;ref_src=twsrc%5Etfw\\">#Cardano</a> Mainnet \ud83d\ude80 <a href=\\"https://t.co/6kDKq7T7no\\">pic.twitter.com/6kDKq7T7no</a></p>&mdash; Emmanuel \ud80c\udc80 \ud83c\udf55 \ud80c\udd53\ud83c\uddec\ud83c\udded\ud83e\udd84\ud83d\udfe3\u26a1\ufe0f (@thepizzaknight_) <a href=\\"https://twitter.com/thepizzaknight_/status/1638572527789252608?ref_src=twsrc%5Etfw\\">March 22, 2023</a></blockquote> <script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n  We demonstrated our good old `hydraw` application on that Hydra head and we\\n  saw thousands of pixels painted by hundreds of users (no detailed metrics).\\n\\n- **Next step in Hydra for Payments.** Also announced in the monthly meeting was\\n  the next phase on the Hydra for Payments project. The scope of this will be to\\n  extend hydra-pay and build a mobile payment channels app that makes direct use\\n  of it - working title: HydraNow.\\n\\n## Conclusion\\n\\nThe monthly review meeting for March was conducted on 2023-03-27 via Google\\nMeet - [slides](https://docs.google.com/presentation/d/1yZ4AqUQ8OBMG9ARMYvj3IOjaIAqglf7kZei4vsLMrbs/edit#slide=id.g1f87a7454a5_0_1392)/[recording](https://www.youtube.com/watch?v=mA9lMV0tKN8).\\n\\nThis month was very important for the project and culminated in the first\\ndemonstration of a Hydra Head on mainnet! The demo was well received and we\\nreceived positive feedback in the meeting, on following twitter announcements\\nand on the published recording on youtube. Inspired by this, we saw multiple\\npeople offer to help and collaborate on communicating, educating and ultimately\\nspreading the love. The invitation via the new discord category worked well - we\\nhad about 40 community members in the call - and we will continue with this\\nworkflow. Make sure to follow the Hydra\\n[#announcements](https://discord.gg/Bwdy2jNdm2) on the IOG Technical discord\\nserver.\\n\\nWhile being mainnet compatible is a major milestone for the project, there are\\nstill many known issues, shortcomings and requested features. The roadmap\\nchanges this month should make it clear that we are serious about the latter -\\nHydra will only reach 1.0.0 if it is used by an application on mainnet. Hence,\\nwe will focus on adding features required for payments, voting, auctions, ...\\nand eventually, your use case.\\n\\nHydra Head is ready to be used on mainnet. Are you ready to use it?"},{"id":"2023-02","metadata":{"permalink":"/head-protocol/fr/monthly/2023-02","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-02-monthly.md","source":"@site/monthly/2023-02-monthly.md","title":"February 2023","description":"This report summarizes the work on Hydra since January 2023. It serves as","date":"2023-03-02T07:26:29.000Z","formattedDate":"2 mars 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":6.45,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"February 2023","slug":"2023-02","authors":"ch1bo","tags":["monthly"]},"prevItem":{"title":"March 2023","permalink":"/head-protocol/fr/monthly/2023-03"},"nextItem":{"title":"January 2023","permalink":"/head-protocol/fr/monthly/2023-01"}},"content":"This report summarizes the work on Hydra since January 2023. It serves as\\npreparation for the monthly review meeting, where the teams update major project\\nstakeholders on recent developments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nLooking at the [roadmap](https://github.com/orgs/input-output-hk/projects/21),\\nthere are a few things that changed this month:\\n\\n- In general, there will be several items in flux as we align the technical\\n  roadmap to support our high-level objectives for the year.\\n\\n  + New items for example: [create a use case-centric roadmap\\n  #710](https://github.com/input-output-hk/hydra/issues/710) and [open\\n  specification with change process\\n  #693](https://github.com/input-output-hk/hydra/issues/693).\\n\\n- Also note that we have not had a release in a while and we want to have\\n  smaller faster releasable items again.\\n\\n- [Aligning implementation with HeadV1 specification\\n  #452](https://github.com/input-output-hk/hydra/issues/452) was more work than\\n  anticipated. There was quite some back and forth with the writing of the\\n  specification and discussions with researchers leading to scope creep.  \\n  Most importantly, we made on-chain behavior consistent with specification.\\n  + Follow-ups for some off-chain protocol logic:\\n    - [Authenticate network messages\\n      #727](https://github.com/input-output-hk/hydra/issues/727)\\n    - [ReqSn only sends transaction ids\\n      #728](https://github.com/input-output-hk/hydra/issues/728)\\n  \\n- Version **0.9.0** will be the first release to be developed against a full\\n  technical specification. We expect a release in early March.\\n\\n- Version **0.10.0** will be the first mainnet compatible release. For this, we\\n  created and groomed the main feature item [Mainnnet compatibility\\n  #713](https://github.com/input-output-hk/hydra/issues/713):\\n  - Not only making it technically compatible but also adding guard rails to\\n    limit risk (\u201cnot shoot yourself in the foot .. with a real gun now\u201d) and\\n    documenting known issues.\\n\\n- For a fully maintained version **1.0.0** we still need to address some things,\\n  but we aim for an increased rate of planned releases in the next months as we\\n  march toward it.\\n  \\n![](./img/2023-02-roadmap.png) <small><center> The latest roadmap with multiple\\nnew items and starting to reflect Hydra objectives of 2023.</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-01-24..2023-02-28)\\n\\nThis month, the team worked on the following:\\n  \\n- **Aligning specification and implementation**. This major [feature\\n  item](https://github.com/input-output-hk/hydra/issues/452) was the topic we\\n  worked on over the last couple of months. This time we could finish the major,\\n  must-have parts and can continue now on other features. Notable things from\\n  this month were:\\n  \\n  **Pushing out contestation deadlines:** The original paper defined that all\\n  participants need to be contesting within the contestation period (after\\n  close, before the deadline). In discussions with researchers last year, we\\n  identified better semantics: the contestation deadline gets \\"pushed out\\" on\\n  each contest. This has the benefit that the period needs to only accommodate\\n  the minimum time required to get a single contest transaction into the\\n  blockchain. Before it was depending on the size of the Hydra head - each\\n  participant can contest once.\\n  \\n  **Align off-chain protocol logic:** While most concerns addressed were about\\n  the on-chain scripts of the Hydra protocol, this is about the layer two\\n  protocol logic. That is, which messages are exchanged between Hydra nodes and\\n  how a node reacts to them. Here we realized that the implementation was\\n  slightly different from the formalism used in the paper and specification.\\n  This makes it non-obvious whether the behavior is exactly as specified or\\n  whether the specification can even be implemented into a working system.\\n  \\n  To clarify this, we put in some effort to align the implementation with the\\n  specification and the other way around. This allowed us to reason through our\\n  behavior tests whether the protocol as specified is sound as well. Below you\\n  see an excerpt of the Haskell code against the LaTeX pseudocode formalism:\\n  \\n  <center> <img src={require(\\"./img/2023-02-logic-haskell.png\\").default}\\n    style={{width: 310}} /> <img\\n    src={require(\\"./img/2023-02-logic-latex.png\\").default} style={{width: 250}}\\n    /> </center>\\n \\n- **Profiling Hydra transactions.** We will want to maximize the capability of\\n  the Hydra Head protocol. This includes writing the on-chain scripts\\n  efficiently. Besides having [transaction cost\\n  benchmarks](https://hydra.family/head-protocol/benchmarks/transaction-cost/),\\n  we worked on a profiling workflow for Hydra protocol transactions and\\n  published a [tutorial on the Hydra\\n  website](https://hydra.family/head-protocol/benchmarks/profiling). This allows\\n  any contributor to [Hydra](https://github.com/input-output-hk/hydra) to\\n  profile the scripts used in these transactions and identify code that uses a\\n  lot of the memory or CPU budget in flame graphs like this:\\n  \\n  ![](../benchmarks/profile-mem.svg) [Interactive]Head not closable/limiting\\n  script size discussion + acceptance property\\n\\n## Community\\n\\n- **Audit guidelines.** Hydra is an open-source project and, as such, should be\\n  freely used, reviewed and audited. The goal of audits and peer reviews is to\\n  increase confidence in the security of a system. However, conducting an audit\\n  is also very expensive and not in the scope of our current budget. All the\\n  while, the worth of an audit is not the same to all users, some will not even\\n  trust an audit they have not paid for themselves, while others do not care at\\n  all and would blindly trust the word of the maintainers.\\n  \\n  While the Hydra project continues to seek for funding to eventually pay for an\\n  audit of the protocol specification and the `hydra-node` implementation, it is\\n  a prerequisite that the necessary artifacts for such an audit exist. As we\\n  have been creating them in recent months, we also worked on guidelines for\\n  auditors, now [published on our\\n  website](https://hydra.family/head-protocol/audit-guidelines/). These\\n  guidelines should serve as a starting point and scope description of what\\n  would be most crucial to audit.\\n\\n- **New tutorial.** This month we received a great contribution from\\n  [@perturbing](https://github.com/perturbing/), who created an [end-to-end\\n  tutorial](https://hydra.family/head-protocol/docs/tutorial/) on using a\\n  `hydra-node` and opening a Hydra head on the testnet. We gladly adopted this\\n  tutorial and aim to keep it up to date with upcoming versions of the\\n  `hydra-node`. It will provide a great starting point for new users and makes\\n  the project more approachable. Thanks! :green_heart:\\n\\n- **Hydra for Payments demo.** As we are about to kick off the next phase of the\\n  payments use case with Obsidian Systems, they demonstrated the use of\\n  [hydra-pay](https://github.com/obsidiansystems/hydra-pay) in a new\\n  backoffice-like view, listing multiple payment channels and providing a great\\n  teaser of using payment channels for pay-per-use APIs or cashback use cases\\n  (micro-transactions).\\n\\n  ![](./img/2023-02-payment-channels.png)\\n\\n- **Hydra for Voting.** The project with Catalyst and Cardano Foundation on\\n  voting with Hydra (or rather *tallying* with Hydra) showed some progress. They\\n  have [contributed Merkle Trees to\\n  Aiken](https://github.com/aiken-lang/trees/pull/1), which will be useful to\\n  prove the correct tallying of votes in the L2. They started work on a\\n  [hydra-java-client](https://github.com/cardano-foundation/hydra-java-client)\\n  and provided valuable feedback on the `hydra-node` API over the last month.\\n\\n- **Hydra on Demeter.** The folks from [@txpipe](https://github.com/txpipe) have\\n  been working on integrating Hydra into their platform-as-a-service offering,\\n  Demeter. This is a great way to get started with running a `hydra-node` as a\\n  service and we plan on integrating one instance into our long-running hydraw\\n  demo. It\'s still not fully released, but the teams are working together to\\n  make this integration great. Thanks for providing this service! :green_heart:\\n  \\n- **New discord category.** The Hydra project will be using Discord a bit more\\n  in the coming weeks and months. For that, a new category on the [IOG Technical\\n  Discord server](https://discord.gg/Bwdy2jNdm2) has been created. Look out for\\n  news and, most importantly, invites for the next month\'s review meeting in the\\n  new Hydra #announcements channel!\\n  \\n  <div style={{display: \'flex\'}}> <img\\n    src={require(\\"./img/2023-02-discord.png\\").default} style={{width: 300,\\n    margin: \'0 auto\'}} /> </div>\\n\\n## Conclusion\\n\\nThe monthly review meeting for February was conducted on 2023-02-27 via Google\\nMeet -\\n[slides](https://docs.google.com/presentation/d/1FjLvlLS4Qh6dwuULFJxielvemDGi-xiWZ2o6wysJk7U/edit#slide=id.g1f87a7454a5_0_1392)\\n/\\n[recording](https://drive.google.com/file/d/15l5F5NJNO1aC4X8HdQUDsg_dKMgVCO-J/view?usp=sharing).\\n\\nThis month\'s installment featured two demos, one about the Hydra Payment\\nchannels, and another about the progress on the Hydra for Auctions project. It\\nwas great to showcase not only core development progress on the specification\\nand protocol implementation in the `hydra-node`, but also to see contributions\\nfrom the Community on tutorials and tooling (Demeter integration).\\n\\nAn exciting, but also challenging next step will be to aim for mainnet\\ncompatibility and at the same time deliver quick releases to enable these\\nlighthouse projects and the increasing number of use cases explored by the\\nbuilders of Cardano."},{"id":"2023-01","metadata":{"permalink":"/head-protocol/fr/monthly/2023-01","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2023-01-monthly.md","source":"@site/monthly/2023-01-monthly.md","title":"January 2023","description":"This report summarizes the work on Hydra since December 2022. It serves as","date":"2023-01-26T11:32:23.000Z","formattedDate":"26 janvier 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":5.845,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"January 2023","slug":"2023-01","authors":"ch1bo","tags":["monthly"]},"prevItem":{"title":"February 2023","permalink":"/head-protocol/fr/monthly/2023-02"},"nextItem":{"title":"December 2022","permalink":"/head-protocol/fr/monthly/2022-12"}},"content":"This report summarizes the work on Hydra since December 2022. It serves as\\npreparation for the monthly review meeting, where the teams update major project\\nstakeholders on recent developments to gather their feedback on the proposed\\nplan forward.\\n\\n## Roadmap\\n\\nLooking at the [roadmap](https://github.com/orgs/input-output-hk/projects/21),\\nthere are just a few things to report this month:\\n\\n- Regroomed [Create updated specification for coordinated head protocol\\n  #448](https://github.com/input-output-hk/hydra/issues/448) to :yellow_heart:,\\n  as good progress was made on the specification\\n\\n- Marked [Align implementation with HeadV1 protocol specification\\n  #452](https://github.com/input-output-hk/hydra/issues/452) as :red_circle:, as\\n  the team experienced scope creep and has not progressed as fast as expected.\\n  + The plan is to break this initiative into smaller tasks to address and\\n    explain implementation challenges.\\n  \\n![](./img/2023-01-roadmap.png) <small><center> The latest roadmap with minor\\nchanges, which needs a reflection of the latest objectives. </center></small>\\n\\n## Development\\n\\n[Issues closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2022-12-23..2023-01-24)\\n\\nThis month, the team worked on the following:\\n  \\n- **First write-up of Hydra spec online**. The team has been aggregating the\\n  latest definitions of on- and off-chain semantics into a new technical\\n  specification. The latest version can still be found [on\\n  Overleaf](https://www.overleaf.com/project/6389ba5edbcf7a51fda1328f), before\\n  its integration into the core Hydra repository. Should you have feedback,\\n  please send it our way through one of the [communication\\n  channels](https://github.com/input-output-hk/hydra/blob/master/SUPPORT.md).\\n\\n- **Closed more gaps in the Head Contract.** The team addressed two more gaps in\\n  the on-chain scripts based on discussions on the specification.\\n\\n  + All validators are authenticated now and ensure contract continuity by\\n    checking for the state tokens in the output (or getting burned).\\n\\n  + Abort now fully reimburses all committed UTXOs, even if two parties would\\n    have committed the exact same output (quite a theoretical attack vector).\\n\\n  This work is captured in\\n  [#452](https://github.com/input-output-hk/hydra/issues/452), but this work\\n  item is taking quite a bit longer than expected. Also, it\'s a single feature\\n  item, lacking some rationale on certain requirements, so we intend to break\\n  this down into smaller pieces over the next days and weeks.\\n\\n- **Mutation test framework improvements.** While closing gaps in the contracts,\\n  the team realized that some of the [mutation\\n  tests](https://hydra.family/head-protocol/haddock/hydra-node/tests/Hydra-Chain-Direct-Contract-Mutation.html)\\n  were correctly tripping validators and making transactions invalid, but not\\n  always for the right reason. In fact, some of the mutations were \u2018too harsh\u2019\\n  and made the even transaction not even pass phase-1 validation. The team\\n  addressed this by introducing a first (naiive) way to assert the right cause\\n  of the failure by checking strings in the validator log.\\n  [#679](https://github.com/input-output-hk/hydra/pulls/679)\\n\\n- **Add `headId` in API and TUI.** The team not only added the unique `headId`\\n  to the appropriate server outputs and the TUI\\n  [#678](https://github.com/input-output-hk/hydra/pull/678), but also added\\n  sequence numbers and timestamps to produced outputs\\n  [#618](https://github.com/input-output-hk/hydra/pull/618). This feature was\\n  asked for by users and simplifies identifying of heads and integration with\\n  the hydra-node.\\n\\n- **Hydra explorer experiment.** Some of the team used the holiday season to\\n  conduct some experiments on summarizing Hydra Heads observed on a network.\\n  This quick hack already demonstrates the value of a Hydra explorer as a tool\\n  to measure adoption by open heads on a given network. Naturally, it would\\n  reuse code from the hydra-node and challenge the architecture used in it for\\n  tracking multiple heads. Also, it will drive discussion about the versioning\\n  of hydra-plutus and the possibility to track multiple versions of the Hydra\\n  protocol on the chain (hashes/addresses change in each version).\\n  \\n![](./img/2023-01-explorer.png) <small><center> Hydra explorer first experiment\\nUI </center></small>\\n\\n## Community\\n\\n- **The Hydra for Voting project**, which got kicked off in December is picking\\n  up steam with deep dives into Catalyst voting and Hydra technology.\\n  Discussions are currently held in various settings and the team is continuing\\n  to develop a picture of what is achievable.\\n\\n- **Hydra for auctions lite paper**. IOG is collaborating with MLabs on\\n  exploring how Hydra can improve auction use cases. At this stage, the teams\\n  discussed multiple approaches on structuring the problem space with various\\n  Hydra topologies and specific trade-offs. The full case study was published\\n  [on Essential\\n  Cardano](https://www.essentialcardano.io/article/implementing-auction-projects-using-hydra).\\n  The teams plan to upstream the findings back into the [use case\\n  section](https://hydra.family/head-protocol/use-cases/nft-auction/) on the\\n  Hydra website from which this project originated.\\n  \\n## Themes for 2023\\n\\nAfter kicking off planning in a\\n[workshop](http://ncoding.at:3000/head-protocol/monthly/2022-11#cardano-summit--workshop)\\nand reflecting on [what Hydra achieved in\\n2023](https://cardanofoundation.org/en/news/hydra-head-protocol-an-open-source-solution-for-scalability/),\\nthe team has progressed in fleshing out relevant themes and objectives for this\\nyear to position Hydra as a sustainable open-source project in the age of\\nVoltaire:\\n\\n- **A mainnet mature application**\\n  + **Why?** The core contributors should be able to use the protocol on\\n    mainnet, so it should be maintainable and mature enough to lock some ada in\\n    a Hydra Head using a reference DApp (eg, hydraw). By creating and growing\\n    this DApp, the team will\\n    [dogfood](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) features\\n    and hence improve additional usability.\\n  + **How to measure?** Number of heads on mainnet > 0 and core contributors\\n    feel confident to lock at least 100\u20b3 in a Hydra Head on mainnet.\\n  + **Next steps:**\\n    - Publish Hydra Head V1 specification\\n    - Close gaps in implementation and release 0.9.0\\n    - Create a request for proposals (RFP) to audit the specification and its\\n      implementation\\n\\n- **Increase adoption**\\n  + **Why?** The team wants to showcase what is possible with Hydra through\\n    benchmarks and lighthouse projects, enabling use cases and reducing friction\\n    to use Hydra. Also, ensuring interoperability through open standards and\\n    reference implementations.\\n  + **How to measure?** Number of third-party created heads on any network > 0\\n  + **Next steps:**\\n    - Build a basic Hydra Head explorer to measure adoption\\n    - Benchmark off-chain performance (of a selected scenario)\\n    - Demonstrate Hydra for payments to potential users\\n    - Support Hydra for voting project\\n    - Hydra for auctions project exploring a delegated voucher auction\\n\\n- **Sustainable open-source-development**\\n  + **Why?** The team wants to scale Cardano in the long run. Hence this project\\n    should not be owned by a single entity, but by the community and the Cardano\\n    network itself. It is thus essential to make contributions to the project\\n    possible and ultimately it should be easy to become a contributor.\\n  + **How to measure?** Number of contributors on GitHub\\n  + **Next steps:**\\n    - Open up monthly reviews\\n    - Add tutorials to the website\\n    - Publish and maintain a use-case-centric roadmap and feature map\\n\\n## Conclusion\\n\\nThis monthly review was the first public one with not only stakeholders from IOG\\nand the CF, but also collaborators of the latest projects. This was the first\\nstep to a more open and transparent development process.\\n\\nThe teams showed some classic demos \u2013 like the \u2018hydraw\u2019 application which has\\nbeen running on the same Hydra Head for four weeks now \u2013 and some new\\ndevelopments on the Hydra explorer and minor improvements to hydra-node API and\\nTUI.\\n\\nIt was very interesting to bring various teams together to exchange ideas and\\nthoughts on the individual roadmaps for the new year. The teams also shared the\\nrelevant themes and objectives of the Hydra project for 2023 (as also listed\\nabove). They will now make sure to reflect these steps into this concrete\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21) such that it will\\ncontain [marketable features](https://www.agilealliance.org/glossary/mmf/)\\nbringing us closer to these goals."},{"id":"2022-12","metadata":{"permalink":"/head-protocol/fr/monthly/2022-12","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2022-12-monthly.md","source":"@site/monthly/2022-12-monthly.md","title":"December 2022","description":"This report summarizes the work on Hydra since November 2022 and also serves as","date":"2023-01-09T08:43:30.000Z","formattedDate":"9 janvier 2023","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":4,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"December 2022","slug":"2022-12","authors":"ch1bo","tags":["monthly"]},"prevItem":{"title":"January 2023","permalink":"/head-protocol/fr/monthly/2023-01"},"nextItem":{"title":"November 2022","permalink":"/head-protocol/fr/monthly/2022-11"}},"content":"This report summarizes the work on Hydra since November 2022 and also serves as\\na preparation & write-up of the monthly review meeting, in which we update major\\nstakeholders of the project on recent developments and gather their feedback on\\nour proposed plan forward each month.\\n\\n## Roadmap\\n\\nLooking at our [roadmap](https://github.com/orgs/input-output-hk/projects/21) we\\ncan report the following updates:\\n\\n#### Notable changes\\n\\n- Completed [Validate coordinated head protocol against formal model #194 ](https://github.com/input-output-hk/hydra/issues/194) \\n- Detailed a follow-up [Validate soundness with Model Based Testing #656](https://github.com/input-output-hk/hydra/issues/656)\\n- Focus on specification and gap-closing to support audit\\n- Scoped down 0.9.0 to be only about script updates and moved [Commit from external wallet #215](https://github.com/input-output-hk/hydra/issues/215) into next version\\n- Groomed [React to mainchain protocol changes #195](https://github.com/input-output-hk/hydra/issues/195)\\n- More users requesting [Support timed transactions #196](https://github.com/input-output-hk/hydra/issues/196)\\n  \\n![](./img/2022-12-roadmap.png)\\n<small><center>\\nLatest roadmap with drafted 0.10.0 version.\\n</center></small>\\n\\n## Development\\n\\n[Issues closed since last report](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2022-11-30..2022-12-31)\\n\\nThis month we have been working on:\\n\\n- **Fixed `AcquirePointTooOld` errors** by changing the way the internal wallet\\n  initializes its state\\n  [#621](https://github.com/input-output-hk/hydra/pull/621). See the PR\\n  description for details. This did not strictly happen this month, but we have\\n  not mentioned it last time. \\n\\n- **Closed first gap in Head Contract**: We collected gaps between specification\\n  and current implementation in\\n  [#452](https://github.com/input-output-hk/hydra/issues/452) and started now\\n  closing them. This first issue, was to prevent DoS / stalling of heads, by\\n  bounding the lower and upper transaction validity time of the `close`\\n  transaction. As always, time handling is hard and this required detailed\\n  discussion in the form of an ADR. See\\n  [ADR21](https://hydra.family/head-protocol/adr/21) for more details.\\n\\n- **Reduced cost of commits** by at least **30%** using reference scripts also\\n  in the `commit` transaction. We only used reference scripts in `abort` so far.\\n  This reduces the min ADA cost of `commit` because the transactions are roughly\\n  5.2KB smaller.\\n\\n  Before:\\n  ![](./img/2022-12-commit.png)\\n\\n  After:\\n  ![](./img/2022-12-commit-new.png)\\n  \\n- **Use nix flakes & build docker images using nix**: Triggered by a migration\\n  to Cicero for a nix-based CI, we started using nix flakes for `nix build` and\\n  `nix develop` instead of the legacy `nix-shell` in\\n  [#646](https://github.com/input-output-hk/hydra/pull/646). While we ended up\\n  sticking with Github Actions as the only CI and a Cachix cache, we extended\\n  this work to build our docker images more efficiently using `nix` in\\n  [#654](https://github.com/input-output-hk/hydra/pull/654).\\n\\n  Image sizes went down between 20-50%:\\n\\n  ![](./img/2022-12-docker-images.png)\\n  \\n  While docker CI builds on `master` went down to 1-10min (from 10-30m+)!\\n\\n## Hydra V1 Specification\\n\\nFinally, we bit the bullet and started a write-up of the specification. Over the\\nlast couple of months we had worked with marked up versions (see below) of the\\noriginal paper and a GDoc to discuss and review the protocol as it was\\nimplemented.\\n\\n\\n![](./img/2022-12-marked-up-paper.png)\\n  \\nAs we also updated the security properties and proofs, we started aggregating a\\nLaTeX document on overleaf. While it holds a similar background and\\npreliminaries as the original paper, it only specifies a single version of the\\nprotocol with no variants, less modularization, as well as explicit assumptions\\nand important notes for implementors.\\n  \\n![](./img/2022-12-spec-overleaf.png)\\n\\nWe aim to be publishing the spec as part of the main [hydra repository](https://github.com/input-output-hk/hydra) soon.\\n\\n## Community\\n\\n- **Hydra for Payments project** completed the first phase of this work stream\\n  by tagging version [0.1.0](https://github.com/obsidiansystems/hydra-pay/releases/tag/v0.1.0).\\n  This open source project conducted by Obsidian Systems and sponsored by IOG\\n  created a great starting point for developers to build services/APIs of\\n  payment channels using Hydra Head. This month we reviewed the improved\\n  documentation and are looking forward to see this work applied to eventually\\n  build fast & cheap payments for light-wallet users and power payment channel\\n  use cases from business-to-business (B2B) in the short-term.\\n\\n- **Hydra for Voting project** kicked off this joint project between IOG\\n  Research, Catalyst & Hydra Tribes, and the Cardano Foundation. The goal is to\\n  assess suitability of Hydra Head to support voting use cases by implementing\\n  parts of Catalyst voting system on Hydra Head and benchmark execution at\\n  scale. The kick-off meeting took place on December 15.\\n    \\n- **Blog post by CF**: To round off the year, Matthias wrote a nice\\n  [retrospective blog\\n  post](https://cardanofoundation.org/en/news/hydra-head-protocol-an-open-source-solution-for-scalability/)\\n  about Hydra at the CF. Besides summarizing our progress made in 2022 it also\\n  gives an outlook where Hydra is headed for in 2023.\\n\\n## Conclusion\\n\\nAlthough Hydra is in essence an open source project right now, we would love to\\nmake it \\"even more open source\\" in the coming months. Our vision of Hydra\\nrequires to have the builders of the Cardano ecosystem to be part of this\\njourney. For that matter, we want not only to open up these monthly reports, but\\nthe review meeting backing it as well!\\n\\nThis, besides our engagements with the community above, will allow the project\\nto grow beyond IOG & CF contributions. To become the true Cardano open source\\nproject we believe will be worthy to serve as the scalability component required\\nby the Cardano network."},{"id":"2022-11","metadata":{"permalink":"/head-protocol/fr/monthly/2022-11","editUrl":"https://github.com/input-output-hk/hydra/tree/master/docs/monthly/2022-11-monthly.md","source":"@site/monthly/2022-11-monthly.md","title":"November 2022","description":"Introduction","date":"2022-12-05T09:19:28.000Z","formattedDate":"5 d\xe9cembre 2022","tags":[{"label":"monthly","permalink":"/head-protocol/fr/monthly/tags/monthly"}],"readingTime":8.5,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead - Hydra @ IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"November 2022","slug":"2022-11","authors":"ch1bo","tags":["monthly"]},"prevItem":{"title":"December 2022","permalink":"/head-protocol/fr/monthly/2022-12"}},"content":"## Introduction\\n\\nThis report summarizes the activities of the Hydra team since October 2022 and also serves as a preparation & write-up of the monthly review meeting, in which we update major stakeholders of the project on recent developments and gather their feedback on our proposed plan forward each month.\\n\\n## Roadmap update\\n\\nLooking at our [roadmap](https://github.com/orgs/input-output-hk/projects/21) we can report the following releases and updates:\\n\\n#### Release `0.8.0`\\n\\n- Long overdue feature release adding persistence to the hydra-node\\n- Backup & restore the state of a Hydra Head [#187](https://github.com/input-output-hk/hydra/issues/187)\\n- Improve user experience following hydraw experiment [#518](https://github.com/input-output-hk/hydra/issues/518) from being only a discussion to a (to-be-groomed & planned) feature\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.8.0)\\n\\n#### Release `0.8.1`\\n\\n- Follow-up release addressing user feedback on persistence from `0.8.0`\\n- Allow clients to see latest state after restart [#580](https://github.com/input-output-hk/hydra/issues/580)\\n- Bug fixes of following chain state [#599](https://github.com/input-output-hk/hydra/issues/599)\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.8.1)\\n\\n#### Notable changes\\n\\n- Impact mapping from workshop (see below) and reviewing the starmap above had us discuss whether the scope for `1.0.0` is correct or not\\n- Need to be conscious of scope creep vs. getting something audited\\n- Focus on getting the spec done, `0.9.0` tagged and an audit under way now \u2192 minor re-ordering in priorities\\n- Iterative releases afterwards still - even while getting audited, non-contract changes first\\n- Promoted [https://github.com/input-output-hk/hydra/issues/635](https://github.com/input-output-hk/hydra/issues/635) from being only a discussion to a (to-be-groomed & planned) feature\\n\\n![](./img/2022-11-roadmap.png)\\n<small><center>\\nLatest roadmap with 0.8.0 and 0.8.1 already released and slight re-ordering on 0.9.0\\n\\n</center></small>\\n\\n## Development\\n\\nIssues closed since last report: [Issues - input-output-hk/hydra](https://github.com/input-output-hk/hydra/issues?page=1&q=is%3Aclosed+sort%3Aupdated-desc+closed%3A%3E%3D2022-10-19)\\n\\nBesides the things in the releases above (see roadmap update), we have\\nbeen working on:\\n\\n- **Flaky TUI CI tests:** We have sunk quite some time again in\\n  investigating cryptic CI failures in our TUI end-to-end tests. They\\n  have been crashing abruptly without any information and thus\\n  hard-to-debug. This investigation was unsuccessful and we realized\\n  at some point that the TUI tests are not that important anyways - we\\n  have API-level end-to-end tests. So we disabled these tests for now.\\n\\n- **Published** `hydra-cardano-api` **to CHaP:** With the Cardano\\n  Haskell Packages (CHaP) becoming available now and wanting to be a\\n  good citizen, we pushed for getting our flavor of the `cardano-api`\\n  also published there. This is non-trivial though, as we are at an\\n  integration point even \\"further up\\" than the `cardano-node`\\n  [#504](https://github.com/input-output-hk/hydra/issues/504)\\n\\n- **Implemented ADR18:** While the first stints on persistence already\\n  make it possible to restart `hydra-node` without needing to close a\\n  Head, we have implemented this in a nicer way now only keeping a\\n  single state (ground truth) for both L2 and L1 information\\n  [#541](https://github.com/input-output-hk/hydra/issues/541) of the Head protocol and the specification, we kept\\n  discovering bigger and bigger issues and hence realized the need for\\n  a discussion on transaction validity in context of closing /\\n  contesting Heads. [#615](#615)\\n\\n## Formal verification & specification\\n\\nAn important part of the project right now is the formalization and\\naudit preparation:\\n\\n- **Internal audit** has started with involvement of two persons from IOG IT\\n  team, each one addressing different part of Hydra:\\n\\n  - One auditor is working on the project as a whole, targeting\\n    potential vulnerabilities with the off-chain code, the\\n    infrastructure, dependencies, etc. This has not lead to any\\n    significant issue nor action plan so far.\\n  - Another auditor is specifically targeting the formal\\n    specification and the on-chain code to identify vulnerabilities\\n    in the protocol itself.\\n\\n- Discussions with researchers have led to the development of a joint Coordinated Hydra Head V1 specification defining formally the protocol as it is actually implemented.\\n\\n  - Work on this document has already allowed us to identify gaps\\n  - It is the basis on which BCryptic\'s analyst is working to audit Hydra protocol\\n  - It allows us to make explicit a lot of implicit assumptions that are in the code but not in the original paper and \\"Shape\\" the language used to describe the protocol\\n\\n- We have drafted an RFP for submission to **external** auditors\\n  [https://github.com/input-output-hk/hydra/blob/audit/rfp/security/RFP.md](https://github.com/input-output-hk/hydra/blob/audit/rfp/security/RFP.md) defining the scope and targets of the audit\\n\\n- We are still unsure about whether our **approach** is the right one as having a \\"formal specification\\" in a manually checked document spanning a dozen pages seems quite brittle.\\n\\n  - Some progress has been made on \\"formalizing\\" properties to be automatically \\"QuickChecked\\" using an executable model of the expected behavior of the system but this approach seems more suited for \\"team-internal consumption\\", e.g. building confidence within the core committers and contributors\\n\\n  - Ideally, we would want a proper formalization of the protocol, using an existing theorem proving/model checking framework, through which properties could be asserted. Quite a lot of work has already been done in blockchain space, including some work on Lightning and TLA+ or some other state-machine/temporal logic based language appear promising:\\n\\n    - [https://www.youtube.com/watch?v=wecVT_4QDcU](https://www.youtube.com/watch?v=wecVT_4QDcU)\\n    - [https://github.com/rberenguel/tla_lightning](https://github.com/rberenguel/tla_lightning)\\n    - [https://www.amazon.com/Practical-TLA-Planning-Driven-Development/dp/1484238281](https://www.amazon.com/Practical-TLA-Planning-Driven-Development/dp/1484238281)\\n\\n  - This effort should be done in accordance to the DApps certification process\\n\\n## Product\\n\\nMost updates on the product side of things have been addressed in the\\nstarmap update above.\\n\\n- **Hydra for Payments lighthouse project**: Latest demonstration\\n  shown by Obsidian Systems on how to use payment channels in a \\"light\\n  way\\" from a web frontend. The API evolved and we were able to use\\n  the `preview` testnet now. The project is progressing very nicely\\n  and we are optimistic to close it successfully soon with improved\\n  documentation and usability.\\n\\n- **NFT auctions lighthouse project:** After doing surveys and\\n  interviews, MLabs is currently concluding the discovery phase with a\\n  light / white paper on how NFT auctions could be implemented using\\n  Hydra (today or in the future with more features).\\n\\n- **Drafting Voting on Hydra project**: Work has started on building a\\n  Proof-of-concept for voting on Hydra targeting Catalyst\u2019s use case but with an eye towards building a generic solution suitable for large scale voting systems based on Hydra Head\\n\\n  This development should be undertaken jointly with the Cardano Foundation and SundaeSwap who are also interested in building such a system and recently demonstrated their capacity of doing voting via the Cardano Summit voting system.\\n\\n- **TxPipe demonstrated integration with demeter.run:** Without our\\n  help nor even knowing of this effort, TxPipe has recently shown an\\n  early prototype of `hydra-node`s instrumented via their\\n  [demeter.run](https://demeter.run) platform. This has come a bit as a surprise and is exactly why we love open source :heart: \u2192 [Video](https://www.loom.com/share/c811360e60084f18ab9e9f16cc941432)\\n\\n## Team & open source\\n\\nSome notable developments this month have been:\\n\\n- **Renamed the repository:** from **hydra-poc** to\\n  [**hydra**](https://github.com/input-output-hk/hydra)! This was revealed in the summit presentation (see below) and should indicate that the project is not only a Proof of Concept (POC) anymore, but has become more - as also demonstrated by the various early adopters and demos lately. :dragon_face:\\n\\n- **Inner source (IOG) contribution:** The education team has been working on a Hydra Tutorial and we have been involved in reviewing and trying it out. This is a great effort and will help people get started with Hydra. Thanks folks :green_heart:\\n\\n## Cardano Summit & workshop\\n\\nThis month there was also the Cardano Summit, this time organized by the\\nCardano Foundation and the content was even voted on by the community!\\nWe have been both, invited and nominated as panelist and speakers and\\nthis makes us extremely proud! In general, the reception of Hydra seems\\nto be very positive in the community from what we could experience first\\nhand on the summit.\\n\\nAgenda items we participated in:\\n\\n- [Best of blockchain, best of open source - Open Source panel ](https://summit.cardano.org/agenda-day-1/best-of-blockchain-best-of-open-source/) with IOG, CF & TxPipe\\n\\n- [Cardano Ballot Speaker Winner: Dev Team](https://summit.cardano.org/agenda-day-2/cardano-ballot-speaker-winner-presentation-6/) Introduction to Hydra and\\n  reveal of the repository rename \ud83c\udf89\\n\\nAfter attending the summit, we also used the fact that the whole team is\\nin one location for a team workshop. We booked a coworking space and\\nspent 3 days together. Not much coding & hacking this time, but we are\\nhappy to have produced these results:\\n\\n- **Timeline / year in review:** As we had new team members with us,\\n  the request was to give a recap of how the Hydra project evolved\\n  over the last two years. The whole timeline can bee seen below, and\\n  this also sparked the idea of creating a \\"Year in review\\" blog post,\\n  which is currently in preparation.\\n\\n- **Retrospective**: In-person workshops are the perfect place for\\n  doing retrospectives to reflect on what was good, bad and collecting\\n  ideas & actions in how to improve our work environment and\\n  processes.\\n\\n  ![](./img/2022-11-retro.png)\\n  <small><center>\\n  Retrospective board from 2022-11-22\\n  </center></small>\\n\\n- **Impact map:** Conscious about the fact that the project got defined about one year ago in a first project plan, and inspired by timeline and (short-term) ideas, we also set off to reflect on the **Why**, **How** and **What** of this project.\\n\\n  After reviewing the project vision, we reached for the tool of our choice to ideate on tangible objectives / deliverables - impact maps! Also, we felt the need to use a different goal this time. One that is reflecting more closely (or, in fact, broadly) what our current mission is. So instead of the **% of Cardano transactions are done on L2**, we set a new goal: being the **number one DApp on Cardano** (by all known metrics: TVL, traffic, volume etc..) Fundamentally, both goals illustrate the same idea, but the latter better supports the narrative that Hydra is also just a DApp (not a network upgrade) and needs usage & adoption to reach our vision.\\n\\n  Below you see the result of our session. We checked back to the old impact map after creating this one, and many things are still relevant / similar on the new sample (it\'s never complete!) - some of the deliverables we even achieved.\\n\\n  ![](./img/2022-11-impact.png)\\n  <small><center>\\n  Impact map with new goal\\n  </center></small>\\n\\n# Conclusion\\n\\nReflecting on our original plans (about a year ago) and our current roadmap we can say we are behind our anticipated schedule. However, recent developments on the lighthouse projects and community members contributing & using Hydra are convincing us that we are on the right track. The summit paints a similar picture and we feel reinvigorated by the great people we met, discussions we had and relationships we created & solidified on the summit and during our Hydra workshop."}]}')}}]);