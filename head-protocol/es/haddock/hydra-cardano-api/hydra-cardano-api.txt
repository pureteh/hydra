-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A Haskell API for Cardano, tailored to the Hydra project.
--   
--   A Haskell API for Cardano, tailored to the Hydra project.
@package hydra-cardano-api
@version 0.11.0


-- | NOTE (1): This module is meant to be imported qualified as
--   <a>UTxO</a>.
--   
--   NOTE (2): This module is name-spaces slightly different from the rest
--   because it is meant to be used as a replacement of the UTxO type of
--   the cardano-api which is not convenient enough to work with. Having it
--   as <a>UTxO</a> causes cyclic imports with other modules also relying
--   on this newtype. So instead, we do 'as if' it was part of the
--   cardano-api in the first palce.
module Cardano.Api.UTxO
type Era = BabbageEra
type UTxO = UTxO' (TxOut CtxUTxO Era)

-- | Newtype with phantom types mostly required to work around the poor
--   interface of <a>UTXO</a> and provide <a>Monoid</a> and <a>Foldable</a>
--   instances to make utxo manipulation bareable.
newtype UTxO' out
UTxO :: Map TxIn out -> UTxO' out
[toMap] :: UTxO' out -> Map TxIn out

-- | Create a <a>UTxO</a> from a list of <a>TxIn</a> and <tt>out</tt>
--   pairs.
fromPairs :: [(TxIn, out)] -> UTxO' out

-- | Create a <a>UTxO</a> from a single unspent transaction output.
singleton :: (TxIn, out) -> UTxO' out

-- | Find an <tt>out</tt> for a given <a>TxIn</a>.
resolve :: TxIn -> UTxO' out -> Maybe out

-- | Turn a <a>UTxO</a> into a list of pairs.
pairs :: UTxO' out -> [(TxIn, out)]

-- | Find first <a>UTxO</a> which satisfies given predicate.
find :: (out -> Bool) -> UTxO' out -> Maybe (TxIn, out)

-- | Filter UTxO to only include <tt>out</tt>s satisfying given predicate.
filter :: (out -> Bool) -> UTxO' out -> UTxO' out

-- | Get the <a>UTxO</a> domain input's set
inputSet :: UTxO' out -> Set TxIn

-- | Get a human-readable pretty text representation of a UTxO.
render :: (TxIn, TxOut ctx era) -> Text

-- | Select the minimum (by TxIn) utxo entry from the UTxO map.
--   
--   This function is partial.
min :: UTxO -> UTxO
fromApi :: UTxO Era -> UTxO
toApi :: UTxO -> UTxO Era
instance Data.Aeson.Types.FromJSON.FromJSON out => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Api.UTxO.UTxO' out)
instance Data.Aeson.Types.ToJSON.ToJSON out => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Api.UTxO.UTxO' out)
instance GHC.Base.Monoid (Cardano.Api.UTxO.UTxO' out)
instance GHC.Base.Semigroup (Cardano.Api.UTxO.UTxO' out)
instance Data.Foldable.Foldable Cardano.Api.UTxO.UTxO'
instance GHC.Base.Functor Cardano.Api.UTxO.UTxO'
instance GHC.Show.Show out => GHC.Show.Show (Cardano.Api.UTxO.UTxO' out)
instance GHC.Classes.Eq out => GHC.Classes.Eq (Cardano.Api.UTxO.UTxO' out)
instance Data.Traversable.Traversable Cardano.Api.UTxO.UTxO'

module Hydra.Cardano.Api.Network
data Network
Testnet :: Network
Mainnet :: Network
networkIdToNetwork :: NetworkId -> Network

module Hydra.Cardano.Api.Prelude
anyAddressInEra :: CardanoEra era -> AddressAny -> Either String (AddressInEra era)
anyAddressInShelleyBasedEra :: IsShelleyBasedEra era => AddressAny -> AddressInEra era
byronAddressInEra :: Address ByronAddr -> AddressInEra era
isKeyAddress :: AddressInEra era -> Bool
lexPlausibleAddressString :: Parser Text
makeByronAddress :: NetworkId -> VerificationKey ByronKey -> Address ByronAddr
makeByronAddressInEra :: NetworkId -> VerificationKey ByronKey -> AddressInEra era
makeShelleyAddress :: NetworkId -> PaymentCredential -> StakeAddressReference -> Address ShelleyAddr
makeShelleyAddressInEra :: IsShelleyBasedEra era => NetworkId -> PaymentCredential -> StakeAddressReference -> AddressInEra era
makeStakeAddress :: NetworkId -> StakeCredential -> StakeAddress
parseAddressAny :: Parser AddressAny
shelleyAddressInEra :: IsShelleyBasedEra era => Address ShelleyAddr -> AddressInEra era
stakeAddressCredential :: StakeAddress -> StakeCredential
toAddressAny :: Address addr -> AddressAny
chainPointToHeaderHash :: ChainPoint -> Maybe (Hash BlockHeader)
chainPointToSlotNo :: ChainPoint -> Maybe SlotNo
chainTipToChainPoint :: ChainTip -> ChainPoint
getBlockHeader :: Block era -> BlockHeader
makeChainTip :: WithOrigin BlockNo -> ChainPoint -> ChainTip
makeGenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
makeMIRCertificate :: MIRPot -> MIRTarget -> Certificate
makeStakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
makeStakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
makeStakeAddressRegistrationCertificate :: StakeCredential -> Certificate
makeStakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
makeStakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
getIsCardanoEraConstraint :: CardanoEra era -> (IsCardanoEra era => a) -> a
constructBalancedTx :: IsShelleyBasedEra era => TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> UTxO era -> ProtocolParameters -> LedgerEpochInfo -> SystemStart -> Set PoolId -> [ShelleyWitnessSigningKey] -> Either TxBodyErrorAutoBalance (Tx era)
notScriptLockedTxIns :: [TxIn] -> UTxO era -> Either ScriptLockedTxInsError ()
renderNotScriptLockedTxInsError :: ScriptLockedTxInsError -> Text
renderTxInsExistError :: TxInsExistError -> Text
txInsExistInUTxO :: [TxIn] -> UTxO era -> Either TxInsExistError ()
determineEra :: ConsensusModeParams mode -> LocalNodeConnectInfo mode -> IO (Either AcquiringFailure AnyCardanoEra)
executeQueryCardanoMode :: CardanoEra era -> NetworkId -> QueryInMode CardanoMode (Either EraMismatch result) -> IO (Either QueryConvenienceError result)
queryStateForBalancedTx :: CardanoEra era -> NetworkId -> [TxIn] -> IO (Either QueryConvenienceError (UTxO era, ProtocolParameters, EraHistory CardanoMode, SystemStart, Set PoolId))
renderQueryConvenienceError :: QueryConvenienceError -> Text
deserialiseAnyVerificationKey :: ByteString -> Either InputDecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyBech32 :: ByteString -> Either Bech32DecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyTextEnvelope :: ByteString -> Either TextEnvelopeError SomeAddressVerificationKey
deserialiseInput :: AsType a -> NonEmpty (InputFormat a) -> ByteString -> Either InputDecodeError a
deserialiseInputAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> ByteString -> Either InputDecodeError b
renderInputDecodeError :: InputDecodeError -> Text
renderSomeAddressVerificationKey :: SomeAddressVerificationKey -> Text
readEnvSocketPath :: IO (Either EnvSocketError SocketPath)
renderEnvSocketError :: EnvSocketError -> Text
anyCardanoEra :: CardanoEra era -> AnyCardanoEra
cardanoEraStyle :: CardanoEra era -> CardanoEraStyle era
shelleyBasedToCardanoEra :: ShelleyBasedEra era -> CardanoEra era
throwErrorAsException :: Error e => e -> IO a
calculateMinimumUTxO :: ShelleyBasedEra era -> TxOut CtxTx era -> BundledProtocolParameters era -> Either MinimumUTxOError Lovelace
estimateTransactionFee :: IsShelleyBasedEra era => NetworkId -> Natural -> Natural -> Tx era -> Int -> Int -> Int -> Int -> Lovelace
estimateTransactionKeyWitnessCount :: TxBodyContent BuildTx era -> Word
evaluateTransactionBalance :: IsShelleyBasedEra era => BundledProtocolParameters era -> Set PoolId -> UTxO era -> TxBody era -> TxOutValue era
evaluateTransactionExecutionUnits :: SystemStart -> LedgerEpochInfo -> BundledProtocolParameters era -> UTxO era -> TxBody era -> Either TransactionValidityError (Map ScriptWitnessIndex (Either ScriptExecutionError ExecutionUnits))
evaluateTransactionFee :: IsShelleyBasedEra era => BundledProtocolParameters era -> TxBody era -> Word -> Word -> Lovelace
makeTransactionBodyAutoBalance :: IsShelleyBasedEra era => SystemStart -> LedgerEpochInfo -> ProtocolParameters -> Set PoolId -> UTxO era -> TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> Either TxBodyErrorAutoBalance (BalancedTxBody era)
mapTxScriptWitnesses :: (forall witctx. () => ScriptWitnessIndex -> ScriptWitness witctx era -> Either TxBodyErrorAutoBalance (ScriptWitness witctx era)) -> TxBodyContent BuildTx era -> Either TxBodyErrorAutoBalance (TxBodyContent BuildTx era)
transactionFee :: IsShelleyBasedEra era => Natural -> Natural -> Tx era -> Lovelace
writeByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeLazyByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeTextFile :: MonadIO m => FilePath -> Text -> m (Either (FileError ()) ())
writeTextFileWithOwnerPermissions :: FilePath -> Text -> IO (Either (FileError ()) ())
writeTextOutput :: MonadIO m => Maybe FilePath -> Text -> m (Either (FileError ()) ())
connectToLocalNode :: LocalNodeConnectInfo mode -> LocalNodeClientProtocolsInMode mode -> IO ()
connectToLocalNodeWithVersion :: LocalNodeConnectInfo mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> IO ()
consensusModeOnly :: ConsensusModeParams mode -> ConsensusMode mode
getLocalChainTip :: LocalNodeConnectInfo mode -> IO ChainTip
mkLocalNodeClientParams :: ConsensusBlockForMode mode ~ block => ConsensusModeParams mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> LocalNodeClientParams
queryNodeLocalState :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> QueryInMode mode result -> IO (Either AcquiringFailure result)
queryTxMonitoringLocal :: LocalNodeConnectInfo mode -> LocalTxMonitoringQuery mode -> IO (LocalTxMonitoringResult mode)
submitTxToNodeLocal :: LocalNodeConnectInfo mode -> TxInMode mode -> IO (SubmitResult (TxValidationErrorInMode mode))
determineEraExpr :: ConsensusModeParams mode -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError AnyCardanoEra)
executeLocalStateQueryExpr :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> LocalStateQueryExpr (BlockInMode mode) ChainPoint (QueryInMode mode) () IO a -> IO (Either AcquiringFailure a)
queryExpr :: QueryInMode mode a -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError a)
generateInsecureSigningKey :: (Key keyrole, SerialiseAsRawBytes (SigningKey keyrole)) => StdGen -> AsType keyrole -> IO (SigningKey keyrole, StdGen)
generateSigningKey :: Key keyrole => AsType keyrole -> IO (SigningKey keyrole)
readKeyFile :: AsType a -> NonEmpty (InputFormat a) -> FilePath -> IO (Either (FileError InputDecodeError) a)
readKeyFileAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError InputDecodeError) b)
readKeyFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError InputDecodeError) a)
applyBlock :: Env -> LedgerState -> ValidationMode -> Block era -> Either LedgerStateError (LedgerState, [LedgerEvent])
chainSyncClientPipelinedWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClientPipelined (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClientPipelined (BlockInMode CardanoMode) ChainPoint ChainTip m a
chainSyncClientWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClient (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClient (BlockInMode CardanoMode) ChainPoint ChainTip m a
decodeLedgerState :: Decoder s LedgerState
encodeLedgerState :: LedgerState -> Encoding
envSecurityParam :: Env -> Word64
foldBlocks :: FilePath -> FilePath -> ValidationMode -> a -> (Env -> LedgerState -> [LedgerEvent] -> BlockInMode CardanoMode -> a -> IO a) -> ExceptT FoldBlocksError IO a
initialLedgerState :: FilePath -> ExceptT InitialLedgerStateError IO (Env, LedgerState)
renderFoldBlocksError :: FoldBlocksError -> Text
renderGenesisConfigError :: GenesisConfigError -> Text
renderInitialLedgerStateError :: InitialLedgerStateError -> Text
renderLedgerStateError :: LedgerStateError -> Text
renderMode :: AnyConsensusMode -> Text
toEraInMode :: CardanoEra era -> ConsensusMode mode -> Maybe (EraInMode era mode)
fromNetworkMagic :: NetworkMagic -> NetworkId
toNetworkMagic :: NetworkId -> NetworkMagic
getHotKey :: OperationalCertificate -> VerificationKey KesKey
getKesPeriod :: OperationalCertificate -> Word
getOpCertCount :: OperationalCertificate -> Word64
issueOperationalCertificate :: VerificationKey KesKey -> Either (SigningKey StakePoolKey) (SigningKey GenesisDelegateExtendedKey) -> KESPeriod -> OperationalCertificateIssueCounter -> Either OperationalCertIssueError (OperationalCertificate, OperationalCertificateIssueCounter)
bundleProtocolParams :: CardanoEra era -> ProtocolParameters -> BundledProtocolParameters era
fromLedgerPParams :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> ProtocolParameters
makePraosNonce :: ByteString -> PraosNonce
makeShelleyUpdateProposal :: ProtocolParametersUpdate -> [Hash GenesisKey] -> EpochNo -> UpdateProposal
toLedgerPParams :: ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era)
unbundleProtocolParams :: BundledProtocolParameters era -> ProtocolParameters
validateCostModel :: PlutusScriptVersion lang -> CostModel -> Either InvalidCostModel ()
getProgress :: SlotNo -> EraHistory mode -> Either PastHorizonException (RelativeTime, SlotLength)
slotToEpoch :: SlotNo -> EraHistory mode -> Either PastHorizonException (EpochNo, SlotsInEpoch, SlotsToEpochEnd)
toLedgerEpochInfo :: EraHistory mode -> LedgerEpochInfo
eraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era
eraOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ShelleyBasedEra era
examplePlutusScriptAlwaysFails :: WitCtx witctx -> PlutusScript PlutusScriptV1
examplePlutusScriptAlwaysSucceeds :: WitCtx witctx -> PlutusScript PlutusScriptV1
hashScript :: Script lang -> ScriptHash
languageOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ScriptLanguage lang
scriptWitnessScript :: ScriptWitness witctx era -> Maybe (ScriptInEra era)
toScriptInAnyLang :: Script lang -> ScriptInAnyLang
toScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)
getOriginalScriptDataBytes :: HashableScriptData -> ByteString
getScriptData :: HashableScriptData -> ScriptData
hashScriptData :: HashableScriptData -> Hash ScriptData
hashScriptDataBytes :: HashableScriptData -> Hash ScriptData
scriptDataFromJson :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonError HashableScriptData
scriptDataJsonToHashable :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonBytesError HashableScriptData
scriptDataToJson :: ScriptDataJsonSchema -> HashableScriptData -> Value
unsafeHashableScriptData :: ScriptData -> HashableScriptData
validateScriptData :: ScriptData -> Either ScriptDataRangeError ()
deserialiseAnyOfFromBech32 :: [FromSomeType SerialiseAsBech32 b] -> Text -> Either Bech32DecodeError b
deserialiseFromBech32 :: SerialiseAsBech32 a => AsType a -> Text -> Either Bech32DecodeError a
serialiseToBech32 :: SerialiseAsBech32 a => a -> Text
deserialiseFromJSON :: FromJSON a => AsType a -> ByteString -> Either JsonDecodeError a
prettyPrintJSON :: ToJSON a => a -> ByteString
readFileJSON :: FromJSON a => AsType a -> FilePath -> IO (Either (FileError JsonDecodeError) a)
serialiseToJSON :: ToJSON a => a -> ByteString
writeFileJSON :: ToJSON a => FilePath -> a -> IO (Either (FileError ()) ())
deserialiseFromTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> TextEnvelopeCddl -> Either TextEnvelopeCddlError b
deserialiseTxLedgerCddl :: IsCardanoEra era => CardanoEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (Tx era)
deserialiseWitnessLedgerCddl :: ShelleyBasedEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (KeyWitness era)
readFileTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> FilePath -> IO (Either (FileError TextEnvelopeCddlError) b)
serialiseTxLedgerCddl :: IsCardanoEra era => Tx era -> TextEnvelopeCddl
serialiseWitnessLedgerCddl :: ShelleyBasedEra era -> KeyWitness era -> TextEnvelopeCddl
writeTxFileTextEnvelopeCddl :: IsCardanoEra era => FilePath -> Tx era -> IO (Either (FileError ()) ())
writeTxWitnessFileTextEnvelopeCddl :: ShelleyBasedEra era -> FilePath -> KeyWitness era -> IO (Either (FileError ()) ())
deserialiseFromRawBytesHex :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either RawBytesHexError a
eitherDeserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
serialiseToRawBytesHex :: SerialiseAsRawBytes a => a -> ByteString
serialiseToRawBytesHexText :: SerialiseAsRawBytes a => a -> Text
deserialiseFromTextEnvelope :: HasTextEnvelope a => AsType a -> TextEnvelope -> Either TextEnvelopeError a
deserialiseFromTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> TextEnvelope -> Either TextEnvelopeError b
readFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError TextEnvelopeError) a)
readFileTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError TextEnvelopeError) b)
readTextEnvelopeFromFile :: FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
readTextEnvelopeOfTypeFromFile :: TextEnvelopeType -> FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
serialiseToTextEnvelope :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> TextEnvelope
textEnvelopeRawCBOR :: TextEnvelope -> ByteString
textEnvelopeToJSON :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> ByteString
writeFileTextEnvelope :: HasTextEnvelope a => FilePath -> Maybe TextEnvelopeDescr -> a -> IO (Either (FileError ()) ())
validateAndHashStakePoolMetadata :: ByteString -> Either StakePoolMetadataValidationError (StakePoolMetadata, Hash StakePoolMetadata)
getTxBody :: Tx era -> TxBody era
getTxWitnesses :: Tx era -> [KeyWitness era]
makeByronKeyWitness :: IsByronKey key => NetworkId -> TxBody ByronEra -> SigningKey key -> KeyWitness ByronEra
makeShelleyBootstrapWitness :: IsShelleyBasedEra era => WitnessNetworkIdOrByronAddress -> TxBody era -> SigningKey ByronKey -> KeyWitness era
makeShelleyKeyWitness :: IsShelleyBasedEra era => TxBody era -> ShelleyWitnessSigningKey -> KeyWitness era
makeSignedTransaction :: [KeyWitness era] -> TxBody era -> Tx era
signByronTransaction :: NetworkId -> TxBody ByronEra -> [SigningKey ByronKey] -> Tx ByronEra
signShelleyTransaction :: IsShelleyBasedEra era => TxBody era -> [ShelleyWitnessSigningKey] -> Tx era
addTxIn :: (TxIn, BuildTxWith build (Witness WitCtxTxIn era)) -> TxBodyContent build era -> TxBodyContent build era
addTxOut :: TxOut CtxTx era -> TxBodyContent build era -> TxBodyContent build era
auxScriptsSupportedInEra :: CardanoEra era -> Maybe (AuxScriptsSupportedInEra era)
certificatesSupportedInEra :: CardanoEra era -> Maybe (CertificatesSupportedInEra era)
collateralSupportedInEra :: CardanoEra era -> Maybe (CollateralSupportedInEra era)
collectTxBodyScriptWitnesses :: TxBodyContent BuildTx era -> [(ScriptWitnessIndex, AnyScriptWitness era)]
createAndValidateTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
defaultTxBodyContent :: IsCardanoEra era => TxBodyContent BuildTx era
defaultTxFee :: IsCardanoEra era => TxFee era
defaultTxValidityUpperBound :: IsCardanoEra era => TxValidityUpperBound era
extraKeyWitnessesSupportedInEra :: CardanoEra era -> Maybe (TxExtraKeyWitnessesSupportedInEra era)
fromLedgerTxOuts :: ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxBodyScriptData era -> [TxOut CtxTx era]
genesisUTxOPseudoTxIn :: NetworkId -> Hash GenesisUTxOKey -> TxIn
getTxId :: TxBody era -> TxId
lovelaceToTxOutValue :: IsCardanoEra era => Lovelace -> TxOutValue era
makeTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
modTxIns :: (TxIns build era -> TxIns build era) -> TxBodyContent build era -> TxBodyContent build era
modTxOuts :: ([TxOut CtxTx era] -> [TxOut CtxTx era]) -> TxBodyContent build era -> TxBodyContent build era
parseHash :: SerialiseAsRawBytes (Hash a) => AsType (Hash a) -> Parser (Hash a)
renderScriptWitnessIndex :: ScriptWitnessIndex -> String
scriptValidityToTxScriptValidity :: ShelleyBasedEra era -> ScriptValidity -> TxScriptValidity era
setTxAuxScripts :: TxAuxScripts era -> TxBodyContent build era -> TxBodyContent build era
setTxCertificates :: TxCertificates build era -> TxBodyContent build era -> TxBodyContent build era
setTxExtraKeyWits :: TxExtraKeyWitnesses era -> TxBodyContent build era -> TxBodyContent build era
setTxFee :: TxFee era -> TxBodyContent build era -> TxBodyContent build era
setTxIns :: TxIns build era -> TxBodyContent build era -> TxBodyContent build era
setTxInsCollateral :: TxInsCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxInsReference :: TxInsReference build era -> TxBodyContent build era -> TxBodyContent build era
setTxMetadata :: TxMetadataInEra era -> TxBodyContent build era -> TxBodyContent build era
setTxMintValue :: TxMintValue build era -> TxBodyContent build era -> TxBodyContent build era
setTxOuts :: [TxOut CtxTx era] -> TxBodyContent build era -> TxBodyContent build era
setTxProtocolParams :: BuildTxWith build (Maybe ProtocolParameters) -> TxBodyContent build era -> TxBodyContent build era
setTxReturnCollateral :: TxReturnCollateral CtxTx era -> TxBodyContent build era -> TxBodyContent build era
setTxScriptValidity :: TxScriptValidity era -> TxBodyContent build era -> TxBodyContent build era
setTxTotalCollateral :: TxTotalCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxUpdateProposal :: TxUpdateProposal era -> TxBodyContent build era -> TxBodyContent build era
setTxValidityRange :: (TxValidityLowerBound era, TxValidityUpperBound era) -> TxBodyContent build era -> TxBodyContent build era
setTxWithdrawals :: TxWithdrawals build era -> TxBodyContent build era -> TxBodyContent build era
toCtxUTxOTxOut :: TxOut CtxTx era -> TxOut CtxUTxO era
totalAndReturnCollateralSupportedInEra :: CardanoEra era -> Maybe (TxTotalAndReturnCollateralSupportedInEra era)
txFeesExplicitInEra :: CardanoEra era -> Either (TxFeesImplicitInEra era) (TxFeesExplicitInEra era)
txMetadataSupportedInEra :: CardanoEra era -> Maybe (TxMetadataSupportedInEra era)
txOutValueToLovelace :: TxOutValue era -> Lovelace
txOutValueToValue :: TxOutValue era -> Value
txScriptValiditySupportedInCardanoEra :: CardanoEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValiditySupportedInShelleyBasedEra :: ShelleyBasedEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValidityToScriptValidity :: TxScriptValidity era -> ScriptValidity
updateProposalSupportedInEra :: CardanoEra era -> Maybe (UpdateProposalSupportedInEra era)
validityLowerBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityLowerBoundSupportedInEra era)
validityNoUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityNoUpperBoundSupportedInEra era)
validityUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityUpperBoundSupportedInEra era)
withdrawalsSupportedInEra :: CardanoEra era -> Maybe (WithdrawalsSupportedInEra era)
renderTxIn :: TxIn -> Text
makeTransactionMetadata :: Map Word64 TxMetadataValue -> TxMetadata
metadataFromJson :: TxMetadataJsonSchema -> Value -> Either TxMetadataJsonError TxMetadata
metadataToJson :: TxMetadataJsonSchema -> TxMetadata -> Value
metadataValueToJsonNoSchema :: TxMetadataValue -> Value
validateTxMetadata :: TxMetadata -> Either [(Word64, TxMetadataRangeError)] ()
bounded :: (Bounded a, Integral a, Show a) => String -> ReadM a
parseFilePath :: String -> String -> Parser FilePath
renderEra :: AnyCardanoEra -> Text
runParsecParser :: Parser a -> Text -> Parser a
textShow :: Show a => a -> Text
writeSecrets :: FilePath -> [Char] -> [Char] -> (a -> ByteString) -> [a] -> IO ()
filterValue :: (AssetId -> Bool) -> Value -> Value
lovelaceToQuantity :: Lovelace -> Quantity
lovelaceToValue :: Lovelace -> Value
negateValue :: Value -> Value
quantityToLovelace :: Quantity -> Lovelace
renderValue :: Value -> Text
renderValuePretty :: Value -> Text
scriptPolicyId :: Script lang -> PolicyId
selectAsset :: Value -> AssetId -> Quantity
selectLovelace :: Value -> Lovelace
valueFromList :: [(AssetId, Quantity)] -> Value
valueFromNestedRep :: ValueNestedRep -> Value
valueToList :: Value -> [(AssetId, Quantity)]
valueToLovelace :: Value -> Maybe Lovelace
valueToNestedRep :: Value -> ValueNestedRep
parseValue :: Parser Value
policyId :: Parser PolicyId
class FromJSON a
class ToJSON a
data Address addrtype
data AddressAny
AddressByron :: !Address ByronAddr -> AddressAny
AddressShelley :: !Address ShelleyAddr -> AddressAny
data AddressInEra era
[AddressInEra] :: forall addrtype era. AddressTypeInEra addrtype era -> Address addrtype -> AddressInEra era
data AddressTypeInEra addrtype era
[ByronAddressInAnyEra] :: forall era. AddressTypeInEra ByronAddr era
[ShelleyAddressInEra] :: forall era. ShelleyBasedEra era -> AddressTypeInEra ShelleyAddr era
data ByronAddr
data PaymentCredential
PaymentCredentialByKey :: Hash PaymentKey -> PaymentCredential
PaymentCredentialByScript :: ScriptHash -> PaymentCredential
class HasTypeProxy addr => SerialiseAddress addr
serialiseAddress :: SerialiseAddress addr => addr -> Text
deserialiseAddress :: SerialiseAddress addr => AsType addr -> Text -> Maybe addr
data ShelleyAddr
data StakeAddress
newtype StakeAddressPointer
StakeAddressPointer :: Ptr -> StakeAddressPointer
[unStakeAddressPointer] :: StakeAddressPointer -> Ptr
data StakeAddressReference
StakeAddressByValue :: StakeCredential -> StakeAddressReference
StakeAddressByPointer :: StakeAddressPointer -> StakeAddressReference
NoStakeAddress :: StakeAddressReference
data StakeCredential
data Block era
pattern Block :: BlockHeader -> [Tx era] -> Block era
data BlockHeader
BlockHeader :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> BlockHeader
data BlockInMode mode
[BlockInMode] :: forall era mode. IsCardanoEra era => Block era -> EraInMode era mode -> BlockInMode mode
data ChainPoint
ChainPointAtGenesis :: ChainPoint
ChainPoint :: !SlotNo -> !Hash BlockHeader -> ChainPoint
data ChainTip
ChainTipAtGenesis :: ChainTip
ChainTip :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> ChainTip
data Certificate
StakeAddressRegistrationCertificate :: StakeCredential -> Certificate
StakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
StakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
StakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
StakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
GenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
MIRCertificate :: MIRPot -> MIRTarget -> Certificate
data MIRTarget
StakeAddressesMIR :: [(StakeCredential, Lovelace)] -> MIRTarget
SendToReservesMIR :: Lovelace -> MIRTarget
SendToTreasuryMIR :: Lovelace -> MIRTarget
data StakePoolMetadataReference
data StakePoolParameters
data StakePoolRelay
newtype ScriptLockedTxInsError
ScriptLockedTxIns :: [TxIn] -> ScriptLockedTxInsError
data TxInsExistError
TxInsDoNotExist :: [TxIn] -> TxInsExistError
EmptyUTxO :: TxInsExistError
data QueryConvenienceError
AcqFailure :: AcquiringFailure -> QueryConvenienceError
SockErr :: EnvSocketError -> QueryConvenienceError
QueryEraMismatch :: EraMismatch -> QueryConvenienceError
ByronEraNotSupported :: QueryConvenienceError
EraConsensusModeMismatch :: !AnyConsensusMode -> !AnyCardanoEra -> QueryConvenienceError
data InputDecodeError
InputTextEnvelopeError :: !TextEnvelopeError -> InputDecodeError
InputBech32DecodeError :: !Bech32DecodeError -> InputDecodeError
InputInvalidError :: InputDecodeError
data InputFormat a
[InputFormatBech32] :: forall a. SerialiseAsBech32 a => InputFormat a
[InputFormatHex] :: forall a. SerialiseAsRawBytes a => InputFormat a
[InputFormatTextEnvelope] :: forall a. HasTextEnvelope a => InputFormat a
data SomeAddressVerificationKey
AByronVerificationKey :: VerificationKey ByronKey -> SomeAddressVerificationKey
APaymentVerificationKey :: VerificationKey PaymentKey -> SomeAddressVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeAddressVerificationKey
AGenesisUTxOVerificationKey :: VerificationKey GenesisUTxOKey -> SomeAddressVerificationKey
AGenesisExtendedVerificationKey :: VerificationKey GenesisExtendedKey -> SomeAddressVerificationKey
AGenesisDelegateExtendedVerificationKey :: VerificationKey GenesisDelegateExtendedKey -> SomeAddressVerificationKey
AKesVerificationKey :: VerificationKey KesKey -> SomeAddressVerificationKey
AVrfVerificationKey :: VerificationKey VrfKey -> SomeAddressVerificationKey
AStakeVerificationKey :: VerificationKey StakeKey -> SomeAddressVerificationKey
AStakeExtendedVerificationKey :: VerificationKey StakeExtendedKey -> SomeAddressVerificationKey
newtype EnvSocketError
CliEnvVarLookup :: Text -> EnvSocketError
newtype SocketPath
SocketPath :: FilePath -> SocketPath
[unSocketPath] :: SocketPath -> FilePath
class EraCast (f :: Type -> Type)
eraCast :: (EraCast f, IsCardanoEra fromEra, IsCardanoEra toEra) => CardanoEra toEra -> f fromEra -> Either EraCastError (f toEra)
data EraCastError
EraCastError :: value -> CardanoEra fromEra -> CardanoEra toEra -> EraCastError
[originalValue] :: EraCastError -> value
[fromEra] :: EraCastError -> CardanoEra fromEra
[toEra] :: EraCastError -> CardanoEra toEra
type Allegra = AllegraEra
data AllegraEra
data AlonzoEra
data AnyCardanoEra
[AnyCardanoEra] :: forall era. IsCardanoEra era => CardanoEra era -> AnyCardanoEra
data BabbageEra
type Byron = ByronEra
data ByronEra
data CardanoEra era
[ByronEra] :: CardanoEra ByronEra
[ShelleyEra] :: CardanoEra ShelleyEra
[AllegraEra] :: CardanoEra AllegraEra
[MaryEra] :: CardanoEra MaryEra
[AlonzoEra] :: CardanoEra AlonzoEra
[BabbageEra] :: CardanoEra BabbageEra
[ConwayEra] :: CardanoEra ConwayEra
data CardanoEraStyle era
[LegacyByronEra] :: CardanoEraStyle ByronEra
[ShelleyBasedEra] :: forall era. IsShelleyBasedEra era => ShelleyBasedEra era -> CardanoEraStyle era
data ConwayEra
data InAnyCardanoEra (thing :: Type -> Type)
[InAnyCardanoEra] :: forall era (thing :: Type -> Type). IsCardanoEra era => CardanoEra era -> thing era -> InAnyCardanoEra thing
data InAnyShelleyBasedEra (thing :: Type -> Type)
[InAnyShelleyBasedEra] :: forall era (thing :: Type -> Type). IsShelleyBasedEra era => ShelleyBasedEra era -> thing era -> InAnyShelleyBasedEra thing
class HasTypeProxy era => IsCardanoEra era
cardanoEra :: IsCardanoEra era => CardanoEra era
class IsCardanoEra era => IsShelleyBasedEra era
shelleyBasedEra :: IsShelleyBasedEra era => ShelleyBasedEra era
type Mary = MaryEra
data MaryEra
type Shelley = ShelleyEra
data ShelleyBasedEra era
[ShelleyBasedEraShelley] :: ShelleyBasedEra ShelleyEra
[ShelleyBasedEraAllegra] :: ShelleyBasedEra AllegraEra
[ShelleyBasedEraMary] :: ShelleyBasedEra MaryEra
[ShelleyBasedEraAlonzo] :: ShelleyBasedEra AlonzoEra
[ShelleyBasedEraBabbage] :: ShelleyBasedEra BabbageEra
[ShelleyBasedEraConway] :: ShelleyBasedEra ConwayEra
data ShelleyEra
class Show e => Error e
displayError :: Error e => e -> String
data FileError e
FileError :: FilePath -> e -> FileError e
FileErrorTempFile :: FilePath -> FilePath -> Handle -> FileError e
FileIOError :: FilePath -> IOException -> FileError e
data BalancedTxBody era
BalancedTxBody :: TxBodyContent BuildTx era -> TxBody era -> TxOut CtxTx era -> Lovelace -> BalancedTxBody era
data MinimumUTxOError
data ScriptExecutionError
ScriptErrorMissingTxIn :: TxIn -> ScriptExecutionError
ScriptErrorTxInWithoutDatum :: TxIn -> ScriptExecutionError
ScriptErrorWrongDatum :: Hash ScriptData -> ScriptExecutionError
ScriptErrorEvaluationFailed :: EvaluationError -> [Text] -> ScriptExecutionError
ScriptErrorExecutionUnitsOverflow :: ScriptExecutionError
ScriptErrorNotPlutusWitnessedTxIn :: ScriptWitnessIndex -> ScriptHash -> ScriptExecutionError
ScriptErrorRedeemerPointsToUnknownScriptHash :: ScriptWitnessIndex -> ScriptExecutionError
ScriptErrorMissingScript :: RdmrPtr -> ResolvablePointers -> ScriptExecutionError
ScriptErrorMissingCostModel :: Language -> ScriptExecutionError
data TransactionValidityError
TransactionValidityIntervalError :: PastHorizonException -> TransactionValidityError
TransactionValidityTranslationError :: TranslationError StandardCrypto -> TransactionValidityError
TransactionValidityCostModelError :: Map AnyPlutusScriptVersion CostModel -> String -> TransactionValidityError
data TxBodyErrorAutoBalance
TxBodyError :: TxBodyError -> TxBodyErrorAutoBalance
TxBodyScriptExecutionError :: [(ScriptWitnessIndex, ScriptExecutionError)] -> TxBodyErrorAutoBalance
TxBodyScriptBadScriptValidity :: TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceNegative :: Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceTooSmall :: TxOutInAnyEra -> Lovelace -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorByronEraNotSupported :: TxBodyErrorAutoBalance
TxBodyErrorMissingParamMinUTxO :: TxBodyErrorAutoBalance
TxBodyErrorValidityInterval :: TransactionValidityError -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxONotMet :: TxOutInAnyEra -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxOMissingPParams :: MinimumUTxOError -> TxBodyErrorAutoBalance
TxBodyErrorNonAdaAssetsUnbalanced :: Value -> TxBodyErrorAutoBalance
TxBodyErrorScriptWitnessIndexMissingFromExecUnitsMap :: ScriptWitnessIndex -> Map ScriptWitnessIndex ExecutionUnits -> TxBodyErrorAutoBalance
data GenesisParameters
GenesisParameters :: UTCTime -> NetworkId -> Rational -> Int -> EpochSize -> NominalDiffTime -> Int -> Int -> Int -> Lovelace -> ProtocolParameters -> GenesisParameters
[protocolParamSystemStart] :: GenesisParameters -> UTCTime
[protocolParamNetworkId] :: GenesisParameters -> NetworkId
[protocolParamActiveSlotsCoefficient] :: GenesisParameters -> Rational
[protocolParamSecurity] :: GenesisParameters -> Int
[protocolParamEpochLength] :: GenesisParameters -> EpochSize
[protocolParamSlotLength] :: GenesisParameters -> NominalDiffTime
[protocolParamSlotsPerKESPeriod] :: GenesisParameters -> Int
[protocolParamMaxKESEvolutions] :: GenesisParameters -> Int
[protocolParamUpdateQuorum] :: GenesisParameters -> Int
[protocolParamMaxLovelaceSupply] :: GenesisParameters -> Lovelace
[protocolInitialUpdateableProtocolParameters] :: GenesisParameters -> ProtocolParameters
data family AsType t
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsShelley :: AsType ShelleyEra
pattern AsMary :: AsType MaryEra
pattern AsConway :: AsType ConwayEra
pattern AsByron :: AsType ByronEra
pattern AsBabbage :: AsType BabbageEra
pattern AsAlonzo :: AsType AlonzoEra
pattern AsAllegra :: AsType AllegraEra
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsByronAddress :: AsType (Address ByronAddr)
data FromSomeType (c :: Type -> Constraint) b
[FromSomeType] :: forall (c :: Type -> Constraint) a b. c a => AsType a -> (a -> b) -> FromSomeType c b
class Typeable t => HasTypeProxy t where {
    data family AsType t;
}
proxyToAsType :: HasTypeProxy t => Proxy t -> AsType t
castHash :: CastHash roleA roleB => Hash roleA -> Hash roleB
data family Hash keyrole
newtype OutputFile
OutputFile :: FilePath -> OutputFile
[unOutputFile] :: OutputFile -> FilePath
data LocalChainSyncClient block point tip (m :: Type -> Type)
NoLocalChainSyncClient :: LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClientPipelined :: ChainSyncClientPipelined block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClient :: ChainSyncClient block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
data LocalNodeClientParams
[LocalNodeClientParamsSingleBlock] :: forall block. (ProtocolClient block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
[LocalNodeClientParamsCardano] :: forall block. (ProtocolClient block, CardanoHardForkConstraints (ConsensusCryptoForBlock block)) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
data LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
[localChainSyncClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> LocalChainSyncClient block point tip m
[localTxSubmissionClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxSubmissionClient tx txerr m ())
[localStateQueryClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalStateQueryClient block point query m ())
[localTxMonitoringClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxMonitorClient txid tx slot m ())
type LocalNodeClientProtocolsInMode mode = LocalNodeClientProtocols BlockInMode mode ChainPoint ChainTip SlotNo TxInMode mode TxIdInMode mode TxValidationErrorInMode mode QueryInMode mode IO
data LocalNodeConnectInfo mode
LocalNodeConnectInfo :: ConsensusModeParams mode -> NetworkId -> FilePath -> LocalNodeConnectInfo mode
[localConsensusModeParams] :: LocalNodeConnectInfo mode -> ConsensusModeParams mode
[localNodeNetworkId] :: LocalNodeConnectInfo mode -> NetworkId
[localNodeSocketPath] :: LocalNodeConnectInfo mode -> FilePath
data LocalTxMonitoringQuery mode
LocalTxMonitoringQueryTx :: TxIdInMode mode -> LocalTxMonitoringQuery mode
LocalTxMonitoringSendNextTx :: LocalTxMonitoringQuery mode
LocalTxMonitoringMempoolInformation :: LocalTxMonitoringQuery mode
data LocalTxMonitoringResult mode
LocalTxMonitoringTxExists :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringTxDoesNotExist :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringNextTx :: Maybe (TxInMode mode) -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringMempoolSizeAndCapacity :: MempoolSizeAndCapacity -> SlotNo -> LocalTxMonitoringResult mode
data LocalStateQueryExpr block point (query :: Type -> Type) r (m :: Type -> Type) a
data UnsupportedNtcVersionError
UnsupportedNtcVersionError :: !MinNodeToClientVersion -> !NodeToClientVersion -> UnsupportedNtcVersionError
data TxIdInMode mode
[TxIdInMode] :: forall era mode. TxId -> EraInMode era mode -> TxIdInMode mode
data TxInMode mode
[TxInMode] :: forall era mode. Tx era -> EraInMode era mode -> TxInMode mode
[TxInByronSpecial] :: forall mode. GenTx ByronBlock -> EraInMode ByronEra mode -> TxInMode mode
data TxValidationErrorInMode mode
[TxValidationErrorInMode] :: forall era mode. TxValidationError era -> EraInMode era mode -> TxValidationErrorInMode mode
[TxValidationEraMismatch] :: forall mode. EraMismatch -> TxValidationErrorInMode mode
data ByronKey
data ByronKeyLegacy
castSigningKey :: CastSigningKeyRole keyroleA keyroleB => SigningKey keyroleA -> SigningKey keyroleB
castVerificationKey :: CastVerificationKeyRole keyroleA keyroleB => VerificationKey keyroleA -> VerificationKey keyroleB
class (Eq VerificationKey keyrole, Show VerificationKey keyrole, SerialiseAsRawBytes Hash keyrole, HasTextEnvelope VerificationKey keyrole, HasTextEnvelope SigningKey keyrole) => Key keyrole where {
    data family VerificationKey keyrole;
    data family SigningKey keyrole;
}
getVerificationKey :: Key keyrole => SigningKey keyrole -> VerificationKey keyrole
deterministicSigningKey :: Key keyrole => AsType keyrole -> Seed -> SigningKey keyrole
deterministicSigningKeySeedSize :: Key keyrole => AsType keyrole -> Word
verificationKeyHash :: Key keyrole => VerificationKey keyrole -> Hash keyrole
data family SigningKey keyrole
data family VerificationKey keyrole
data GenesisDelegateExtendedKey
data GenesisDelegateKey
data GenesisExtendedKey
data GenesisKey
data GenesisUTxOKey
data PaymentExtendedKey
data PaymentKey
data StakeExtendedKey
data StakeKey
toLedgerEvent :: ConvertLedgerEvent blk => WrapLedgerEvent blk -> Maybe LedgerEvent
data LedgerEvent
PoolRegistration :: Certificate -> LedgerEvent
PoolReRegistration :: Certificate -> LedgerEvent
IncrementalRewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
RewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
MIRDistribution :: MIRDistributionDetails -> LedgerEvent
PoolReap :: PoolReapDetails -> LedgerEvent
SuccessfulPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
FailedPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
data MIRDistributionDetails
MIRDistributionDetails :: Map StakeCredential Lovelace -> Map StakeCredential Lovelace -> Lovelace -> Lovelace -> MIRDistributionDetails
[mirddReservePayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddTreasuryPayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddReservesToTreasury] :: MIRDistributionDetails -> Lovelace
[mirddTreasuryToReserves] :: MIRDistributionDetails -> Lovelace
data PoolReapDetails
PoolReapDetails :: EpochNo -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> PoolReapDetails
[prdEpochNo] :: PoolReapDetails -> EpochNo
[prdRefunded] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
[prdUnclaimed] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
data Env
Env :: HardForkLedgerConfig (CardanoEras StandardCrypto) -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto)) -> Env
[envLedgerConfig] :: Env -> HardForkLedgerConfig (CardanoEras StandardCrypto)
[envProtocolConfig] :: Env -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto))
data FoldBlocksError
FoldBlocksInitialLedgerStateError :: InitialLedgerStateError -> FoldBlocksError
FoldBlocksApplyBlockError :: LedgerStateError -> FoldBlocksError
data GenesisConfigError
NEError :: !Text -> GenesisConfigError
NEByronConfig :: !FilePath -> !ConfigurationError -> GenesisConfigError
NEShelleyConfig :: !FilePath -> !Text -> GenesisConfigError
NEAlonzoConfig :: !FilePath -> !Text -> GenesisConfigError
NEConwayConfig :: !FilePath -> !Text -> GenesisConfigError
NECardanoConfig :: !Text -> GenesisConfigError
data InitialLedgerStateError
ILSEConfigFile :: Text -> InitialLedgerStateError
ILSEGenesisFile :: GenesisConfigError -> InitialLedgerStateError
ILSELedgerConsensusConfig :: GenesisConfigError -> InitialLedgerStateError
newtype LedgerState
LedgerState :: LedgerState (HardForkBlock (CardanoEras StandardCrypto)) -> LedgerState
[clsState] :: LedgerState -> LedgerState (HardForkBlock (CardanoEras StandardCrypto))
pattern LedgerStateShelley :: () => LedgerState (ShelleyBlock protocol (ShelleyEra StandardCrypto)) -> LedgerState
pattern LedgerStateMary :: () => LedgerState (ShelleyBlock protocol (MaryEra StandardCrypto)) -> LedgerState
pattern LedgerStateConway :: () => LedgerState (ShelleyBlock protocol (ConwayEra StandardCrypto)) -> LedgerState
pattern LedgerStateByron :: LedgerState ByronBlock -> LedgerState
pattern LedgerStateBabbage :: () => LedgerState (ShelleyBlock protocol (BabbageEra StandardCrypto)) -> LedgerState
pattern LedgerStateAlonzo :: () => LedgerState (ShelleyBlock protocol (AlonzoEra StandardCrypto)) -> LedgerState
pattern LedgerStateAllegra :: () => LedgerState (ShelleyBlock protocol (AllegraEra StandardCrypto)) -> LedgerState
data LedgerStateError
ApplyBlockHashMismatch :: Text -> LedgerStateError
ApplyBlockError :: HardForkLedgerError (CardanoEras StandardCrypto) -> LedgerStateError
InvalidRollback :: SlotNo -> ChainPoint -> LedgerStateError
data ValidationMode
FullValidation :: ValidationMode
QuickValidation :: ValidationMode
data AnyConsensusMode
[AnyConsensusMode] :: forall mode. ConsensusMode mode -> AnyConsensusMode
data AnyConsensusModeParams
[AnyConsensusModeParams] :: forall mode. ConsensusModeParams mode -> AnyConsensusModeParams
data CardanoMode
type family ChainDepStateProtocol era
type family ConsensusBlockForEra era
type family ConsensusBlockForMode mode
data ConsensusMode mode
[CardanoMode] :: ConsensusMode CardanoMode
data ConsensusModeIsMultiEra mode
[CardanoModeIsMultiEra] :: ConsensusModeIsMultiEra CardanoMode
data ConsensusModeParams mode
[ByronModeParams] :: EpochSlots -> ConsensusModeParams ByronMode
[ShelleyModeParams] :: ConsensusModeParams ShelleyMode
[CardanoModeParams] :: EpochSlots -> ConsensusModeParams CardanoMode
type family ConsensusProtocol era
data EraInMode era mode
[ByronEraInByronMode] :: EraInMode ByronEra ByronMode
[ShelleyEraInShelleyMode] :: EraInMode ShelleyEra ShelleyMode
[ByronEraInCardanoMode] :: EraInMode ByronEra CardanoMode
[ShelleyEraInCardanoMode] :: EraInMode ShelleyEra CardanoMode
[AllegraEraInCardanoMode] :: EraInMode AllegraEra CardanoMode
[MaryEraInCardanoMode] :: EraInMode MaryEra CardanoMode
[AlonzoEraInCardanoMode] :: EraInMode AlonzoEra CardanoMode
[BabbageEraInCardanoMode] :: EraInMode BabbageEra CardanoMode
[ConwayEraInCardanoMode] :: EraInMode ConwayEra CardanoMode
data NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
data OperationalCertIssueError
data OperationalCertificate
data OperationalCertificateIssueCounter
data BlockType blk
[ByronBlockType] :: BlockType (HardForkBlock '[ByronBlock])
[ShelleyBlockType] :: BlockType (HardForkBlock '[ShelleyBlock (TPraos StandardCrypto) StandardShelley])
[CardanoBlockType] :: BlockType (HardForkBlock (CardanoEras StandardCrypto))
class (RunNode blk, IOLike m) => Protocol (m :: Type -> Type) blk where {
    data family ProtocolInfoArgs (m :: Type -> Type) blk;
}
protocolInfo :: Protocol m blk => ProtocolInfoArgs m blk -> ProtocolInfo m blk
data family ProtocolInfoArgs (m :: Type -> Type) blk
data BundledProtocolParameters era
[BundleAsByronProtocolParameters] :: ProtocolParameters -> BundledProtocolParameters ByronEra
[BundleAsShelleyBasedProtocolParameters] :: forall era. ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era) -> BundledProtocolParameters era
newtype CostModel
CostModel :: Map Text Integer -> CostModel
data ExecutionUnitPrices
ExecutionUnitPrices :: Rational -> Rational -> ExecutionUnitPrices
[priceExecutionSteps] :: ExecutionUnitPrices -> Rational
[priceExecutionMemory] :: ExecutionUnitPrices -> Rational
data PraosNonce
data ProtocolParametersUpdate
ProtocolParametersUpdate :: Maybe (Natural, Natural) -> Maybe Rational -> Maybe (Maybe PraosNonce) -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe EpochNo -> Maybe Natural -> Maybe Rational -> Maybe Rational -> Maybe Rational -> Maybe Lovelace -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParametersUpdate
[protocolUpdateProtocolVersion] :: ProtocolParametersUpdate -> Maybe (Natural, Natural)
[protocolUpdateDecentralization] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateExtraPraosEntropy] :: ProtocolParametersUpdate -> Maybe (Maybe PraosNonce)
[protocolUpdateMaxBlockHeaderSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxBlockBodySize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxTxSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeeFixed] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeePerByte] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMinUTxOValue] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakeAddressDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakePoolDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateMinPoolCost] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdatePoolRetireMaxEpoch] :: ProtocolParametersUpdate -> Maybe EpochNo
[protocolUpdateStakePoolTargetNum] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdatePoolPledgeInfluence] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateMonetaryExpansion] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateTreasuryCut] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateUTxOCostPerWord] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateCostModels] :: ProtocolParametersUpdate -> Map AnyPlutusScriptVersion CostModel
[protocolUpdatePrices] :: ProtocolParametersUpdate -> Maybe ExecutionUnitPrices
[protocolUpdateMaxTxExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxBlockExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxValueSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateCollateralPercent] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxCollateralInputs] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateUTxOCostPerByte] :: ProtocolParametersUpdate -> Maybe Lovelace
data UpdateProposal
UpdateProposal :: !Map (Hash GenesisKey) ProtocolParametersUpdate -> !EpochNo -> UpdateProposal
data EraHistory mode
[EraHistory] :: forall mode (xs :: [Type]). ConsensusBlockForMode mode ~ HardForkBlock xs => ConsensusMode mode -> Interpreter xs -> EraHistory mode
newtype LedgerEpochInfo
LedgerEpochInfo :: EpochInfo (Either Text) -> LedgerEpochInfo
[unLedgerEpochInfo] :: LedgerEpochInfo -> EpochInfo (Either Text)
data QueryInEra era result
[QueryByronUpdateState] :: QueryInEra ByronEra ByronUpdateState
[QueryInShelleyBasedEra] :: forall era result. ShelleyBasedEra era -> QueryInShelleyBasedEra era result -> QueryInEra era result
data QueryInMode mode result
[QueryCurrentEra] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode AnyCardanoEra
[QueryInEra] :: forall era mode result1. EraInMode era mode -> QueryInEra era result1 -> QueryInMode mode (Either EraMismatch result1)
[QueryEraHistory] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode (EraHistory mode)
[QuerySystemStart] :: forall mode. QueryInMode mode SystemStart
[QueryChainBlockNo] :: forall mode. QueryInMode mode (WithOrigin BlockNo)
[QueryChainPoint] :: forall mode. ConsensusMode mode -> QueryInMode mode ChainPoint
data QueryInShelleyBasedEra era result
[QueryEpoch] :: forall era. QueryInShelleyBasedEra era EpochNo
[QueryGenesisParameters] :: forall era. QueryInShelleyBasedEra era GenesisParameters
[QueryProtocolParameters] :: forall era. QueryInShelleyBasedEra era ProtocolParameters
[QueryProtocolParametersUpdate] :: forall era. QueryInShelleyBasedEra era (Map (Hash GenesisKey) ProtocolParametersUpdate)
[QueryStakeDistribution] :: forall era. QueryInShelleyBasedEra era (Map (Hash StakePoolKey) Rational)
[QueryUTxO] :: forall era. QueryUTxOFilter -> QueryInShelleyBasedEra era (UTxO era)
[QueryStakeAddresses] :: forall era. Set StakeCredential -> NetworkId -> QueryInShelleyBasedEra era (Map StakeAddress Lovelace, Map StakeAddress PoolId)
[QueryStakePools] :: forall era. QueryInShelleyBasedEra era (Set PoolId)
[QueryStakePoolParameters] :: forall era. Set PoolId -> QueryInShelleyBasedEra era (Map PoolId StakePoolParameters)
[QueryDebugLedgerState] :: forall era. QueryInShelleyBasedEra era (SerialisedDebugLedgerState era)
[QueryProtocolState] :: forall era. QueryInShelleyBasedEra era (ProtocolState era)
[QueryCurrentEpochState] :: forall era. QueryInShelleyBasedEra era (SerialisedCurrentEpochState era)
[QueryPoolState] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolState era)
[QueryPoolDistribution] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolDistribution era)
[QueryStakeSnapshot] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedStakeSnapshots era)
data QueryUTxOFilter
QueryUTxOWhole :: QueryUTxOFilter
QueryUTxOByAddress :: Set AddressAny -> QueryUTxOFilter
QueryUTxOByTxIn :: Set TxIn -> QueryUTxOFilter
newtype SlotsInEpoch
SlotsInEpoch :: Word64 -> SlotsInEpoch
newtype SlotsToEpochEnd
SlotsToEpochEnd :: Word64 -> SlotsToEpochEnd
unUTxO :: UTxO era -> Map TxIn (TxOut CtxUTxO era)
data AnyPlutusScriptVersion
[AnyPlutusScriptVersion] :: forall lang. PlutusScriptVersion lang -> AnyPlutusScriptVersion
data AnyScriptLanguage
[AnyScriptLanguage] :: forall lang. ScriptLanguage lang -> AnyScriptLanguage
data ExecutionUnits
ExecutionUnits :: Natural -> Natural -> ExecutionUnits
[executionSteps] :: ExecutionUnits -> Natural
[executionMemory] :: ExecutionUnits -> Natural
class IsScriptLanguage lang => IsPlutusScriptLanguage lang
plutusScriptVersion :: IsPlutusScriptLanguage lang => PlutusScriptVersion lang
class HasTypeProxy lang => IsScriptLanguage lang
scriptLanguage :: IsScriptLanguage lang => ScriptLanguage lang
class IsScriptWitnessInCtx ctx
scriptWitnessInCtx :: IsScriptWitnessInCtx ctx => ScriptWitnessInCtx ctx
data KeyWitnessInCtx witctx
[KeyWitnessForSpending] :: KeyWitnessInCtx WitCtxTxIn
[KeyWitnessForStakeAddr] :: KeyWitnessInCtx WitCtxStake
data PlutusScript lang
data PlutusScriptV1
data PlutusScriptV2
data PlutusScriptVersion lang
[PlutusScriptV1] :: PlutusScriptVersion PlutusScriptV1
[PlutusScriptV2] :: PlutusScriptVersion PlutusScriptV2
data Script lang
[SimpleScript] :: !SimpleScript -> Script SimpleScript'
[PlutusScript] :: forall lang. !PlutusScriptVersion lang -> !PlutusScript lang -> Script lang
data ScriptDatum witctx
[ScriptDatumForTxIn] :: HashableScriptData -> ScriptDatum WitCtxTxIn
[InlineScriptDatum] :: ScriptDatum WitCtxTxIn
[NoScriptDatumForMint] :: ScriptDatum WitCtxMint
[NoScriptDatumForStake] :: ScriptDatum WitCtxStake
data ScriptHash
data ScriptInAnyLang
[ScriptInAnyLang] :: forall lang. ScriptLanguage lang -> Script lang -> ScriptInAnyLang
data ScriptInEra era
[ScriptInEra] :: forall lang era. ScriptLanguageInEra lang era -> Script lang -> ScriptInEra era
data ScriptLanguage lang
[SimpleScriptLanguage] :: ScriptLanguage SimpleScript'
[PlutusScriptLanguage] :: forall lang. PlutusScriptVersion lang -> ScriptLanguage lang
data ScriptLanguageInEra lang era
[SimpleScriptInShelley] :: ScriptLanguageInEra SimpleScript' ShelleyEra
[SimpleScriptInAllegra] :: ScriptLanguageInEra SimpleScript' AllegraEra
[SimpleScriptInMary] :: ScriptLanguageInEra SimpleScript' MaryEra
[SimpleScriptInAlonzo] :: ScriptLanguageInEra SimpleScript' AlonzoEra
[SimpleScriptInBabbage] :: ScriptLanguageInEra SimpleScript' BabbageEra
[SimpleScriptInConway] :: ScriptLanguageInEra SimpleScript' ConwayEra
[PlutusScriptV1InAlonzo] :: ScriptLanguageInEra PlutusScriptV1 AlonzoEra
[PlutusScriptV1InBabbage] :: ScriptLanguageInEra PlutusScriptV1 BabbageEra
[PlutusScriptV1InConway] :: ScriptLanguageInEra PlutusScriptV1 ConwayEra
[PlutusScriptV2InBabbage] :: ScriptLanguageInEra PlutusScriptV2 BabbageEra
[PlutusScriptV2InConway] :: ScriptLanguageInEra PlutusScriptV2 ConwayEra
type ScriptRedeemer = HashableScriptData
data ScriptWitness witctx era
[SimpleScriptWitness] :: forall era witctx. ScriptLanguageInEra SimpleScript' era -> SimpleScriptOrReferenceInput SimpleScript' -> ScriptWitness witctx era
[PlutusScriptWitness] :: forall lang era witctx. ScriptLanguageInEra lang era -> PlutusScriptVersion lang -> PlutusScriptOrReferenceInput lang -> ScriptDatum witctx -> ScriptRedeemer -> ExecutionUnits -> ScriptWitness witctx era
data ScriptWitnessInCtx witctx
[ScriptWitnessForSpending] :: ScriptWitnessInCtx WitCtxTxIn
[ScriptWitnessForMinting] :: ScriptWitnessInCtx WitCtxMint
[ScriptWitnessForStakeAddr] :: ScriptWitnessInCtx WitCtxStake
data SimpleScript
RequireSignature :: !Hash PaymentKey -> SimpleScript
RequireTimeBefore :: !SlotNo -> SimpleScript
RequireTimeAfter :: !SlotNo -> SimpleScript
RequireAllOf :: ![SimpleScript] -> SimpleScript
RequireAnyOf :: ![SimpleScript] -> SimpleScript
RequireMOf :: !Int -> ![SimpleScript] -> SimpleScript
data SimpleScript'
data WitCtx witctx
[WitCtxTxIn] :: WitCtx WitCtxTxIn
[WitCtxMint] :: WitCtx WitCtxMint
[WitCtxStake] :: WitCtx WitCtxStake
data WitCtxMint
data WitCtxStake
data WitCtxTxIn
data Witness witctx era
[KeyWitness] :: forall witctx era. KeyWitnessInCtx witctx -> Witness witctx era
[ScriptWitness] :: forall witctx era. ScriptWitnessInCtx witctx -> ScriptWitness witctx era -> Witness witctx era
data HashableScriptData
data ScriptData
ScriptDataConstructor :: Integer -> [ScriptData] -> ScriptData
ScriptDataMap :: [(ScriptData, ScriptData)] -> ScriptData
ScriptDataList :: [ScriptData] -> ScriptData
ScriptDataNumber :: Integer -> ScriptData
ScriptDataBytes :: ByteString -> ScriptData
data ScriptDataJsonBytesError
data ScriptDataJsonError
ScriptDataJsonSchemaError :: !Value -> !ScriptDataJsonSchemaError -> ScriptDataJsonError
ScriptDataRangeError :: !Value -> !ScriptDataRangeError -> ScriptDataJsonError
data ScriptDataJsonSchema
ScriptDataJsonNoSchema :: ScriptDataJsonSchema
ScriptDataJsonDetailedSchema :: ScriptDataJsonSchema
data ScriptDataJsonSchemaError
ScriptDataJsonNullNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonBoolNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonNumberNotInteger :: !Double -> ScriptDataJsonSchemaError
ScriptDataJsonNotObject :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonBadObject :: ![(Text, Value)] -> ScriptDataJsonSchemaError
ScriptDataJsonBadMapPair :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonTypeMismatch :: !Text -> !Value -> ScriptDataJsonSchemaError
newtype ScriptDataRangeError
ScriptDataConstructorOutOfRange :: Integer -> ScriptDataRangeError
data Bech32DecodeError
Bech32DecodingError :: !DecodingError -> Bech32DecodeError
Bech32UnexpectedPrefix :: !Text -> !Set Text -> Bech32DecodeError
Bech32DataPartToBytesError :: !Text -> Bech32DecodeError
Bech32DeserialiseFromBytesError :: !ByteString -> Bech32DecodeError
Bech32WrongPrefix :: !Text -> !Text -> Bech32DecodeError
class (HasTypeProxy a, SerialiseAsRawBytes a) => SerialiseAsBech32 a
class HasTypeProxy a => SerialiseAsCBOR a
serialiseToCBOR :: SerialiseAsCBOR a => a -> ByteString
deserialiseFromCBOR :: SerialiseAsCBOR a => AsType a -> ByteString -> Either DecoderError a
newtype JsonDecodeError
JsonDecodeError :: String -> JsonDecodeError
data FromSomeTypeCDDL c b
[FromCDDLTx] :: forall b. Text -> (InAnyCardanoEra Tx -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
[FromCDDLWitness] :: forall b. Text -> (InAnyCardanoEra KeyWitness -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
data TextEnvelopeCddl
TextEnvelopeCddl :: !Text -> !Text -> !ByteString -> TextEnvelopeCddl
[teCddlType] :: TextEnvelopeCddl -> !Text
[teCddlDescription] :: TextEnvelopeCddl -> !Text
[teCddlRawCBOR] :: TextEnvelopeCddl -> !ByteString
data TextEnvelopeCddlError
TextEnvelopeCddlErrCBORDecodingError :: DecoderError -> TextEnvelopeCddlError
TextEnvelopeCddlAesonDecodeError :: FilePath -> String -> TextEnvelopeCddlError
TextEnvelopeCddlUnknownKeyWitness :: TextEnvelopeCddlError
TextEnvelopeCddlTypeError :: [Text] -> Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrUnknownType :: Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrByronKeyWitnessUnsupported :: TextEnvelopeCddlError
data RawBytesHexError
RawBytesHexErrorBase16DecodeFail :: ByteString -> String -> RawBytesHexError
RawBytesHexErrorRawBytesDecodeFail :: ByteString -> TypeRep -> SerialiseAsRawBytesError -> RawBytesHexError
class (HasTypeProxy a, Typeable a) => SerialiseAsRawBytes a
serialiseToRawBytes :: SerialiseAsRawBytes a => a -> ByteString
deserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
class SerialiseAsCBOR a => HasTextEnvelope a
textEnvelopeType :: HasTextEnvelope a => AsType a -> TextEnvelopeType
textEnvelopeDefaultDescr :: HasTextEnvelope a => a -> TextEnvelopeDescr
data TextEnvelope
TextEnvelope :: !TextEnvelopeType -> !TextEnvelopeDescr -> !ByteString -> TextEnvelope
[teType] :: TextEnvelope -> !TextEnvelopeType
[teDescription] :: TextEnvelope -> !TextEnvelopeDescr
[teRawCBOR] :: TextEnvelope -> !ByteString
data TextEnvelopeDescr
data TextEnvelopeError
TextEnvelopeTypeError :: ![TextEnvelopeType] -> !TextEnvelopeType -> TextEnvelopeError
TextEnvelopeDecodeError :: !DecoderError -> TextEnvelopeError
TextEnvelopeAesonDecodeError :: !String -> TextEnvelopeError
newtype TextEnvelopeType
TextEnvelopeType :: String -> TextEnvelopeType
data StakePoolMetadata
data StakePoolMetadataValidationError
data KeyWitness era
data ShelleyWitnessSigningKey
WitnessPaymentKey :: SigningKey PaymentKey -> ShelleyWitnessSigningKey
WitnessPaymentExtendedKey :: SigningKey PaymentExtendedKey -> ShelleyWitnessSigningKey
WitnessStakeKey :: SigningKey StakeKey -> ShelleyWitnessSigningKey
WitnessStakeExtendedKey :: SigningKey StakeExtendedKey -> ShelleyWitnessSigningKey
WitnessStakePoolKey :: SigningKey StakePoolKey -> ShelleyWitnessSigningKey
WitnessGenesisKey :: SigningKey GenesisKey -> ShelleyWitnessSigningKey
WitnessGenesisExtendedKey :: SigningKey GenesisExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateKey :: SigningKey GenesisDelegateKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateExtendedKey :: SigningKey GenesisDelegateExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisUTxOKey :: SigningKey GenesisUTxOKey -> ShelleyWitnessSigningKey
data Tx era
pattern Tx :: TxBody era -> [KeyWitness era] -> Tx era
data AnyScriptWitness era
[AnyScriptWitness] :: forall witctx era. ScriptWitness witctx era -> AnyScriptWitness era
data AuxScriptsSupportedInEra era
[AuxScriptsInAllegraEra] :: AuxScriptsSupportedInEra AllegraEra
[AuxScriptsInMaryEra] :: AuxScriptsSupportedInEra MaryEra
[AuxScriptsInAlonzoEra] :: AuxScriptsSupportedInEra AlonzoEra
[AuxScriptsInBabbageEra] :: AuxScriptsSupportedInEra BabbageEra
[AuxScriptsInConwayEra] :: AuxScriptsSupportedInEra ConwayEra
data BuildTx
data BuildTxWith build a
[ViewTx] :: forall a. BuildTxWith ViewTx a
[BuildTxWith] :: forall a. a -> BuildTxWith BuildTx a
data CertificatesSupportedInEra era
[CertificatesInShelleyEra] :: CertificatesSupportedInEra ShelleyEra
[CertificatesInAllegraEra] :: CertificatesSupportedInEra AllegraEra
[CertificatesInMaryEra] :: CertificatesSupportedInEra MaryEra
[CertificatesInAlonzoEra] :: CertificatesSupportedInEra AlonzoEra
[CertificatesInBabbageEra] :: CertificatesSupportedInEra BabbageEra
[CertificatesInConwayEra] :: CertificatesSupportedInEra ConwayEra
data CollateralSupportedInEra era
[CollateralInAlonzoEra] :: CollateralSupportedInEra AlonzoEra
[CollateralInBabbageEra] :: CollateralSupportedInEra BabbageEra
[CollateralInConwayEra] :: CollateralSupportedInEra ConwayEra
data CtxTx
data CtxUTxO
data MultiAssetSupportedInEra era
[MultiAssetInMaryEra] :: MultiAssetSupportedInEra MaryEra
[MultiAssetInAlonzoEra] :: MultiAssetSupportedInEra AlonzoEra
[MultiAssetInBabbageEra] :: MultiAssetSupportedInEra BabbageEra
[MultiAssetInConwayEra] :: MultiAssetSupportedInEra ConwayEra
data OnlyAdaSupportedInEra era
[AdaOnlyInByronEra] :: OnlyAdaSupportedInEra ByronEra
[AdaOnlyInShelleyEra] :: OnlyAdaSupportedInEra ShelleyEra
[AdaOnlyInAllegraEra] :: OnlyAdaSupportedInEra AllegraEra
data ScriptDataSupportedInEra era
[ScriptDataInAlonzoEra] :: ScriptDataSupportedInEra AlonzoEra
[ScriptDataInBabbageEra] :: ScriptDataSupportedInEra BabbageEra
[ScriptDataInConwayEra] :: ScriptDataSupportedInEra ConwayEra
data ScriptValidity
ScriptInvalid :: ScriptValidity
ScriptValid :: ScriptValidity
data ScriptWitnessIndex
ScriptWitnessIndexTxIn :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexMint :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexCertificate :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexWithdrawal :: !Word -> ScriptWitnessIndex
data TxAuxScripts era
[TxAuxScriptsNone] :: forall era. TxAuxScripts era
[TxAuxScripts] :: forall era. AuxScriptsSupportedInEra era -> [ScriptInEra era] -> TxAuxScripts era
data TxBody era
pattern TxBody :: TxBodyContent ViewTx era -> TxBody era
data TxBodyContent build era
TxBodyContent :: TxIns build era -> TxInsCollateral era -> TxInsReference build era -> [TxOut CtxTx era] -> TxTotalCollateral era -> TxReturnCollateral CtxTx era -> TxFee era -> (TxValidityLowerBound era, TxValidityUpperBound era) -> TxMetadataInEra era -> TxAuxScripts era -> TxExtraKeyWitnesses era -> BuildTxWith build (Maybe ProtocolParameters) -> TxWithdrawals build era -> TxCertificates build era -> TxUpdateProposal era -> TxMintValue build era -> TxScriptValidity era -> TxBodyContent build era
[txIns] :: TxBodyContent build era -> TxIns build era
[txInsCollateral] :: TxBodyContent build era -> TxInsCollateral era
[txInsReference] :: TxBodyContent build era -> TxInsReference build era
[txOuts] :: TxBodyContent build era -> [TxOut CtxTx era]
[txTotalCollateral] :: TxBodyContent build era -> TxTotalCollateral era
[txReturnCollateral] :: TxBodyContent build era -> TxReturnCollateral CtxTx era
[txFee] :: TxBodyContent build era -> TxFee era
[txValidityRange] :: TxBodyContent build era -> (TxValidityLowerBound era, TxValidityUpperBound era)
[txMetadata] :: TxBodyContent build era -> TxMetadataInEra era
[txAuxScripts] :: TxBodyContent build era -> TxAuxScripts era
[txExtraKeyWits] :: TxBodyContent build era -> TxExtraKeyWitnesses era
[txProtocolParams] :: TxBodyContent build era -> BuildTxWith build (Maybe ProtocolParameters)
[txWithdrawals] :: TxBodyContent build era -> TxWithdrawals build era
[txCertificates] :: TxBodyContent build era -> TxCertificates build era
[txUpdateProposal] :: TxBodyContent build era -> TxUpdateProposal era
[txMintValue] :: TxBodyContent build era -> TxMintValue build era
[txScriptValidity] :: TxBodyContent build era -> TxScriptValidity era
data TxBodyError
TxBodyEmptyTxIns :: TxBodyError
TxBodyEmptyTxInsCollateral :: TxBodyError
TxBodyEmptyTxOuts :: TxBodyError
TxBodyOutputNegative :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyOutputOverflow :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyMetadataError :: [(Word64, TxMetadataRangeError)] -> TxBodyError
TxBodyMintAdaError :: TxBodyError
TxBodyMissingProtocolParams :: TxBodyError
TxBodyInIxOverflow :: TxIn -> TxBodyError
data TxBodyScriptData era
[TxBodyNoScriptData] :: forall era. TxBodyScriptData era
[TxBodyScriptData] :: forall era. ScriptDataSupportedInEra era -> TxDats (ShelleyLedgerEra era) -> Redeemers (ShelleyLedgerEra era) -> TxBodyScriptData era
data TxCertificates build era
[TxCertificatesNone] :: forall build era. TxCertificates build era
[TxCertificates] :: forall era build. CertificatesSupportedInEra era -> [Certificate] -> BuildTxWith build (Map StakeCredential (Witness WitCtxStake era)) -> TxCertificates build era
data TxExtraKeyWitnesses era
[TxExtraKeyWitnessesNone] :: forall era. TxExtraKeyWitnesses era
[TxExtraKeyWitnesses] :: forall era. TxExtraKeyWitnessesSupportedInEra era -> [Hash PaymentKey] -> TxExtraKeyWitnesses era
data TxExtraKeyWitnessesSupportedInEra era
[ExtraKeyWitnessesInAlonzoEra] :: TxExtraKeyWitnessesSupportedInEra AlonzoEra
[ExtraKeyWitnessesInBabbageEra] :: TxExtraKeyWitnessesSupportedInEra BabbageEra
[ExtraKeyWitnessesInConwayEra] :: TxExtraKeyWitnessesSupportedInEra ConwayEra
data TxFee era
[TxFeeImplicit] :: forall era. TxFeesImplicitInEra era -> TxFee era
[TxFeeExplicit] :: forall era. TxFeesExplicitInEra era -> Lovelace -> TxFee era
data TxFeesExplicitInEra era
[TxFeesExplicitInShelleyEra] :: TxFeesExplicitInEra ShelleyEra
[TxFeesExplicitInAllegraEra] :: TxFeesExplicitInEra AllegraEra
[TxFeesExplicitInMaryEra] :: TxFeesExplicitInEra MaryEra
[TxFeesExplicitInAlonzoEra] :: TxFeesExplicitInEra AlonzoEra
[TxFeesExplicitInBabbageEra] :: TxFeesExplicitInEra BabbageEra
[TxFeesExplicitInConwayEra] :: TxFeesExplicitInEra ConwayEra
data TxFeesImplicitInEra era
[TxFeesImplicitInByronEra] :: TxFeesImplicitInEra ByronEra
type TxIns build era = [(TxIn, BuildTxWith build Witness WitCtxTxIn era)]
data TxInsCollateral era
[TxInsCollateralNone] :: forall era. TxInsCollateral era
[TxInsCollateral] :: forall era. CollateralSupportedInEra era -> [TxIn] -> TxInsCollateral era
data TxInsReference build era
[TxInsReferenceNone] :: forall build era. TxInsReference build era
[TxInsReference] :: forall era build. ReferenceTxInsScriptsInlineDatumsSupportedInEra era -> [TxIn] -> TxInsReference build era
data TxMetadataInEra era
[TxMetadataNone] :: forall era. TxMetadataInEra era
[TxMetadataInEra] :: forall era. TxMetadataSupportedInEra era -> TxMetadata -> TxMetadataInEra era
data TxMetadataSupportedInEra era
[TxMetadataInShelleyEra] :: TxMetadataSupportedInEra ShelleyEra
[TxMetadataInAllegraEra] :: TxMetadataSupportedInEra AllegraEra
[TxMetadataInMaryEra] :: TxMetadataSupportedInEra MaryEra
[TxMetadataInAlonzoEra] :: TxMetadataSupportedInEra AlonzoEra
[TxMetadataInBabbageEra] :: TxMetadataSupportedInEra BabbageEra
[TxMetadataInConwayEra] :: TxMetadataSupportedInEra ConwayEra
data TxMintValue build era
[TxMintNone] :: forall build era. TxMintValue build era
[TxMintValue] :: forall era build. MultiAssetSupportedInEra era -> Value -> BuildTxWith build (Map PolicyId (ScriptWitness WitCtxMint era)) -> TxMintValue build era
data TxOut ctx era
TxOut :: AddressInEra era -> TxOutValue era -> TxOutDatum ctx era -> ReferenceScript era -> TxOut ctx era
data TxOutDatum ctx era
[TxOutDatumNone] :: forall ctx era. TxOutDatum ctx era
[TxOutDatumHash] :: forall era ctx. ScriptDataSupportedInEra era -> Hash ScriptData -> TxOutDatum ctx era
[TxOutDatumInline] :: forall era ctx. ReferenceTxInsScriptsInlineDatumsSupportedInEra era -> HashableScriptData -> TxOutDatum ctx era
pattern TxOutDatumInTx :: ScriptDataSupportedInEra era -> HashableScriptData -> TxOutDatum CtxTx era
data TxOutValue era
[TxOutAdaOnly] :: forall era. OnlyAdaSupportedInEra era -> Lovelace -> TxOutValue era
[TxOutValue] :: forall era. MultiAssetSupportedInEra era -> Value -> TxOutValue era
data TxReturnCollateral ctx era
[TxReturnCollateralNone] :: forall ctx era. TxReturnCollateral ctx era
[TxReturnCollateral] :: forall era ctx. TxTotalAndReturnCollateralSupportedInEra era -> TxOut ctx era -> TxReturnCollateral ctx era
data TxScriptValidity era
[TxScriptValidityNone] :: forall era. TxScriptValidity era
[TxScriptValidity] :: forall era. TxScriptValiditySupportedInEra era -> ScriptValidity -> TxScriptValidity era
data TxScriptValiditySupportedInEra era
[TxScriptValiditySupportedInAlonzoEra] :: TxScriptValiditySupportedInEra AlonzoEra
[TxScriptValiditySupportedInBabbageEra] :: TxScriptValiditySupportedInEra BabbageEra
[TxScriptValiditySupportedInConwayEra] :: TxScriptValiditySupportedInEra ConwayEra
data TxTotalAndReturnCollateralSupportedInEra era
[TxTotalAndReturnCollateralInBabbageEra] :: TxTotalAndReturnCollateralSupportedInEra BabbageEra
[TxTotalAndReturnCollateralInConwayEra] :: TxTotalAndReturnCollateralSupportedInEra ConwayEra
data TxTotalCollateral era
[TxTotalCollateralNone] :: forall era. TxTotalCollateral era
[TxTotalCollateral] :: forall era. TxTotalAndReturnCollateralSupportedInEra era -> Lovelace -> TxTotalCollateral era
data TxUpdateProposal era
[TxUpdateProposalNone] :: forall era. TxUpdateProposal era
[TxUpdateProposal] :: forall era. UpdateProposalSupportedInEra era -> UpdateProposal -> TxUpdateProposal era
data TxValidityLowerBound era
[TxValidityNoLowerBound] :: forall era. TxValidityLowerBound era
[TxValidityLowerBound] :: forall era. ValidityLowerBoundSupportedInEra era -> SlotNo -> TxValidityLowerBound era
data TxValidityUpperBound era
[TxValidityNoUpperBound] :: forall era. ValidityNoUpperBoundSupportedInEra era -> TxValidityUpperBound era
[TxValidityUpperBound] :: forall era. ValidityUpperBoundSupportedInEra era -> SlotNo -> TxValidityUpperBound era
data TxWithdrawals build era
[TxWithdrawalsNone] :: forall build era. TxWithdrawals build era
[TxWithdrawals] :: forall era build. WithdrawalsSupportedInEra era -> [(StakeAddress, Lovelace, BuildTxWith build (Witness WitCtxStake era))] -> TxWithdrawals build era
data UpdateProposalSupportedInEra era
[UpdateProposalInShelleyEra] :: UpdateProposalSupportedInEra ShelleyEra
[UpdateProposalInAllegraEra] :: UpdateProposalSupportedInEra AllegraEra
[UpdateProposalInMaryEra] :: UpdateProposalSupportedInEra MaryEra
[UpdateProposalInAlonzoEra] :: UpdateProposalSupportedInEra AlonzoEra
[UpdateProposalInBabbageEra] :: UpdateProposalSupportedInEra BabbageEra
[UpdateProposalInConwayEra] :: UpdateProposalSupportedInEra ConwayEra
data ValidityLowerBoundSupportedInEra era
[ValidityLowerBoundInAllegraEra] :: ValidityLowerBoundSupportedInEra AllegraEra
[ValidityLowerBoundInMaryEra] :: ValidityLowerBoundSupportedInEra MaryEra
[ValidityLowerBoundInAlonzoEra] :: ValidityLowerBoundSupportedInEra AlonzoEra
[ValidityLowerBoundInBabbageEra] :: ValidityLowerBoundSupportedInEra BabbageEra
[ValidityLowerBoundInConwayEra] :: ValidityLowerBoundSupportedInEra ConwayEra
data ValidityNoUpperBoundSupportedInEra era
[ValidityNoUpperBoundInByronEra] :: ValidityNoUpperBoundSupportedInEra ByronEra
[ValidityNoUpperBoundInAllegraEra] :: ValidityNoUpperBoundSupportedInEra AllegraEra
[ValidityNoUpperBoundInMaryEra] :: ValidityNoUpperBoundSupportedInEra MaryEra
[ValidityNoUpperBoundInAlonzoEra] :: ValidityNoUpperBoundSupportedInEra AlonzoEra
[ValidityNoUpperBoundInBabbageEra] :: ValidityNoUpperBoundSupportedInEra BabbageEra
[ValidityNoUpperBoundInConwayEra] :: ValidityNoUpperBoundSupportedInEra ConwayEra
data ValidityUpperBoundSupportedInEra era
[ValidityUpperBoundInShelleyEra] :: ValidityUpperBoundSupportedInEra ShelleyEra
[ValidityUpperBoundInAllegraEra] :: ValidityUpperBoundSupportedInEra AllegraEra
[ValidityUpperBoundInMaryEra] :: ValidityUpperBoundSupportedInEra MaryEra
[ValidityUpperBoundInAlonzoEra] :: ValidityUpperBoundSupportedInEra AlonzoEra
[ValidityUpperBoundInBabbageEra] :: ValidityUpperBoundSupportedInEra BabbageEra
[ValidityUpperBoundInConwayEra] :: ValidityUpperBoundSupportedInEra ConwayEra
data ViewTx
data WithdrawalsSupportedInEra era
[WithdrawalsInShelleyEra] :: WithdrawalsSupportedInEra ShelleyEra
[WithdrawalsInAllegraEra] :: WithdrawalsSupportedInEra AllegraEra
[WithdrawalsInMaryEra] :: WithdrawalsSupportedInEra MaryEra
[WithdrawalsInAlonzoEra] :: WithdrawalsSupportedInEra AlonzoEra
[WithdrawalsInBabbageEra] :: WithdrawalsSupportedInEra BabbageEra
[WithdrawalsInConwayEra] :: WithdrawalsSupportedInEra ConwayEra
newtype TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
data TxIn
TxIn :: TxId -> TxIx -> TxIn
newtype TxIx
TxIx :: Word -> TxIx
newtype TxMetadata
TxMetadata :: Map Word64 TxMetadataValue -> TxMetadata
data TxMetadataJsonError
TxMetadataJsonToplevelNotMap :: TxMetadataJsonError
TxMetadataJsonToplevelBadKey :: !Text -> TxMetadataJsonError
TxMetadataJsonSchemaError :: !Word64 -> !Value -> !TxMetadataJsonSchemaError -> TxMetadataJsonError
TxMetadataRangeError :: !Word64 -> !Value -> !TxMetadataRangeError -> TxMetadataJsonError
data TxMetadataJsonSchema
TxMetadataJsonNoSchema :: TxMetadataJsonSchema
TxMetadataJsonDetailedSchema :: TxMetadataJsonSchema
data TxMetadataJsonSchemaError
TxMetadataJsonNullNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonBoolNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonNumberNotInteger :: !Double -> TxMetadataJsonSchemaError
TxMetadataJsonNotObject :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonBadObject :: ![(Text, Value)] -> TxMetadataJsonSchemaError
TxMetadataJsonBadMapPair :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonTypeMismatch :: !Text -> !Value -> TxMetadataJsonSchemaError
data TxMetadataRangeError
TxMetadataNumberOutOfRange :: !Integer -> TxMetadataRangeError
TxMetadataTextTooLong :: !Int -> TxMetadataRangeError
TxMetadataBytesTooLong :: !Int -> TxMetadataRangeError
data TxMetadataValue
TxMetaMap :: [(TxMetadataValue, TxMetadataValue)] -> TxMetadataValue
TxMetaList :: [TxMetadataValue] -> TxMetadataValue
TxMetaNumber :: Integer -> TxMetadataValue
TxMetaBytes :: ByteString -> TxMetadataValue
TxMetaText :: Text -> TxMetadataValue
data AssetId
AdaAssetId :: AssetId
AssetId :: !PolicyId -> !AssetName -> AssetId
newtype AssetName
AssetName :: ByteString -> AssetName
newtype Lovelace
Lovelace :: Integer -> Lovelace
newtype PolicyId
PolicyId :: ScriptHash -> PolicyId
[unPolicyId] :: PolicyId -> ScriptHash
newtype Quantity
Quantity :: Integer -> Quantity
data Value
data ValueNestedBundle
ValueNestedBundleAda :: Quantity -> ValueNestedBundle
ValueNestedBundle :: PolicyId -> Map AssetName Quantity -> ValueNestedBundle
newtype ValueNestedRep
ValueNestedRep :: [ValueNestedBundle] -> ValueNestedRep
class Typeable a => FromCBOR a
class Typeable a => ToCBOR a
newtype EpochSlots
EpochSlots :: Word64 -> EpochSlots
[unEpochSlots] :: EpochSlots -> Word64
newtype BlockNo
BlockNo :: Word64 -> BlockNo
[unBlockNo] :: BlockNo -> Word64
newtype EpochNo
EpochNo :: Word64 -> EpochNo
[unEpochNo] :: EpochNo -> Word64
newtype SlotNo
SlotNo :: Word64 -> SlotNo
[unSlotNo] :: SlotNo -> Word64
newtype SystemStart
SystemStart :: UTCTime -> SystemStart
[getSystemStart] :: SystemStart -> UTCTime
newtype NetworkMagic
NetworkMagic :: Word32 -> NetworkMagic
[unNetworkMagic] :: NetworkMagic -> Word32
data NodeToClientVersion
NodeToClientV_9 :: NodeToClientVersion
NodeToClientV_10 :: NodeToClientVersion
NodeToClientV_11 :: NodeToClientVersion
NodeToClientV_12 :: NodeToClientVersion
NodeToClientV_13 :: NodeToClientVersion
NodeToClientV_14 :: NodeToClientVersion
NodeToClientV_15 :: NodeToClientVersion
newtype ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
newtype ChainSyncClientPipelined header point tip (m :: Type -> Type) a
ChainSyncClientPipelined :: m (ClientPipelinedStIdle 'Z header point tip m a) -> ChainSyncClientPipelined header point tip (m :: Type -> Type) a
[runChainSyncClientPipelined] :: ChainSyncClientPipelined header point tip (m :: Type -> Type) a -> m (ClientPipelinedStIdle 'Z header point tip m a)
newtype LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
LocalStateQueryClient :: m (ClientStIdle block point query m a) -> LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
[runLocalStateQueryClient] :: LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a -> m (ClientStIdle block point query m a)
newtype LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
LocalTxMonitorClient :: m (ClientStIdle txid tx slot m a) -> LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
[runLocalTxMonitorClient] :: LocalTxMonitorClient txid tx slot (m :: Type -> Type) a -> m (ClientStIdle txid tx slot m a)
data MempoolSizeAndCapacity
MempoolSizeAndCapacity :: !Word32 -> !Word32 -> !Word32 -> MempoolSizeAndCapacity
[capacityInBytes] :: MempoolSizeAndCapacity -> !Word32
[sizeInBytes] :: MempoolSizeAndCapacity -> !Word32
[numberOfTxs] :: MempoolSizeAndCapacity -> !Word32
data LocalTxSubmissionClient tx reject (m :: Type -> Type) a
data SubmitResult reason
SubmitSuccess :: SubmitResult reason
SubmitFail :: reason -> SubmitResult reason
anyAddressInEra :: CardanoEra era -> AddressAny -> Either String (AddressInEra era)
anyAddressInShelleyBasedEra :: IsShelleyBasedEra era => AddressAny -> AddressInEra era
byronAddressInEra :: Address ByronAddr -> AddressInEra era
isKeyAddress :: AddressInEra era -> Bool
lexPlausibleAddressString :: Parser Text
makeByronAddress :: NetworkId -> VerificationKey ByronKey -> Address ByronAddr
makeByronAddressInEra :: NetworkId -> VerificationKey ByronKey -> AddressInEra era
makeShelleyAddress :: NetworkId -> PaymentCredential -> StakeAddressReference -> Address ShelleyAddr
makeShelleyAddressInEra :: IsShelleyBasedEra era => NetworkId -> PaymentCredential -> StakeAddressReference -> AddressInEra era
makeStakeAddress :: NetworkId -> StakeCredential -> StakeAddress
parseAddressAny :: Parser AddressAny
shelleyAddressInEra :: IsShelleyBasedEra era => Address ShelleyAddr -> AddressInEra era
stakeAddressCredential :: StakeAddress -> StakeCredential
toAddressAny :: Address addr -> AddressAny
chainPointToHeaderHash :: ChainPoint -> Maybe (Hash BlockHeader)
chainPointToSlotNo :: ChainPoint -> Maybe SlotNo
chainTipToChainPoint :: ChainTip -> ChainPoint
getBlockHeader :: Block era -> BlockHeader
makeChainTip :: WithOrigin BlockNo -> ChainPoint -> ChainTip
makeGenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
makeMIRCertificate :: MIRPot -> MIRTarget -> Certificate
makeStakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
makeStakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
makeStakeAddressRegistrationCertificate :: StakeCredential -> Certificate
makeStakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
makeStakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
getIsCardanoEraConstraint :: CardanoEra era -> (IsCardanoEra era => a) -> a
constructBalancedTx :: IsShelleyBasedEra era => TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> UTxO era -> ProtocolParameters -> LedgerEpochInfo -> SystemStart -> Set PoolId -> [ShelleyWitnessSigningKey] -> Either TxBodyErrorAutoBalance (Tx era)
notScriptLockedTxIns :: [TxIn] -> UTxO era -> Either ScriptLockedTxInsError ()
renderNotScriptLockedTxInsError :: ScriptLockedTxInsError -> Text
renderTxInsExistError :: TxInsExistError -> Text
txInsExistInUTxO :: [TxIn] -> UTxO era -> Either TxInsExistError ()
determineEra :: ConsensusModeParams mode -> LocalNodeConnectInfo mode -> IO (Either AcquiringFailure AnyCardanoEra)
executeQueryCardanoMode :: CardanoEra era -> NetworkId -> QueryInMode CardanoMode (Either EraMismatch result) -> IO (Either QueryConvenienceError result)
queryStateForBalancedTx :: CardanoEra era -> NetworkId -> [TxIn] -> IO (Either QueryConvenienceError (UTxO era, ProtocolParameters, EraHistory CardanoMode, SystemStart, Set PoolId))
renderQueryConvenienceError :: QueryConvenienceError -> Text
deserialiseAnyVerificationKey :: ByteString -> Either InputDecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyBech32 :: ByteString -> Either Bech32DecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyTextEnvelope :: ByteString -> Either TextEnvelopeError SomeAddressVerificationKey
deserialiseInput :: AsType a -> NonEmpty (InputFormat a) -> ByteString -> Either InputDecodeError a
deserialiseInputAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> ByteString -> Either InputDecodeError b
renderInputDecodeError :: InputDecodeError -> Text
renderSomeAddressVerificationKey :: SomeAddressVerificationKey -> Text
readEnvSocketPath :: IO (Either EnvSocketError SocketPath)
renderEnvSocketError :: EnvSocketError -> Text
anyCardanoEra :: CardanoEra era -> AnyCardanoEra
cardanoEraStyle :: CardanoEra era -> CardanoEraStyle era
shelleyBasedToCardanoEra :: ShelleyBasedEra era -> CardanoEra era
throwErrorAsException :: Error e => e -> IO a
calculateMinimumUTxO :: ShelleyBasedEra era -> TxOut CtxTx era -> BundledProtocolParameters era -> Either MinimumUTxOError Lovelace
estimateTransactionFee :: IsShelleyBasedEra era => NetworkId -> Natural -> Natural -> Tx era -> Int -> Int -> Int -> Int -> Lovelace
estimateTransactionKeyWitnessCount :: TxBodyContent BuildTx era -> Word
evaluateTransactionBalance :: IsShelleyBasedEra era => BundledProtocolParameters era -> Set PoolId -> UTxO era -> TxBody era -> TxOutValue era
evaluateTransactionExecutionUnits :: SystemStart -> LedgerEpochInfo -> BundledProtocolParameters era -> UTxO era -> TxBody era -> Either TransactionValidityError (Map ScriptWitnessIndex (Either ScriptExecutionError ExecutionUnits))
evaluateTransactionFee :: IsShelleyBasedEra era => BundledProtocolParameters era -> TxBody era -> Word -> Word -> Lovelace
makeTransactionBodyAutoBalance :: IsShelleyBasedEra era => SystemStart -> LedgerEpochInfo -> ProtocolParameters -> Set PoolId -> UTxO era -> TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> Either TxBodyErrorAutoBalance (BalancedTxBody era)
mapTxScriptWitnesses :: (forall witctx. () => ScriptWitnessIndex -> ScriptWitness witctx era -> Either TxBodyErrorAutoBalance (ScriptWitness witctx era)) -> TxBodyContent BuildTx era -> Either TxBodyErrorAutoBalance (TxBodyContent BuildTx era)
transactionFee :: IsShelleyBasedEra era => Natural -> Natural -> Tx era -> Lovelace
writeByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeLazyByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeTextFile :: MonadIO m => FilePath -> Text -> m (Either (FileError ()) ())
writeTextFileWithOwnerPermissions :: FilePath -> Text -> IO (Either (FileError ()) ())
writeTextOutput :: MonadIO m => Maybe FilePath -> Text -> m (Either (FileError ()) ())
connectToLocalNode :: LocalNodeConnectInfo mode -> LocalNodeClientProtocolsInMode mode -> IO ()
connectToLocalNodeWithVersion :: LocalNodeConnectInfo mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> IO ()
consensusModeOnly :: ConsensusModeParams mode -> ConsensusMode mode
getLocalChainTip :: LocalNodeConnectInfo mode -> IO ChainTip
mkLocalNodeClientParams :: ConsensusBlockForMode mode ~ block => ConsensusModeParams mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> LocalNodeClientParams
queryNodeLocalState :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> QueryInMode mode result -> IO (Either AcquiringFailure result)
queryTxMonitoringLocal :: LocalNodeConnectInfo mode -> LocalTxMonitoringQuery mode -> IO (LocalTxMonitoringResult mode)
submitTxToNodeLocal :: LocalNodeConnectInfo mode -> TxInMode mode -> IO (SubmitResult (TxValidationErrorInMode mode))
determineEraExpr :: ConsensusModeParams mode -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError AnyCardanoEra)
executeLocalStateQueryExpr :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> LocalStateQueryExpr (BlockInMode mode) ChainPoint (QueryInMode mode) () IO a -> IO (Either AcquiringFailure a)
queryExpr :: QueryInMode mode a -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError a)
generateInsecureSigningKey :: (Key keyrole, SerialiseAsRawBytes (SigningKey keyrole)) => StdGen -> AsType keyrole -> IO (SigningKey keyrole, StdGen)
generateSigningKey :: Key keyrole => AsType keyrole -> IO (SigningKey keyrole)
readKeyFile :: AsType a -> NonEmpty (InputFormat a) -> FilePath -> IO (Either (FileError InputDecodeError) a)
readKeyFileAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError InputDecodeError) b)
readKeyFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError InputDecodeError) a)
applyBlock :: Env -> LedgerState -> ValidationMode -> Block era -> Either LedgerStateError (LedgerState, [LedgerEvent])
chainSyncClientPipelinedWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClientPipelined (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClientPipelined (BlockInMode CardanoMode) ChainPoint ChainTip m a
chainSyncClientWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClient (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClient (BlockInMode CardanoMode) ChainPoint ChainTip m a
decodeLedgerState :: Decoder s LedgerState
encodeLedgerState :: LedgerState -> Encoding
envSecurityParam :: Env -> Word64
foldBlocks :: FilePath -> FilePath -> ValidationMode -> a -> (Env -> LedgerState -> [LedgerEvent] -> BlockInMode CardanoMode -> a -> IO a) -> ExceptT FoldBlocksError IO a
initialLedgerState :: FilePath -> ExceptT InitialLedgerStateError IO (Env, LedgerState)
renderFoldBlocksError :: FoldBlocksError -> Text
renderGenesisConfigError :: GenesisConfigError -> Text
renderInitialLedgerStateError :: InitialLedgerStateError -> Text
renderLedgerStateError :: LedgerStateError -> Text
renderMode :: AnyConsensusMode -> Text
toEraInMode :: CardanoEra era -> ConsensusMode mode -> Maybe (EraInMode era mode)
fromNetworkMagic :: NetworkMagic -> NetworkId
toNetworkMagic :: NetworkId -> NetworkMagic
getHotKey :: OperationalCertificate -> VerificationKey KesKey
getKesPeriod :: OperationalCertificate -> Word
getOpCertCount :: OperationalCertificate -> Word64
issueOperationalCertificate :: VerificationKey KesKey -> Either (SigningKey StakePoolKey) (SigningKey GenesisDelegateExtendedKey) -> KESPeriod -> OperationalCertificateIssueCounter -> Either OperationalCertIssueError (OperationalCertificate, OperationalCertificateIssueCounter)
bundleProtocolParams :: CardanoEra era -> ProtocolParameters -> BundledProtocolParameters era
fromLedgerPParams :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> ProtocolParameters
makePraosNonce :: ByteString -> PraosNonce
makeShelleyUpdateProposal :: ProtocolParametersUpdate -> [Hash GenesisKey] -> EpochNo -> UpdateProposal
toLedgerPParams :: ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era)
unbundleProtocolParams :: BundledProtocolParameters era -> ProtocolParameters
validateCostModel :: PlutusScriptVersion lang -> CostModel -> Either InvalidCostModel ()
getProgress :: SlotNo -> EraHistory mode -> Either PastHorizonException (RelativeTime, SlotLength)
slotToEpoch :: SlotNo -> EraHistory mode -> Either PastHorizonException (EpochNo, SlotsInEpoch, SlotsToEpochEnd)
toLedgerEpochInfo :: EraHistory mode -> LedgerEpochInfo
eraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era
eraOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ShelleyBasedEra era
examplePlutusScriptAlwaysFails :: WitCtx witctx -> PlutusScript PlutusScriptV1
examplePlutusScriptAlwaysSucceeds :: WitCtx witctx -> PlutusScript PlutusScriptV1
hashScript :: Script lang -> ScriptHash
languageOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ScriptLanguage lang
scriptWitnessScript :: ScriptWitness witctx era -> Maybe (ScriptInEra era)
toScriptInAnyLang :: Script lang -> ScriptInAnyLang
toScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)
getOriginalScriptDataBytes :: HashableScriptData -> ByteString
getScriptData :: HashableScriptData -> ScriptData
hashScriptData :: HashableScriptData -> Hash ScriptData
hashScriptDataBytes :: HashableScriptData -> Hash ScriptData
scriptDataFromJson :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonError HashableScriptData
scriptDataJsonToHashable :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonBytesError HashableScriptData
scriptDataToJson :: ScriptDataJsonSchema -> HashableScriptData -> Value
unsafeHashableScriptData :: ScriptData -> HashableScriptData
validateScriptData :: ScriptData -> Either ScriptDataRangeError ()
deserialiseAnyOfFromBech32 :: [FromSomeType SerialiseAsBech32 b] -> Text -> Either Bech32DecodeError b
deserialiseFromBech32 :: SerialiseAsBech32 a => AsType a -> Text -> Either Bech32DecodeError a
serialiseToBech32 :: SerialiseAsBech32 a => a -> Text
deserialiseFromJSON :: FromJSON a => AsType a -> ByteString -> Either JsonDecodeError a
prettyPrintJSON :: ToJSON a => a -> ByteString
readFileJSON :: FromJSON a => AsType a -> FilePath -> IO (Either (FileError JsonDecodeError) a)
serialiseToJSON :: ToJSON a => a -> ByteString
writeFileJSON :: ToJSON a => FilePath -> a -> IO (Either (FileError ()) ())
deserialiseFromTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> TextEnvelopeCddl -> Either TextEnvelopeCddlError b
deserialiseTxLedgerCddl :: IsCardanoEra era => CardanoEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (Tx era)
deserialiseWitnessLedgerCddl :: ShelleyBasedEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (KeyWitness era)
readFileTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> FilePath -> IO (Either (FileError TextEnvelopeCddlError) b)
serialiseTxLedgerCddl :: IsCardanoEra era => Tx era -> TextEnvelopeCddl
serialiseWitnessLedgerCddl :: ShelleyBasedEra era -> KeyWitness era -> TextEnvelopeCddl
writeTxFileTextEnvelopeCddl :: IsCardanoEra era => FilePath -> Tx era -> IO (Either (FileError ()) ())
writeTxWitnessFileTextEnvelopeCddl :: ShelleyBasedEra era -> FilePath -> KeyWitness era -> IO (Either (FileError ()) ())
deserialiseFromRawBytesHex :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either RawBytesHexError a
eitherDeserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
serialiseToRawBytesHex :: SerialiseAsRawBytes a => a -> ByteString
serialiseToRawBytesHexText :: SerialiseAsRawBytes a => a -> Text
deserialiseFromTextEnvelope :: HasTextEnvelope a => AsType a -> TextEnvelope -> Either TextEnvelopeError a
deserialiseFromTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> TextEnvelope -> Either TextEnvelopeError b
readFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError TextEnvelopeError) a)
readFileTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError TextEnvelopeError) b)
readTextEnvelopeFromFile :: FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
readTextEnvelopeOfTypeFromFile :: TextEnvelopeType -> FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
serialiseToTextEnvelope :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> TextEnvelope
textEnvelopeRawCBOR :: TextEnvelope -> ByteString
textEnvelopeToJSON :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> ByteString
writeFileTextEnvelope :: HasTextEnvelope a => FilePath -> Maybe TextEnvelopeDescr -> a -> IO (Either (FileError ()) ())
validateAndHashStakePoolMetadata :: ByteString -> Either StakePoolMetadataValidationError (StakePoolMetadata, Hash StakePoolMetadata)
getTxBody :: Tx era -> TxBody era
getTxWitnesses :: Tx era -> [KeyWitness era]
makeByronKeyWitness :: IsByronKey key => NetworkId -> TxBody ByronEra -> SigningKey key -> KeyWitness ByronEra
makeShelleyBootstrapWitness :: IsShelleyBasedEra era => WitnessNetworkIdOrByronAddress -> TxBody era -> SigningKey ByronKey -> KeyWitness era
makeShelleyKeyWitness :: IsShelleyBasedEra era => TxBody era -> ShelleyWitnessSigningKey -> KeyWitness era
makeSignedTransaction :: [KeyWitness era] -> TxBody era -> Tx era
signByronTransaction :: NetworkId -> TxBody ByronEra -> [SigningKey ByronKey] -> Tx ByronEra
signShelleyTransaction :: IsShelleyBasedEra era => TxBody era -> [ShelleyWitnessSigningKey] -> Tx era
addTxIn :: (TxIn, BuildTxWith build (Witness WitCtxTxIn era)) -> TxBodyContent build era -> TxBodyContent build era
addTxOut :: TxOut CtxTx era -> TxBodyContent build era -> TxBodyContent build era
auxScriptsSupportedInEra :: CardanoEra era -> Maybe (AuxScriptsSupportedInEra era)
certificatesSupportedInEra :: CardanoEra era -> Maybe (CertificatesSupportedInEra era)
collateralSupportedInEra :: CardanoEra era -> Maybe (CollateralSupportedInEra era)
collectTxBodyScriptWitnesses :: TxBodyContent BuildTx era -> [(ScriptWitnessIndex, AnyScriptWitness era)]
createAndValidateTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
defaultTxBodyContent :: IsCardanoEra era => TxBodyContent BuildTx era
defaultTxFee :: IsCardanoEra era => TxFee era
defaultTxValidityUpperBound :: IsCardanoEra era => TxValidityUpperBound era
extraKeyWitnessesSupportedInEra :: CardanoEra era -> Maybe (TxExtraKeyWitnessesSupportedInEra era)
fromLedgerTxOuts :: ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxBodyScriptData era -> [TxOut CtxTx era]
genesisUTxOPseudoTxIn :: NetworkId -> Hash GenesisUTxOKey -> TxIn
getTxId :: TxBody era -> TxId
lovelaceToTxOutValue :: IsCardanoEra era => Lovelace -> TxOutValue era
makeTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
modTxIns :: (TxIns build era -> TxIns build era) -> TxBodyContent build era -> TxBodyContent build era
modTxOuts :: ([TxOut CtxTx era] -> [TxOut CtxTx era]) -> TxBodyContent build era -> TxBodyContent build era
parseHash :: SerialiseAsRawBytes (Hash a) => AsType (Hash a) -> Parser (Hash a)
renderScriptWitnessIndex :: ScriptWitnessIndex -> String
scriptValidityToTxScriptValidity :: ShelleyBasedEra era -> ScriptValidity -> TxScriptValidity era
setTxAuxScripts :: TxAuxScripts era -> TxBodyContent build era -> TxBodyContent build era
setTxCertificates :: TxCertificates build era -> TxBodyContent build era -> TxBodyContent build era
setTxExtraKeyWits :: TxExtraKeyWitnesses era -> TxBodyContent build era -> TxBodyContent build era
setTxFee :: TxFee era -> TxBodyContent build era -> TxBodyContent build era
setTxIns :: TxIns build era -> TxBodyContent build era -> TxBodyContent build era
setTxInsCollateral :: TxInsCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxInsReference :: TxInsReference build era -> TxBodyContent build era -> TxBodyContent build era
setTxMetadata :: TxMetadataInEra era -> TxBodyContent build era -> TxBodyContent build era
setTxMintValue :: TxMintValue build era -> TxBodyContent build era -> TxBodyContent build era
setTxOuts :: [TxOut CtxTx era] -> TxBodyContent build era -> TxBodyContent build era
setTxProtocolParams :: BuildTxWith build (Maybe ProtocolParameters) -> TxBodyContent build era -> TxBodyContent build era
setTxReturnCollateral :: TxReturnCollateral CtxTx era -> TxBodyContent build era -> TxBodyContent build era
setTxScriptValidity :: TxScriptValidity era -> TxBodyContent build era -> TxBodyContent build era
setTxTotalCollateral :: TxTotalCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxUpdateProposal :: TxUpdateProposal era -> TxBodyContent build era -> TxBodyContent build era
setTxValidityRange :: (TxValidityLowerBound era, TxValidityUpperBound era) -> TxBodyContent build era -> TxBodyContent build era
setTxWithdrawals :: TxWithdrawals build era -> TxBodyContent build era -> TxBodyContent build era
toCtxUTxOTxOut :: TxOut CtxTx era -> TxOut CtxUTxO era
totalAndReturnCollateralSupportedInEra :: CardanoEra era -> Maybe (TxTotalAndReturnCollateralSupportedInEra era)
txFeesExplicitInEra :: CardanoEra era -> Either (TxFeesImplicitInEra era) (TxFeesExplicitInEra era)
txMetadataSupportedInEra :: CardanoEra era -> Maybe (TxMetadataSupportedInEra era)
txOutValueToLovelace :: TxOutValue era -> Lovelace
txOutValueToValue :: TxOutValue era -> Value
txScriptValiditySupportedInCardanoEra :: CardanoEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValiditySupportedInShelleyBasedEra :: ShelleyBasedEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValidityToScriptValidity :: TxScriptValidity era -> ScriptValidity
updateProposalSupportedInEra :: CardanoEra era -> Maybe (UpdateProposalSupportedInEra era)
validityLowerBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityLowerBoundSupportedInEra era)
validityNoUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityNoUpperBoundSupportedInEra era)
validityUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityUpperBoundSupportedInEra era)
withdrawalsSupportedInEra :: CardanoEra era -> Maybe (WithdrawalsSupportedInEra era)
renderTxIn :: TxIn -> Text
makeTransactionMetadata :: Map Word64 TxMetadataValue -> TxMetadata
metadataFromJson :: TxMetadataJsonSchema -> Value -> Either TxMetadataJsonError TxMetadata
metadataToJson :: TxMetadataJsonSchema -> TxMetadata -> Value
metadataValueToJsonNoSchema :: TxMetadataValue -> Value
validateTxMetadata :: TxMetadata -> Either [(Word64, TxMetadataRangeError)] ()
bounded :: (Bounded a, Integral a, Show a) => String -> ReadM a
parseFilePath :: String -> String -> Parser FilePath
renderEra :: AnyCardanoEra -> Text
runParsecParser :: Parser a -> Text -> Parser a
textShow :: Show a => a -> Text
writeSecrets :: FilePath -> [Char] -> [Char] -> (a -> ByteString) -> [a] -> IO ()
filterValue :: (AssetId -> Bool) -> Value -> Value
lovelaceToQuantity :: Lovelace -> Quantity
lovelaceToValue :: Lovelace -> Value
negateValue :: Value -> Value
quantityToLovelace :: Quantity -> Lovelace
renderValue :: Value -> Text
renderValuePretty :: Value -> Text
scriptPolicyId :: Script lang -> PolicyId
selectAsset :: Value -> AssetId -> Quantity
selectLovelace :: Value -> Lovelace
valueFromList :: [(AssetId, Quantity)] -> Value
valueFromNestedRep :: ValueNestedRep -> Value
valueToList :: Value -> [(AssetId, Quantity)]
valueToLovelace :: Value -> Maybe Lovelace
valueToNestedRep :: Value -> ValueNestedRep
parseValue :: Parser Value
policyId :: Parser PolicyId
class FromJSON a
class ToJSON a
data Address addrtype
[ShelleyAddress] :: Network -> PaymentCredential StandardCrypto -> StakeReference StandardCrypto -> Address ShelleyAddr
data AddressAny
AddressByron :: !Address ByronAddr -> AddressAny
AddressShelley :: !Address ShelleyAddr -> AddressAny
data AddressInEra era
[AddressInEra] :: forall addrtype era. AddressTypeInEra addrtype era -> Address addrtype -> AddressInEra era
data AddressTypeInEra addrtype era
[ByronAddressInAnyEra] :: forall era. AddressTypeInEra ByronAddr era
[ShelleyAddressInEra] :: forall era. ShelleyBasedEra era -> AddressTypeInEra ShelleyAddr era
data ByronAddr
data PaymentCredential
PaymentCredentialByKey :: Hash PaymentKey -> PaymentCredential
PaymentCredentialByScript :: ScriptHash -> PaymentCredential
class HasTypeProxy addr => SerialiseAddress addr
serialiseAddress :: SerialiseAddress addr => addr -> Text
deserialiseAddress :: SerialiseAddress addr => AsType addr -> Text -> Maybe addr
data ShelleyAddr
data StakeAddress
[StakeAddress] :: Network -> StakeCredential StandardCrypto -> StakeAddress
newtype StakeAddressPointer
StakeAddressPointer :: Ptr -> StakeAddressPointer
[unStakeAddressPointer] :: StakeAddressPointer -> Ptr
data StakeAddressReference
StakeAddressByValue :: StakeCredential -> StakeAddressReference
StakeAddressByPointer :: StakeAddressPointer -> StakeAddressReference
NoStakeAddress :: StakeAddressReference
data StakeCredential
StakeCredentialByKey :: Hash StakeKey -> StakeCredential
StakeCredentialByScript :: ScriptHash -> StakeCredential
data Block era
pattern Block :: BlockHeader -> [Tx era] -> Block era
data BlockHeader
BlockHeader :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> BlockHeader
data BlockInMode mode
[BlockInMode] :: forall era mode. IsCardanoEra era => Block era -> EraInMode era mode -> BlockInMode mode
data ChainPoint
ChainPointAtGenesis :: ChainPoint
ChainPoint :: !SlotNo -> !Hash BlockHeader -> ChainPoint
data ChainTip
ChainTipAtGenesis :: ChainTip
ChainTip :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> ChainTip
data Certificate
StakeAddressRegistrationCertificate :: StakeCredential -> Certificate
StakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
StakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
StakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
StakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
GenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
MIRCertificate :: MIRPot -> MIRTarget -> Certificate
data MIRTarget
StakeAddressesMIR :: [(StakeCredential, Lovelace)] -> MIRTarget
SendToReservesMIR :: Lovelace -> MIRTarget
SendToTreasuryMIR :: Lovelace -> MIRTarget
data StakePoolMetadataReference
StakePoolMetadataReference :: Text -> Hash StakePoolMetadata -> StakePoolMetadataReference
[stakePoolMetadataURL] :: StakePoolMetadataReference -> Text
[stakePoolMetadataHash] :: StakePoolMetadataReference -> Hash StakePoolMetadata
data StakePoolParameters
StakePoolParameters :: PoolId -> Hash VrfKey -> Lovelace -> Rational -> StakeAddress -> Lovelace -> [Hash StakeKey] -> [StakePoolRelay] -> Maybe StakePoolMetadataReference -> StakePoolParameters
[stakePoolId] :: StakePoolParameters -> PoolId
[stakePoolVRF] :: StakePoolParameters -> Hash VrfKey
[stakePoolCost] :: StakePoolParameters -> Lovelace
[stakePoolMargin] :: StakePoolParameters -> Rational
[stakePoolRewardAccount] :: StakePoolParameters -> StakeAddress
[stakePoolPledge] :: StakePoolParameters -> Lovelace
[stakePoolOwners] :: StakePoolParameters -> [Hash StakeKey]
[stakePoolRelays] :: StakePoolParameters -> [StakePoolRelay]
[stakePoolMetadata] :: StakePoolParameters -> Maybe StakePoolMetadataReference
data StakePoolRelay
StakePoolRelayIp :: Maybe IPv4 -> Maybe IPv6 -> Maybe PortNumber -> StakePoolRelay
StakePoolRelayDnsARecord :: ByteString -> Maybe PortNumber -> StakePoolRelay
StakePoolRelayDnsSrvRecord :: ByteString -> StakePoolRelay
newtype ScriptLockedTxInsError
ScriptLockedTxIns :: [TxIn] -> ScriptLockedTxInsError
data TxInsExistError
TxInsDoNotExist :: [TxIn] -> TxInsExistError
EmptyUTxO :: TxInsExistError
data QueryConvenienceError
AcqFailure :: AcquiringFailure -> QueryConvenienceError
SockErr :: EnvSocketError -> QueryConvenienceError
QueryEraMismatch :: EraMismatch -> QueryConvenienceError
ByronEraNotSupported :: QueryConvenienceError
EraConsensusModeMismatch :: !AnyConsensusMode -> !AnyCardanoEra -> QueryConvenienceError
data InputDecodeError
InputTextEnvelopeError :: !TextEnvelopeError -> InputDecodeError
InputBech32DecodeError :: !Bech32DecodeError -> InputDecodeError
InputInvalidError :: InputDecodeError
data InputFormat a
[InputFormatBech32] :: forall a. SerialiseAsBech32 a => InputFormat a
[InputFormatHex] :: forall a. SerialiseAsRawBytes a => InputFormat a
[InputFormatTextEnvelope] :: forall a. HasTextEnvelope a => InputFormat a
data SomeAddressVerificationKey
AByronVerificationKey :: VerificationKey ByronKey -> SomeAddressVerificationKey
APaymentVerificationKey :: VerificationKey PaymentKey -> SomeAddressVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeAddressVerificationKey
AGenesisUTxOVerificationKey :: VerificationKey GenesisUTxOKey -> SomeAddressVerificationKey
AGenesisExtendedVerificationKey :: VerificationKey GenesisExtendedKey -> SomeAddressVerificationKey
AGenesisDelegateExtendedVerificationKey :: VerificationKey GenesisDelegateExtendedKey -> SomeAddressVerificationKey
AKesVerificationKey :: VerificationKey KesKey -> SomeAddressVerificationKey
AVrfVerificationKey :: VerificationKey VrfKey -> SomeAddressVerificationKey
AStakeVerificationKey :: VerificationKey StakeKey -> SomeAddressVerificationKey
AStakeExtendedVerificationKey :: VerificationKey StakeExtendedKey -> SomeAddressVerificationKey
newtype EnvSocketError
CliEnvVarLookup :: Text -> EnvSocketError
newtype SocketPath
SocketPath :: FilePath -> SocketPath
[unSocketPath] :: SocketPath -> FilePath
class EraCast (f :: Type -> Type)
eraCast :: (EraCast f, IsCardanoEra fromEra, IsCardanoEra toEra) => CardanoEra toEra -> f fromEra -> Either EraCastError (f toEra)
data EraCastError
EraCastError :: value -> CardanoEra fromEra -> CardanoEra toEra -> EraCastError
[originalValue] :: EraCastError -> value
[fromEra] :: EraCastError -> CardanoEra fromEra
[toEra] :: EraCastError -> CardanoEra toEra
type Allegra = AllegraEra
data AllegraEra
data AlonzoEra
data AnyCardanoEra
[AnyCardanoEra] :: forall era. IsCardanoEra era => CardanoEra era -> AnyCardanoEra
data BabbageEra
type Byron = ByronEra
data ByronEra
data CardanoEra era
[ByronEra] :: CardanoEra ByronEra
[ShelleyEra] :: CardanoEra ShelleyEra
[AllegraEra] :: CardanoEra AllegraEra
[MaryEra] :: CardanoEra MaryEra
[AlonzoEra] :: CardanoEra AlonzoEra
[BabbageEra] :: CardanoEra BabbageEra
[ConwayEra] :: CardanoEra ConwayEra
data CardanoEraStyle era
[LegacyByronEra] :: CardanoEraStyle ByronEra
[ShelleyBasedEra] :: forall era. IsShelleyBasedEra era => ShelleyBasedEra era -> CardanoEraStyle era
data ConwayEra
data InAnyCardanoEra (thing :: Type -> Type)
[InAnyCardanoEra] :: forall era (thing :: Type -> Type). IsCardanoEra era => CardanoEra era -> thing era -> InAnyCardanoEra thing
data InAnyShelleyBasedEra (thing :: Type -> Type)
[InAnyShelleyBasedEra] :: forall era (thing :: Type -> Type). IsShelleyBasedEra era => ShelleyBasedEra era -> thing era -> InAnyShelleyBasedEra thing
class HasTypeProxy era => IsCardanoEra era
cardanoEra :: IsCardanoEra era => CardanoEra era
class IsCardanoEra era => IsShelleyBasedEra era
shelleyBasedEra :: IsShelleyBasedEra era => ShelleyBasedEra era
type Mary = MaryEra
data MaryEra
type Shelley = ShelleyEra
data ShelleyBasedEra era
[ShelleyBasedEraShelley] :: ShelleyBasedEra ShelleyEra
[ShelleyBasedEraAllegra] :: ShelleyBasedEra AllegraEra
[ShelleyBasedEraMary] :: ShelleyBasedEra MaryEra
[ShelleyBasedEraAlonzo] :: ShelleyBasedEra AlonzoEra
[ShelleyBasedEraBabbage] :: ShelleyBasedEra BabbageEra
[ShelleyBasedEraConway] :: ShelleyBasedEra ConwayEra
data ShelleyEra
class Show e => Error e
displayError :: Error e => e -> String
data FileError e
FileError :: FilePath -> e -> FileError e
FileErrorTempFile :: FilePath -> FilePath -> Handle -> FileError e
FileIOError :: FilePath -> IOException -> FileError e
data BalancedTxBody era
BalancedTxBody :: TxBodyContent BuildTx era -> TxBody era -> TxOut CtxTx era -> Lovelace -> BalancedTxBody era
data MinimumUTxOError
data ScriptExecutionError
ScriptErrorMissingTxIn :: TxIn -> ScriptExecutionError
ScriptErrorTxInWithoutDatum :: TxIn -> ScriptExecutionError
ScriptErrorWrongDatum :: Hash ScriptData -> ScriptExecutionError
ScriptErrorEvaluationFailed :: EvaluationError -> [Text] -> ScriptExecutionError
ScriptErrorExecutionUnitsOverflow :: ScriptExecutionError
ScriptErrorNotPlutusWitnessedTxIn :: ScriptWitnessIndex -> ScriptHash -> ScriptExecutionError
ScriptErrorRedeemerPointsToUnknownScriptHash :: ScriptWitnessIndex -> ScriptExecutionError
ScriptErrorMissingScript :: RdmrPtr -> ResolvablePointers -> ScriptExecutionError
ScriptErrorMissingCostModel :: Language -> ScriptExecutionError
data TransactionValidityError
TransactionValidityIntervalError :: PastHorizonException -> TransactionValidityError
TransactionValidityTranslationError :: TranslationError StandardCrypto -> TransactionValidityError
TransactionValidityCostModelError :: Map AnyPlutusScriptVersion CostModel -> String -> TransactionValidityError
data TxBodyErrorAutoBalance
TxBodyError :: TxBodyError -> TxBodyErrorAutoBalance
TxBodyScriptExecutionError :: [(ScriptWitnessIndex, ScriptExecutionError)] -> TxBodyErrorAutoBalance
TxBodyScriptBadScriptValidity :: TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceNegative :: Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceTooSmall :: TxOutInAnyEra -> Lovelace -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorByronEraNotSupported :: TxBodyErrorAutoBalance
TxBodyErrorMissingParamMinUTxO :: TxBodyErrorAutoBalance
TxBodyErrorValidityInterval :: TransactionValidityError -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxONotMet :: TxOutInAnyEra -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxOMissingPParams :: MinimumUTxOError -> TxBodyErrorAutoBalance
TxBodyErrorNonAdaAssetsUnbalanced :: Value -> TxBodyErrorAutoBalance
TxBodyErrorScriptWitnessIndexMissingFromExecUnitsMap :: ScriptWitnessIndex -> Map ScriptWitnessIndex ExecutionUnits -> TxBodyErrorAutoBalance
data GenesisParameters
GenesisParameters :: UTCTime -> NetworkId -> Rational -> Int -> EpochSize -> NominalDiffTime -> Int -> Int -> Int -> Lovelace -> ProtocolParameters -> GenesisParameters
[protocolParamSystemStart] :: GenesisParameters -> UTCTime
[protocolParamNetworkId] :: GenesisParameters -> NetworkId
[protocolParamActiveSlotsCoefficient] :: GenesisParameters -> Rational
[protocolParamSecurity] :: GenesisParameters -> Int
[protocolParamEpochLength] :: GenesisParameters -> EpochSize
[protocolParamSlotLength] :: GenesisParameters -> NominalDiffTime
[protocolParamSlotsPerKESPeriod] :: GenesisParameters -> Int
[protocolParamMaxKESEvolutions] :: GenesisParameters -> Int
[protocolParamUpdateQuorum] :: GenesisParameters -> Int
[protocolParamMaxLovelaceSupply] :: GenesisParameters -> Lovelace
[protocolInitialUpdateableProtocolParameters] :: GenesisParameters -> ProtocolParameters
data family AsType t
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsShelley :: AsType ShelleyEra
pattern AsMary :: AsType MaryEra
pattern AsConway :: AsType ConwayEra
pattern AsByron :: AsType ByronEra
pattern AsBabbage :: AsType BabbageEra
pattern AsAlonzo :: AsType AlonzoEra
pattern AsAllegra :: AsType AllegraEra
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsByronAddress :: AsType (Address ByronAddr)
data FromSomeType (c :: Type -> Constraint) b
[FromSomeType] :: forall (c :: Type -> Constraint) a b. c a => AsType a -> (a -> b) -> FromSomeType c b
class Typeable t => HasTypeProxy t where {
    data family AsType t;
}
proxyToAsType :: HasTypeProxy t => Proxy t -> AsType t
castHash :: CastHash roleA roleB => Hash roleA -> Hash roleB
data family Hash keyrole
newtype OutputFile
OutputFile :: FilePath -> OutputFile
[unOutputFile] :: OutputFile -> FilePath
data LocalChainSyncClient block point tip (m :: Type -> Type)
NoLocalChainSyncClient :: LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClientPipelined :: ChainSyncClientPipelined block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClient :: ChainSyncClient block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
data LocalNodeClientParams
[LocalNodeClientParamsSingleBlock] :: forall block. (ProtocolClient block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
[LocalNodeClientParamsCardano] :: forall block. (ProtocolClient block, CardanoHardForkConstraints (ConsensusCryptoForBlock block)) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
data LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
[localChainSyncClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> LocalChainSyncClient block point tip m
[localTxSubmissionClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxSubmissionClient tx txerr m ())
[localStateQueryClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalStateQueryClient block point query m ())
[localTxMonitoringClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxMonitorClient txid tx slot m ())
type LocalNodeClientProtocolsInMode mode = LocalNodeClientProtocols BlockInMode mode ChainPoint ChainTip SlotNo TxInMode mode TxIdInMode mode TxValidationErrorInMode mode QueryInMode mode IO
data LocalNodeConnectInfo mode
LocalNodeConnectInfo :: ConsensusModeParams mode -> NetworkId -> FilePath -> LocalNodeConnectInfo mode
[localConsensusModeParams] :: LocalNodeConnectInfo mode -> ConsensusModeParams mode
[localNodeNetworkId] :: LocalNodeConnectInfo mode -> NetworkId
[localNodeSocketPath] :: LocalNodeConnectInfo mode -> FilePath
data LocalTxMonitoringQuery mode
LocalTxMonitoringQueryTx :: TxIdInMode mode -> LocalTxMonitoringQuery mode
LocalTxMonitoringSendNextTx :: LocalTxMonitoringQuery mode
LocalTxMonitoringMempoolInformation :: LocalTxMonitoringQuery mode
data LocalTxMonitoringResult mode
LocalTxMonitoringTxExists :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringTxDoesNotExist :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringNextTx :: Maybe (TxInMode mode) -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringMempoolSizeAndCapacity :: MempoolSizeAndCapacity -> SlotNo -> LocalTxMonitoringResult mode
data LocalStateQueryExpr block point (query :: Type -> Type) r (m :: Type -> Type) a
data UnsupportedNtcVersionError
UnsupportedNtcVersionError :: !MinNodeToClientVersion -> !NodeToClientVersion -> UnsupportedNtcVersionError
data TxIdInMode mode
[TxIdInMode] :: forall era mode. TxId -> EraInMode era mode -> TxIdInMode mode
data TxInMode mode
[TxInMode] :: forall era mode. Tx era -> EraInMode era mode -> TxInMode mode
[TxInByronSpecial] :: forall mode. GenTx ByronBlock -> EraInMode ByronEra mode -> TxInMode mode
data TxValidationErrorInMode mode
[TxValidationErrorInMode] :: forall era mode. TxValidationError era -> EraInMode era mode -> TxValidationErrorInMode mode
[TxValidationEraMismatch] :: forall mode. EraMismatch -> TxValidationErrorInMode mode
data ByronKey
data ByronKeyLegacy
castSigningKey :: CastSigningKeyRole keyroleA keyroleB => SigningKey keyroleA -> SigningKey keyroleB
castVerificationKey :: CastVerificationKeyRole keyroleA keyroleB => VerificationKey keyroleA -> VerificationKey keyroleB
class (Eq VerificationKey keyrole, Show VerificationKey keyrole, SerialiseAsRawBytes Hash keyrole, HasTextEnvelope VerificationKey keyrole, HasTextEnvelope SigningKey keyrole) => Key keyrole where {
    data family VerificationKey keyrole;
    data family SigningKey keyrole;
}
getVerificationKey :: Key keyrole => SigningKey keyrole -> VerificationKey keyrole
deterministicSigningKey :: Key keyrole => AsType keyrole -> Seed -> SigningKey keyrole
deterministicSigningKeySeedSize :: Key keyrole => AsType keyrole -> Word
verificationKeyHash :: Key keyrole => VerificationKey keyrole -> Hash keyrole
data family SigningKey keyrole
data family VerificationKey keyrole
data GenesisDelegateExtendedKey
data GenesisDelegateKey
data GenesisExtendedKey
data GenesisKey
data GenesisUTxOKey
data PaymentExtendedKey
data PaymentKey
data StakeExtendedKey
data StakeKey
toLedgerEvent :: ConvertLedgerEvent blk => WrapLedgerEvent blk -> Maybe LedgerEvent
data LedgerEvent
PoolRegistration :: Certificate -> LedgerEvent
PoolReRegistration :: Certificate -> LedgerEvent
IncrementalRewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
RewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
MIRDistribution :: MIRDistributionDetails -> LedgerEvent
PoolReap :: PoolReapDetails -> LedgerEvent
SuccessfulPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
FailedPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
data MIRDistributionDetails
MIRDistributionDetails :: Map StakeCredential Lovelace -> Map StakeCredential Lovelace -> Lovelace -> Lovelace -> MIRDistributionDetails
[mirddReservePayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddTreasuryPayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddReservesToTreasury] :: MIRDistributionDetails -> Lovelace
[mirddTreasuryToReserves] :: MIRDistributionDetails -> Lovelace
data PoolReapDetails
PoolReapDetails :: EpochNo -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> PoolReapDetails
[prdEpochNo] :: PoolReapDetails -> EpochNo
[prdRefunded] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
[prdUnclaimed] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
data Env
Env :: HardForkLedgerConfig (CardanoEras StandardCrypto) -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto)) -> Env
[envLedgerConfig] :: Env -> HardForkLedgerConfig (CardanoEras StandardCrypto)
[envProtocolConfig] :: Env -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto))
data FoldBlocksError
FoldBlocksInitialLedgerStateError :: InitialLedgerStateError -> FoldBlocksError
FoldBlocksApplyBlockError :: LedgerStateError -> FoldBlocksError
data GenesisConfigError
NEError :: !Text -> GenesisConfigError
NEByronConfig :: !FilePath -> !ConfigurationError -> GenesisConfigError
NEShelleyConfig :: !FilePath -> !Text -> GenesisConfigError
NEAlonzoConfig :: !FilePath -> !Text -> GenesisConfigError
NEConwayConfig :: !FilePath -> !Text -> GenesisConfigError
NECardanoConfig :: !Text -> GenesisConfigError
data InitialLedgerStateError
ILSEConfigFile :: Text -> InitialLedgerStateError
ILSEGenesisFile :: GenesisConfigError -> InitialLedgerStateError
ILSELedgerConsensusConfig :: GenesisConfigError -> InitialLedgerStateError
newtype LedgerState
LedgerState :: LedgerState (HardForkBlock (CardanoEras StandardCrypto)) -> LedgerState
[clsState] :: LedgerState -> LedgerState (HardForkBlock (CardanoEras StandardCrypto))
pattern LedgerStateShelley :: () => LedgerState (ShelleyBlock protocol (ShelleyEra StandardCrypto)) -> LedgerState
pattern LedgerStateMary :: () => LedgerState (ShelleyBlock protocol (MaryEra StandardCrypto)) -> LedgerState
pattern LedgerStateConway :: () => LedgerState (ShelleyBlock protocol (ConwayEra StandardCrypto)) -> LedgerState
pattern LedgerStateByron :: LedgerState ByronBlock -> LedgerState
pattern LedgerStateBabbage :: () => LedgerState (ShelleyBlock protocol (BabbageEra StandardCrypto)) -> LedgerState
pattern LedgerStateAlonzo :: () => LedgerState (ShelleyBlock protocol (AlonzoEra StandardCrypto)) -> LedgerState
pattern LedgerStateAllegra :: () => LedgerState (ShelleyBlock protocol (AllegraEra StandardCrypto)) -> LedgerState
data LedgerStateError
ApplyBlockHashMismatch :: Text -> LedgerStateError
ApplyBlockError :: HardForkLedgerError (CardanoEras StandardCrypto) -> LedgerStateError
InvalidRollback :: SlotNo -> ChainPoint -> LedgerStateError
data ValidationMode
FullValidation :: ValidationMode
QuickValidation :: ValidationMode
data AnyConsensusMode
[AnyConsensusMode] :: forall mode. ConsensusMode mode -> AnyConsensusMode
data AnyConsensusModeParams
[AnyConsensusModeParams] :: forall mode. ConsensusModeParams mode -> AnyConsensusModeParams
data CardanoMode
type family ChainDepStateProtocol era
type family ConsensusBlockForEra era
type family ConsensusBlockForMode mode
data ConsensusMode mode
[ByronMode] :: ConsensusMode ByronMode
[ShelleyMode] :: ConsensusMode ShelleyMode
[CardanoMode] :: ConsensusMode CardanoMode
data ConsensusModeIsMultiEra mode
[CardanoModeIsMultiEra] :: ConsensusModeIsMultiEra CardanoMode
data ConsensusModeParams mode
[ByronModeParams] :: EpochSlots -> ConsensusModeParams ByronMode
[ShelleyModeParams] :: ConsensusModeParams ShelleyMode
[CardanoModeParams] :: EpochSlots -> ConsensusModeParams CardanoMode
type family ConsensusProtocol era
data EraInMode era mode
[ByronEraInByronMode] :: EraInMode ByronEra ByronMode
[ShelleyEraInShelleyMode] :: EraInMode ShelleyEra ShelleyMode
[ByronEraInCardanoMode] :: EraInMode ByronEra CardanoMode
[ShelleyEraInCardanoMode] :: EraInMode ShelleyEra CardanoMode
[AllegraEraInCardanoMode] :: EraInMode AllegraEra CardanoMode
[MaryEraInCardanoMode] :: EraInMode MaryEra CardanoMode
[AlonzoEraInCardanoMode] :: EraInMode AlonzoEra CardanoMode
[BabbageEraInCardanoMode] :: EraInMode BabbageEra CardanoMode
[ConwayEraInCardanoMode] :: EraInMode ConwayEra CardanoMode
data NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
data OperationalCertIssueError
OperationalCertKeyMismatch :: VerificationKey StakePoolKey -> VerificationKey StakePoolKey -> OperationalCertIssueError
data OperationalCertificate
OperationalCertificate :: !OCert StandardCrypto -> !VerificationKey StakePoolKey -> OperationalCertificate
data OperationalCertificateIssueCounter
OperationalCertificateIssueCounter :: !Word64 -> !VerificationKey StakePoolKey -> OperationalCertificateIssueCounter
[opCertIssueCount] :: OperationalCertificateIssueCounter -> !Word64
[opCertIssueColdKey] :: OperationalCertificateIssueCounter -> !VerificationKey StakePoolKey
data BlockType blk
[ByronBlockType] :: BlockType (HardForkBlock '[ByronBlock])
[ShelleyBlockType] :: BlockType (HardForkBlock '[ShelleyBlock (TPraos StandardCrypto) StandardShelley])
[CardanoBlockType] :: BlockType (HardForkBlock (CardanoEras StandardCrypto))
class (RunNode blk, IOLike m) => Protocol (m :: Type -> Type) blk where {
    data family ProtocolInfoArgs (m :: Type -> Type) blk;
}
protocolInfo :: Protocol m blk => ProtocolInfoArgs m blk -> ProtocolInfo m blk
data family ProtocolInfoArgs (m :: Type -> Type) blk
data BundledProtocolParameters era
[BundleAsByronProtocolParameters] :: ProtocolParameters -> BundledProtocolParameters ByronEra
[BundleAsShelleyBasedProtocolParameters] :: forall era. ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era) -> BundledProtocolParameters era
newtype CostModel
CostModel :: Map Text Integer -> CostModel
data ExecutionUnitPrices
ExecutionUnitPrices :: Rational -> Rational -> ExecutionUnitPrices
[priceExecutionSteps] :: ExecutionUnitPrices -> Rational
[priceExecutionMemory] :: ExecutionUnitPrices -> Rational
data PraosNonce
data ProtocolParametersUpdate
ProtocolParametersUpdate :: Maybe (Natural, Natural) -> Maybe Rational -> Maybe (Maybe PraosNonce) -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe EpochNo -> Maybe Natural -> Maybe Rational -> Maybe Rational -> Maybe Rational -> Maybe Lovelace -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParametersUpdate
[protocolUpdateProtocolVersion] :: ProtocolParametersUpdate -> Maybe (Natural, Natural)
[protocolUpdateDecentralization] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateExtraPraosEntropy] :: ProtocolParametersUpdate -> Maybe (Maybe PraosNonce)
[protocolUpdateMaxBlockHeaderSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxBlockBodySize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxTxSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeeFixed] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeePerByte] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMinUTxOValue] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakeAddressDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakePoolDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateMinPoolCost] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdatePoolRetireMaxEpoch] :: ProtocolParametersUpdate -> Maybe EpochNo
[protocolUpdateStakePoolTargetNum] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdatePoolPledgeInfluence] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateMonetaryExpansion] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateTreasuryCut] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateUTxOCostPerWord] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateCostModels] :: ProtocolParametersUpdate -> Map AnyPlutusScriptVersion CostModel
[protocolUpdatePrices] :: ProtocolParametersUpdate -> Maybe ExecutionUnitPrices
[protocolUpdateMaxTxExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxBlockExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxValueSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateCollateralPercent] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxCollateralInputs] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateUTxOCostPerByte] :: ProtocolParametersUpdate -> Maybe Lovelace
data UpdateProposal
UpdateProposal :: !Map (Hash GenesisKey) ProtocolParametersUpdate -> !EpochNo -> UpdateProposal
data EraHistory mode
[EraHistory] :: forall mode (xs :: [Type]). ConsensusBlockForMode mode ~ HardForkBlock xs => ConsensusMode mode -> Interpreter xs -> EraHistory mode
newtype LedgerEpochInfo
LedgerEpochInfo :: EpochInfo (Either Text) -> LedgerEpochInfo
[unLedgerEpochInfo] :: LedgerEpochInfo -> EpochInfo (Either Text)
data QueryInEra era result
[QueryByronUpdateState] :: QueryInEra ByronEra ByronUpdateState
[QueryInShelleyBasedEra] :: forall era result. ShelleyBasedEra era -> QueryInShelleyBasedEra era result -> QueryInEra era result
data QueryInMode mode result
[QueryCurrentEra] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode AnyCardanoEra
[QueryInEra] :: forall era mode result1. EraInMode era mode -> QueryInEra era result1 -> QueryInMode mode (Either EraMismatch result1)
[QueryEraHistory] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode (EraHistory mode)
[QuerySystemStart] :: forall mode. QueryInMode mode SystemStart
[QueryChainBlockNo] :: forall mode. QueryInMode mode (WithOrigin BlockNo)
[QueryChainPoint] :: forall mode. ConsensusMode mode -> QueryInMode mode ChainPoint
data QueryInShelleyBasedEra era result
[QueryEpoch] :: forall era. QueryInShelleyBasedEra era EpochNo
[QueryGenesisParameters] :: forall era. QueryInShelleyBasedEra era GenesisParameters
[QueryProtocolParameters] :: forall era. QueryInShelleyBasedEra era ProtocolParameters
[QueryProtocolParametersUpdate] :: forall era. QueryInShelleyBasedEra era (Map (Hash GenesisKey) ProtocolParametersUpdate)
[QueryStakeDistribution] :: forall era. QueryInShelleyBasedEra era (Map (Hash StakePoolKey) Rational)
[QueryUTxO] :: forall era. QueryUTxOFilter -> QueryInShelleyBasedEra era (UTxO era)
[QueryStakeAddresses] :: forall era. Set StakeCredential -> NetworkId -> QueryInShelleyBasedEra era (Map StakeAddress Lovelace, Map StakeAddress PoolId)
[QueryStakePools] :: forall era. QueryInShelleyBasedEra era (Set PoolId)
[QueryStakePoolParameters] :: forall era. Set PoolId -> QueryInShelleyBasedEra era (Map PoolId StakePoolParameters)
[QueryDebugLedgerState] :: forall era. QueryInShelleyBasedEra era (SerialisedDebugLedgerState era)
[QueryProtocolState] :: forall era. QueryInShelleyBasedEra era (ProtocolState era)
[QueryCurrentEpochState] :: forall era. QueryInShelleyBasedEra era (SerialisedCurrentEpochState era)
[QueryPoolState] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolState era)
[QueryPoolDistribution] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolDistribution era)
[QueryStakeSnapshot] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedStakeSnapshots era)
data QueryUTxOFilter
QueryUTxOWhole :: QueryUTxOFilter
QueryUTxOByAddress :: Set AddressAny -> QueryUTxOFilter
QueryUTxOByTxIn :: Set TxIn -> QueryUTxOFilter
newtype SlotsInEpoch
SlotsInEpoch :: Word64 -> SlotsInEpoch
newtype SlotsToEpochEnd
SlotsToEpochEnd :: Word64 -> SlotsToEpochEnd
unUTxO :: UTxO era -> Map TxIn (TxOut CtxUTxO era)
data AnyPlutusScriptVersion
[AnyPlutusScriptVersion] :: forall lang. PlutusScriptVersion lang -> AnyPlutusScriptVersion
data AnyScriptLanguage
[AnyScriptLanguage] :: forall lang. ScriptLanguage lang -> AnyScriptLanguage
data ExecutionUnits
ExecutionUnits :: Natural -> Natural -> ExecutionUnits
[executionSteps] :: ExecutionUnits -> Natural
[executionMemory] :: ExecutionUnits -> Natural
class IsScriptLanguage lang => IsPlutusScriptLanguage lang
plutusScriptVersion :: IsPlutusScriptLanguage lang => PlutusScriptVersion lang
class HasTypeProxy lang => IsScriptLanguage lang
scriptLanguage :: IsScriptLanguage lang => ScriptLanguage lang
class IsScriptWitnessInCtx ctx
scriptWitnessInCtx :: IsScriptWitnessInCtx ctx => ScriptWitnessInCtx ctx
data KeyWitnessInCtx witctx
[KeyWitnessForSpending] :: KeyWitnessInCtx WitCtxTxIn
[KeyWitnessForStakeAddr] :: KeyWitnessInCtx WitCtxStake
data PlutusScript lang
[PlutusScriptSerialised] :: forall lang. ShortByteString -> PlutusScript lang
data PlutusScriptV1
data PlutusScriptV2
data PlutusScriptVersion lang
[PlutusScriptV1] :: PlutusScriptVersion PlutusScriptV1
[PlutusScriptV2] :: PlutusScriptVersion PlutusScriptV2
data Script lang
[SimpleScript] :: !SimpleScript -> Script SimpleScript'
[PlutusScript] :: forall lang. !PlutusScriptVersion lang -> !PlutusScript lang -> Script lang
data ScriptDatum witctx
[ScriptDatumForTxIn] :: HashableScriptData -> ScriptDatum WitCtxTxIn
[InlineScriptDatum] :: ScriptDatum WitCtxTxIn
[NoScriptDatumForMint] :: ScriptDatum WitCtxMint
[NoScriptDatumForStake] :: ScriptDatum WitCtxStake
data ScriptHash
data ScriptInAnyLang
[ScriptInAnyLang] :: forall lang. ScriptLanguage lang -> Script lang -> ScriptInAnyLang
data ScriptInEra era
[ScriptInEra] :: forall lang era. ScriptLanguageInEra lang era -> Script lang -> ScriptInEra era
data ScriptLanguage lang
[SimpleScriptLanguage] :: ScriptLanguage SimpleScript'
[PlutusScriptLanguage] :: forall lang. PlutusScriptVersion lang -> ScriptLanguage lang
data ScriptLanguageInEra lang era
[SimpleScriptInShelley] :: ScriptLanguageInEra SimpleScript' ShelleyEra
[SimpleScriptInAllegra] :: ScriptLanguageInEra SimpleScript' AllegraEra
[SimpleScriptInMary] :: ScriptLanguageInEra SimpleScript' MaryEra
[SimpleScriptInAlonzo] :: ScriptLanguageInEra SimpleScript' AlonzoEra
[SimpleScriptInBabbage] :: ScriptLanguageInEra SimpleScript' BabbageEra
[SimpleScriptInConway] :: ScriptLanguageInEra SimpleScript' ConwayEra
[PlutusScriptV1InAlonzo] :: ScriptLanguageInEra PlutusScriptV1 AlonzoEra
[PlutusScriptV1InBabbage] :: ScriptLanguageInEra PlutusScriptV1 BabbageEra
[PlutusScriptV1InConway] :: ScriptLanguageInEra PlutusScriptV1 ConwayEra
[PlutusScriptV2InBabbage] :: ScriptLanguageInEra PlutusScriptV2 BabbageEra
[PlutusScriptV2InConway] :: ScriptLanguageInEra PlutusScriptV2 ConwayEra
type ScriptRedeemer = HashableScriptData
data ScriptWitness witctx era
[SimpleScriptWitness] :: forall era witctx. ScriptLanguageInEra SimpleScript' era -> SimpleScriptOrReferenceInput SimpleScript' -> ScriptWitness witctx era
[PlutusScriptWitness] :: forall lang era witctx. ScriptLanguageInEra lang era -> PlutusScriptVersion lang -> PlutusScriptOrReferenceInput lang -> ScriptDatum witctx -> ScriptRedeemer -> ExecutionUnits -> ScriptWitness witctx era
data ScriptWitnessInCtx witctx
[ScriptWitnessForSpending] :: ScriptWitnessInCtx WitCtxTxIn
[ScriptWitnessForMinting] :: ScriptWitnessInCtx WitCtxMint
[ScriptWitnessForStakeAddr] :: ScriptWitnessInCtx WitCtxStake
data SimpleScript
RequireSignature :: !Hash PaymentKey -> SimpleScript
RequireTimeBefore :: !SlotNo -> SimpleScript
RequireTimeAfter :: !SlotNo -> SimpleScript
RequireAllOf :: ![SimpleScript] -> SimpleScript
RequireAnyOf :: ![SimpleScript] -> SimpleScript
RequireMOf :: !Int -> ![SimpleScript] -> SimpleScript
data SimpleScript'
data WitCtx witctx
[WitCtxTxIn] :: WitCtx WitCtxTxIn
[WitCtxMint] :: WitCtx WitCtxMint
[WitCtxStake] :: WitCtx WitCtxStake
data WitCtxMint
data WitCtxStake
data WitCtxTxIn
data Witness witctx era
[KeyWitness] :: forall witctx era. KeyWitnessInCtx witctx -> Witness witctx era
[ScriptWitness] :: forall witctx era. ScriptWitnessInCtx witctx -> ScriptWitness witctx era -> Witness witctx era
data HashableScriptData
data ScriptData
ScriptDataConstructor :: Integer -> [ScriptData] -> ScriptData
ScriptDataMap :: [(ScriptData, ScriptData)] -> ScriptData
ScriptDataList :: [ScriptData] -> ScriptData
ScriptDataNumber :: Integer -> ScriptData
ScriptDataBytes :: ByteString -> ScriptData
data ScriptDataJsonBytesError
data ScriptDataJsonError
ScriptDataJsonSchemaError :: !Value -> !ScriptDataJsonSchemaError -> ScriptDataJsonError
ScriptDataRangeError :: !Value -> !ScriptDataRangeError -> ScriptDataJsonError
data ScriptDataJsonSchema
ScriptDataJsonNoSchema :: ScriptDataJsonSchema
ScriptDataJsonDetailedSchema :: ScriptDataJsonSchema
data ScriptDataJsonSchemaError
ScriptDataJsonNullNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonBoolNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonNumberNotInteger :: !Double -> ScriptDataJsonSchemaError
ScriptDataJsonNotObject :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonBadObject :: ![(Text, Value)] -> ScriptDataJsonSchemaError
ScriptDataJsonBadMapPair :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonTypeMismatch :: !Text -> !Value -> ScriptDataJsonSchemaError
newtype ScriptDataRangeError
ScriptDataConstructorOutOfRange :: Integer -> ScriptDataRangeError
data Bech32DecodeError
Bech32DecodingError :: !DecodingError -> Bech32DecodeError
Bech32UnexpectedPrefix :: !Text -> !Set Text -> Bech32DecodeError
Bech32DataPartToBytesError :: !Text -> Bech32DecodeError
Bech32DeserialiseFromBytesError :: !ByteString -> Bech32DecodeError
Bech32WrongPrefix :: !Text -> !Text -> Bech32DecodeError
class (HasTypeProxy a, SerialiseAsRawBytes a) => SerialiseAsBech32 a
class HasTypeProxy a => SerialiseAsCBOR a
serialiseToCBOR :: SerialiseAsCBOR a => a -> ByteString
deserialiseFromCBOR :: SerialiseAsCBOR a => AsType a -> ByteString -> Either DecoderError a
newtype JsonDecodeError
JsonDecodeError :: String -> JsonDecodeError
data FromSomeTypeCDDL c b
[FromCDDLTx] :: forall b. Text -> (InAnyCardanoEra Tx -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
[FromCDDLWitness] :: forall b. Text -> (InAnyCardanoEra KeyWitness -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
data TextEnvelopeCddl
TextEnvelopeCddl :: !Text -> !Text -> !ByteString -> TextEnvelopeCddl
[teCddlType] :: TextEnvelopeCddl -> !Text
[teCddlDescription] :: TextEnvelopeCddl -> !Text
[teCddlRawCBOR] :: TextEnvelopeCddl -> !ByteString
data TextEnvelopeCddlError
TextEnvelopeCddlErrCBORDecodingError :: DecoderError -> TextEnvelopeCddlError
TextEnvelopeCddlAesonDecodeError :: FilePath -> String -> TextEnvelopeCddlError
TextEnvelopeCddlUnknownKeyWitness :: TextEnvelopeCddlError
TextEnvelopeCddlTypeError :: [Text] -> Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrUnknownType :: Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrByronKeyWitnessUnsupported :: TextEnvelopeCddlError
data RawBytesHexError
RawBytesHexErrorBase16DecodeFail :: ByteString -> String -> RawBytesHexError
RawBytesHexErrorRawBytesDecodeFail :: ByteString -> TypeRep -> SerialiseAsRawBytesError -> RawBytesHexError
class (HasTypeProxy a, Typeable a) => SerialiseAsRawBytes a
serialiseToRawBytes :: SerialiseAsRawBytes a => a -> ByteString
deserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
class SerialiseAsCBOR a => HasTextEnvelope a
textEnvelopeType :: HasTextEnvelope a => AsType a -> TextEnvelopeType
textEnvelopeDefaultDescr :: HasTextEnvelope a => a -> TextEnvelopeDescr
data TextEnvelope
TextEnvelope :: !TextEnvelopeType -> !TextEnvelopeDescr -> !ByteString -> TextEnvelope
[teType] :: TextEnvelope -> !TextEnvelopeType
[teDescription] :: TextEnvelope -> !TextEnvelopeDescr
[teRawCBOR] :: TextEnvelope -> !ByteString
data TextEnvelopeDescr
data TextEnvelopeError
TextEnvelopeTypeError :: ![TextEnvelopeType] -> !TextEnvelopeType -> TextEnvelopeError
TextEnvelopeDecodeError :: !DecoderError -> TextEnvelopeError
TextEnvelopeAesonDecodeError :: !String -> TextEnvelopeError
newtype TextEnvelopeType
TextEnvelopeType :: String -> TextEnvelopeType
data StakePoolMetadata
StakePoolMetadata :: !Text -> !Text -> !Text -> !Text -> StakePoolMetadata
[stakePoolName] :: StakePoolMetadata -> !Text
[stakePoolDescription] :: StakePoolMetadata -> !Text
[stakePoolTicker] :: StakePoolMetadata -> !Text
[stakePoolHomepage] :: StakePoolMetadata -> !Text
data StakePoolMetadataValidationError
data KeyWitness era
[ShelleyBootstrapWitness] :: forall era. ShelleyBasedEra era -> BootstrapWitness StandardCrypto -> KeyWitness era
[ShelleyKeyWitness] :: forall era. ShelleyBasedEra era -> WitVKey 'Witness StandardCrypto -> KeyWitness era
data ShelleyWitnessSigningKey
WitnessPaymentKey :: SigningKey PaymentKey -> ShelleyWitnessSigningKey
WitnessPaymentExtendedKey :: SigningKey PaymentExtendedKey -> ShelleyWitnessSigningKey
WitnessStakeKey :: SigningKey StakeKey -> ShelleyWitnessSigningKey
WitnessStakeExtendedKey :: SigningKey StakeExtendedKey -> ShelleyWitnessSigningKey
WitnessStakePoolKey :: SigningKey StakePoolKey -> ShelleyWitnessSigningKey
WitnessGenesisKey :: SigningKey GenesisKey -> ShelleyWitnessSigningKey
WitnessGenesisExtendedKey :: SigningKey GenesisExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateKey :: SigningKey GenesisDelegateKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateExtendedKey :: SigningKey GenesisDelegateExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisUTxOKey :: SigningKey GenesisUTxOKey -> ShelleyWitnessSigningKey
data Tx era
[ShelleyTx] :: forall era. ShelleyBasedEra era -> Tx (ShelleyLedgerEra era) -> Tx era
pattern Tx :: TxBody era -> [KeyWitness era] -> Tx era
data AnyScriptWitness era
[AnyScriptWitness] :: forall witctx era. ScriptWitness witctx era -> AnyScriptWitness era
data AuxScriptsSupportedInEra era
[AuxScriptsInAllegraEra] :: AuxScriptsSupportedInEra AllegraEra
[AuxScriptsInMaryEra] :: AuxScriptsSupportedInEra MaryEra
[AuxScriptsInAlonzoEra] :: AuxScriptsSupportedInEra AlonzoEra
[AuxScriptsInBabbageEra] :: AuxScriptsSupportedInEra BabbageEra
[AuxScriptsInConwayEra] :: AuxScriptsSupportedInEra ConwayEra
data BuildTx
data BuildTxWith build a
[ViewTx] :: forall a. BuildTxWith ViewTx a
[BuildTxWith] :: forall a. a -> BuildTxWith BuildTx a
data CertificatesSupportedInEra era
[CertificatesInShelleyEra] :: CertificatesSupportedInEra ShelleyEra
[CertificatesInAllegraEra] :: CertificatesSupportedInEra AllegraEra
[CertificatesInMaryEra] :: CertificatesSupportedInEra MaryEra
[CertificatesInAlonzoEra] :: CertificatesSupportedInEra AlonzoEra
[CertificatesInBabbageEra] :: CertificatesSupportedInEra BabbageEra
[CertificatesInConwayEra] :: CertificatesSupportedInEra ConwayEra
data CollateralSupportedInEra era
[CollateralInAlonzoEra] :: CollateralSupportedInEra AlonzoEra
[CollateralInBabbageEra] :: CollateralSupportedInEra BabbageEra
[CollateralInConwayEra] :: CollateralSupportedInEra ConwayEra
data CtxTx
data CtxUTxO
data MultiAssetSupportedInEra era
[MultiAssetInMaryEra] :: MultiAssetSupportedInEra MaryEra
[MultiAssetInAlonzoEra] :: MultiAssetSupportedInEra AlonzoEra
[MultiAssetInBabbageEra] :: MultiAssetSupportedInEra BabbageEra
[MultiAssetInConwayEra] :: MultiAssetSupportedInEra ConwayEra
data OnlyAdaSupportedInEra era
[AdaOnlyInByronEra] :: OnlyAdaSupportedInEra ByronEra
[AdaOnlyInShelleyEra] :: OnlyAdaSupportedInEra ShelleyEra
[AdaOnlyInAllegraEra] :: OnlyAdaSupportedInEra AllegraEra
data ScriptDataSupportedInEra era
[ScriptDataInAlonzoEra] :: ScriptDataSupportedInEra AlonzoEra
[ScriptDataInBabbageEra] :: ScriptDataSupportedInEra BabbageEra
[ScriptDataInConwayEra] :: ScriptDataSupportedInEra ConwayEra
data ScriptValidity
ScriptInvalid :: ScriptValidity
ScriptValid :: ScriptValidity
data ScriptWitnessIndex
ScriptWitnessIndexTxIn :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexMint :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexCertificate :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexWithdrawal :: !Word -> ScriptWitnessIndex
data TxAuxScripts era
[TxAuxScriptsNone] :: forall era. TxAuxScripts era
[TxAuxScripts] :: forall era. AuxScriptsSupportedInEra era -> [ScriptInEra era] -> TxAuxScripts era
data TxBody era
[ShelleyTxBody] :: forall era. ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> [Script (ShelleyLedgerEra era)] -> TxBodyScriptData era -> Maybe (AuxiliaryData (ShelleyLedgerEra era)) -> TxScriptValidity era -> TxBody era
pattern TxBody :: TxBodyContent ViewTx era -> TxBody era
data TxBodyContent build era
TxBodyContent :: TxIns build era -> TxInsCollateral era -> TxInsReference build era -> [TxOut CtxTx era] -> TxTotalCollateral era -> TxReturnCollateral CtxTx era -> TxFee era -> (TxValidityLowerBound era, TxValidityUpperBound era) -> TxMetadataInEra era -> TxAuxScripts era -> TxExtraKeyWitnesses era -> BuildTxWith build (Maybe ProtocolParameters) -> TxWithdrawals build era -> TxCertificates build era -> TxUpdateProposal era -> TxMintValue build era -> TxScriptValidity era -> TxBodyContent build era
[txIns] :: TxBodyContent build era -> TxIns build era
[txInsCollateral] :: TxBodyContent build era -> TxInsCollateral era
[txInsReference] :: TxBodyContent build era -> TxInsReference build era
[txOuts] :: TxBodyContent build era -> [TxOut CtxTx era]
[txTotalCollateral] :: TxBodyContent build era -> TxTotalCollateral era
[txReturnCollateral] :: TxBodyContent build era -> TxReturnCollateral CtxTx era
[txFee] :: TxBodyContent build era -> TxFee era
[txValidityRange] :: TxBodyContent build era -> (TxValidityLowerBound era, TxValidityUpperBound era)
[txMetadata] :: TxBodyContent build era -> TxMetadataInEra era
[txAuxScripts] :: TxBodyContent build era -> TxAuxScripts era
[txExtraKeyWits] :: TxBodyContent build era -> TxExtraKeyWitnesses era
[txProtocolParams] :: TxBodyContent build era -> BuildTxWith build (Maybe ProtocolParameters)
[txWithdrawals] :: TxBodyContent build era -> TxWithdrawals build era
[txCertificates] :: TxBodyContent build era -> TxCertificates build era
[txUpdateProposal] :: TxBodyContent build era -> TxUpdateProposal era
[txMintValue] :: TxBodyContent build era -> TxMintValue build era
[txScriptValidity] :: TxBodyContent build era -> TxScriptValidity era
data TxBodyError
TxBodyEmptyTxIns :: TxBodyError
TxBodyEmptyTxInsCollateral :: TxBodyError
TxBodyEmptyTxOuts :: TxBodyError
TxBodyOutputNegative :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyOutputOverflow :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyMetadataError :: [(Word64, TxMetadataRangeError)] -> TxBodyError
TxBodyMintAdaError :: TxBodyError
TxBodyMissingProtocolParams :: TxBodyError
TxBodyInIxOverflow :: TxIn -> TxBodyError
data TxBodyScriptData era
[TxBodyNoScriptData] :: forall era. TxBodyScriptData era
[TxBodyScriptData] :: forall era. ScriptDataSupportedInEra era -> TxDats (ShelleyLedgerEra era) -> Redeemers (ShelleyLedgerEra era) -> TxBodyScriptData era
data TxCertificates build era
[TxCertificatesNone] :: forall build era. TxCertificates build era
[TxCertificates] :: forall era build. CertificatesSupportedInEra era -> [Certificate] -> BuildTxWith build (Map StakeCredential (Witness WitCtxStake era)) -> TxCertificates build era
data TxExtraKeyWitnesses era
[TxExtraKeyWitnessesNone] :: forall era. TxExtraKeyWitnesses era
[TxExtraKeyWitnesses] :: forall era. TxExtraKeyWitnessesSupportedInEra era -> [Hash PaymentKey] -> TxExtraKeyWitnesses era
data TxExtraKeyWitnessesSupportedInEra era
[ExtraKeyWitnessesInAlonzoEra] :: TxExtraKeyWitnessesSupportedInEra AlonzoEra
[ExtraKeyWitnessesInBabbageEra] :: TxExtraKeyWitnessesSupportedInEra BabbageEra
[ExtraKeyWitnessesInConwayEra] :: TxExtraKeyWitnessesSupportedInEra ConwayEra
data TxFee era
[TxFeeImplicit] :: forall era. TxFeesImplicitInEra era -> TxFee era
[TxFeeExplicit] :: forall era. TxFeesExplicitInEra era -> Lovelace -> TxFee era
data TxFeesExplicitInEra era
[TxFeesExplicitInShelleyEra] :: TxFeesExplicitInEra ShelleyEra
[TxFeesExplicitInAllegraEra] :: TxFeesExplicitInEra AllegraEra
[TxFeesExplicitInMaryEra] :: TxFeesExplicitInEra MaryEra
[TxFeesExplicitInAlonzoEra] :: TxFeesExplicitInEra AlonzoEra
[TxFeesExplicitInBabbageEra] :: TxFeesExplicitInEra BabbageEra
[TxFeesExplicitInConwayEra] :: TxFeesExplicitInEra ConwayEra
data TxFeesImplicitInEra era
[TxFeesImplicitInByronEra] :: TxFeesImplicitInEra ByronEra
type TxIns build era = [(TxIn, BuildTxWith build Witness WitCtxTxIn era)]
data TxInsCollateral era
[TxInsCollateralNone] :: forall era. TxInsCollateral era
[TxInsCollateral] :: forall era. CollateralSupportedInEra era -> [TxIn] -> TxInsCollateral era
data TxInsReference build era
[TxInsReferenceNone] :: forall build era. TxInsReference build era
[TxInsReference] :: forall era build. ReferenceTxInsScriptsInlineDatumsSupportedInEra era -> [TxIn] -> TxInsReference build era
data TxMetadataInEra era
[TxMetadataNone] :: forall era. TxMetadataInEra era
[TxMetadataInEra] :: forall era. TxMetadataSupportedInEra era -> TxMetadata -> TxMetadataInEra era
data TxMetadataSupportedInEra era
[TxMetadataInShelleyEra] :: TxMetadataSupportedInEra ShelleyEra
[TxMetadataInAllegraEra] :: TxMetadataSupportedInEra AllegraEra
[TxMetadataInMaryEra] :: TxMetadataSupportedInEra MaryEra
[TxMetadataInAlonzoEra] :: TxMetadataSupportedInEra AlonzoEra
[TxMetadataInBabbageEra] :: TxMetadataSupportedInEra BabbageEra
[TxMetadataInConwayEra] :: TxMetadataSupportedInEra ConwayEra
data TxMintValue build era
[TxMintNone] :: forall build era. TxMintValue build era
[TxMintValue] :: forall era build. MultiAssetSupportedInEra era -> Value -> BuildTxWith build (Map PolicyId (ScriptWitness WitCtxMint era)) -> TxMintValue build era
data TxOut ctx era
TxOut :: AddressInEra era -> TxOutValue era -> TxOutDatum ctx era -> ReferenceScript era -> TxOut ctx era
data TxOutDatum ctx era
[TxOutDatumNone] :: forall ctx era. TxOutDatum ctx era
[TxOutDatumHash] :: forall era ctx. ScriptDataSupportedInEra era -> Hash ScriptData -> TxOutDatum ctx era
[TxOutDatumInline] :: forall era ctx. ReferenceTxInsScriptsInlineDatumsSupportedInEra era -> HashableScriptData -> TxOutDatum ctx era
pattern TxOutDatumInTx :: ScriptDataSupportedInEra era -> HashableScriptData -> TxOutDatum CtxTx era
data TxOutValue era
[TxOutAdaOnly] :: forall era. OnlyAdaSupportedInEra era -> Lovelace -> TxOutValue era
[TxOutValue] :: forall era. MultiAssetSupportedInEra era -> Value -> TxOutValue era
data TxReturnCollateral ctx era
[TxReturnCollateralNone] :: forall ctx era. TxReturnCollateral ctx era
[TxReturnCollateral] :: forall era ctx. TxTotalAndReturnCollateralSupportedInEra era -> TxOut ctx era -> TxReturnCollateral ctx era
data TxScriptValidity era
[TxScriptValidityNone] :: forall era. TxScriptValidity era
[TxScriptValidity] :: forall era. TxScriptValiditySupportedInEra era -> ScriptValidity -> TxScriptValidity era
data TxScriptValiditySupportedInEra era
[TxScriptValiditySupportedInAlonzoEra] :: TxScriptValiditySupportedInEra AlonzoEra
[TxScriptValiditySupportedInBabbageEra] :: TxScriptValiditySupportedInEra BabbageEra
[TxScriptValiditySupportedInConwayEra] :: TxScriptValiditySupportedInEra ConwayEra
data TxTotalAndReturnCollateralSupportedInEra era
[TxTotalAndReturnCollateralInBabbageEra] :: TxTotalAndReturnCollateralSupportedInEra BabbageEra
[TxTotalAndReturnCollateralInConwayEra] :: TxTotalAndReturnCollateralSupportedInEra ConwayEra
data TxTotalCollateral era
[TxTotalCollateralNone] :: forall era. TxTotalCollateral era
[TxTotalCollateral] :: forall era. TxTotalAndReturnCollateralSupportedInEra era -> Lovelace -> TxTotalCollateral era
data TxUpdateProposal era
[TxUpdateProposalNone] :: forall era. TxUpdateProposal era
[TxUpdateProposal] :: forall era. UpdateProposalSupportedInEra era -> UpdateProposal -> TxUpdateProposal era
data TxValidityLowerBound era
[TxValidityNoLowerBound] :: forall era. TxValidityLowerBound era
[TxValidityLowerBound] :: forall era. ValidityLowerBoundSupportedInEra era -> SlotNo -> TxValidityLowerBound era
data TxValidityUpperBound era
[TxValidityNoUpperBound] :: forall era. ValidityNoUpperBoundSupportedInEra era -> TxValidityUpperBound era
[TxValidityUpperBound] :: forall era. ValidityUpperBoundSupportedInEra era -> SlotNo -> TxValidityUpperBound era
data TxWithdrawals build era
[TxWithdrawalsNone] :: forall build era. TxWithdrawals build era
[TxWithdrawals] :: forall era build. WithdrawalsSupportedInEra era -> [(StakeAddress, Lovelace, BuildTxWith build (Witness WitCtxStake era))] -> TxWithdrawals build era
data UpdateProposalSupportedInEra era
[UpdateProposalInShelleyEra] :: UpdateProposalSupportedInEra ShelleyEra
[UpdateProposalInAllegraEra] :: UpdateProposalSupportedInEra AllegraEra
[UpdateProposalInMaryEra] :: UpdateProposalSupportedInEra MaryEra
[UpdateProposalInAlonzoEra] :: UpdateProposalSupportedInEra AlonzoEra
[UpdateProposalInBabbageEra] :: UpdateProposalSupportedInEra BabbageEra
[UpdateProposalInConwayEra] :: UpdateProposalSupportedInEra ConwayEra
data ValidityLowerBoundSupportedInEra era
[ValidityLowerBoundInAllegraEra] :: ValidityLowerBoundSupportedInEra AllegraEra
[ValidityLowerBoundInMaryEra] :: ValidityLowerBoundSupportedInEra MaryEra
[ValidityLowerBoundInAlonzoEra] :: ValidityLowerBoundSupportedInEra AlonzoEra
[ValidityLowerBoundInBabbageEra] :: ValidityLowerBoundSupportedInEra BabbageEra
[ValidityLowerBoundInConwayEra] :: ValidityLowerBoundSupportedInEra ConwayEra
data ValidityNoUpperBoundSupportedInEra era
[ValidityNoUpperBoundInByronEra] :: ValidityNoUpperBoundSupportedInEra ByronEra
[ValidityNoUpperBoundInAllegraEra] :: ValidityNoUpperBoundSupportedInEra AllegraEra
[ValidityNoUpperBoundInMaryEra] :: ValidityNoUpperBoundSupportedInEra MaryEra
[ValidityNoUpperBoundInAlonzoEra] :: ValidityNoUpperBoundSupportedInEra AlonzoEra
[ValidityNoUpperBoundInBabbageEra] :: ValidityNoUpperBoundSupportedInEra BabbageEra
[ValidityNoUpperBoundInConwayEra] :: ValidityNoUpperBoundSupportedInEra ConwayEra
data ValidityUpperBoundSupportedInEra era
[ValidityUpperBoundInShelleyEra] :: ValidityUpperBoundSupportedInEra ShelleyEra
[ValidityUpperBoundInAllegraEra] :: ValidityUpperBoundSupportedInEra AllegraEra
[ValidityUpperBoundInMaryEra] :: ValidityUpperBoundSupportedInEra MaryEra
[ValidityUpperBoundInAlonzoEra] :: ValidityUpperBoundSupportedInEra AlonzoEra
[ValidityUpperBoundInBabbageEra] :: ValidityUpperBoundSupportedInEra BabbageEra
[ValidityUpperBoundInConwayEra] :: ValidityUpperBoundSupportedInEra ConwayEra
data ViewTx
data WithdrawalsSupportedInEra era
[WithdrawalsInShelleyEra] :: WithdrawalsSupportedInEra ShelleyEra
[WithdrawalsInAllegraEra] :: WithdrawalsSupportedInEra AllegraEra
[WithdrawalsInMaryEra] :: WithdrawalsSupportedInEra MaryEra
[WithdrawalsInAlonzoEra] :: WithdrawalsSupportedInEra AlonzoEra
[WithdrawalsInBabbageEra] :: WithdrawalsSupportedInEra BabbageEra
[WithdrawalsInConwayEra] :: WithdrawalsSupportedInEra ConwayEra
newtype TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
data TxIn
TxIn :: TxId -> TxIx -> TxIn
newtype TxIx
TxIx :: Word -> TxIx
newtype TxMetadata
TxMetadata :: Map Word64 TxMetadataValue -> TxMetadata
data TxMetadataJsonError
TxMetadataJsonToplevelNotMap :: TxMetadataJsonError
TxMetadataJsonToplevelBadKey :: !Text -> TxMetadataJsonError
TxMetadataJsonSchemaError :: !Word64 -> !Value -> !TxMetadataJsonSchemaError -> TxMetadataJsonError
TxMetadataRangeError :: !Word64 -> !Value -> !TxMetadataRangeError -> TxMetadataJsonError
data TxMetadataJsonSchema
TxMetadataJsonNoSchema :: TxMetadataJsonSchema
TxMetadataJsonDetailedSchema :: TxMetadataJsonSchema
data TxMetadataJsonSchemaError
TxMetadataJsonNullNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonBoolNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonNumberNotInteger :: !Double -> TxMetadataJsonSchemaError
TxMetadataJsonNotObject :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonBadObject :: ![(Text, Value)] -> TxMetadataJsonSchemaError
TxMetadataJsonBadMapPair :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonTypeMismatch :: !Text -> !Value -> TxMetadataJsonSchemaError
data TxMetadataRangeError
TxMetadataNumberOutOfRange :: !Integer -> TxMetadataRangeError
TxMetadataTextTooLong :: !Int -> TxMetadataRangeError
TxMetadataBytesTooLong :: !Int -> TxMetadataRangeError
data TxMetadataValue
TxMetaMap :: [(TxMetadataValue, TxMetadataValue)] -> TxMetadataValue
TxMetaList :: [TxMetadataValue] -> TxMetadataValue
TxMetaNumber :: Integer -> TxMetadataValue
TxMetaBytes :: ByteString -> TxMetadataValue
TxMetaText :: Text -> TxMetadataValue
data AssetId
AdaAssetId :: AssetId
AssetId :: !PolicyId -> !AssetName -> AssetId
newtype AssetName
AssetName :: ByteString -> AssetName
newtype Lovelace
Lovelace :: Integer -> Lovelace
newtype PolicyId
PolicyId :: ScriptHash -> PolicyId
[unPolicyId] :: PolicyId -> ScriptHash
newtype Quantity
Quantity :: Integer -> Quantity
data Value
data ValueNestedBundle
ValueNestedBundleAda :: Quantity -> ValueNestedBundle
ValueNestedBundle :: PolicyId -> Map AssetName Quantity -> ValueNestedBundle
newtype ValueNestedRep
ValueNestedRep :: [ValueNestedBundle] -> ValueNestedRep
class Typeable a => FromCBOR a
class Typeable a => ToCBOR a
newtype EpochSlots
EpochSlots :: Word64 -> EpochSlots
[unEpochSlots] :: EpochSlots -> Word64
newtype BlockNo
BlockNo :: Word64 -> BlockNo
[unBlockNo] :: BlockNo -> Word64
newtype EpochNo
EpochNo :: Word64 -> EpochNo
[unEpochNo] :: EpochNo -> Word64
newtype SlotNo
SlotNo :: Word64 -> SlotNo
[unSlotNo] :: SlotNo -> Word64
newtype SystemStart
SystemStart :: UTCTime -> SystemStart
[getSystemStart] :: SystemStart -> UTCTime
newtype NetworkMagic
NetworkMagic :: Word32 -> NetworkMagic
[unNetworkMagic] :: NetworkMagic -> Word32
data NodeToClientVersion
NodeToClientV_9 :: NodeToClientVersion
NodeToClientV_10 :: NodeToClientVersion
NodeToClientV_11 :: NodeToClientVersion
NodeToClientV_12 :: NodeToClientVersion
NodeToClientV_13 :: NodeToClientVersion
NodeToClientV_14 :: NodeToClientVersion
NodeToClientV_15 :: NodeToClientVersion
newtype ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
newtype ChainSyncClientPipelined header point tip (m :: Type -> Type) a
ChainSyncClientPipelined :: m (ClientPipelinedStIdle 'Z header point tip m a) -> ChainSyncClientPipelined header point tip (m :: Type -> Type) a
[runChainSyncClientPipelined] :: ChainSyncClientPipelined header point tip (m :: Type -> Type) a -> m (ClientPipelinedStIdle 'Z header point tip m a)
newtype LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
LocalStateQueryClient :: m (ClientStIdle block point query m a) -> LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
[runLocalStateQueryClient] :: LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a -> m (ClientStIdle block point query m a)
newtype LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
LocalTxMonitorClient :: m (ClientStIdle txid tx slot m a) -> LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
[runLocalTxMonitorClient] :: LocalTxMonitorClient txid tx slot (m :: Type -> Type) a -> m (ClientStIdle txid tx slot m a)
data MempoolSizeAndCapacity
MempoolSizeAndCapacity :: !Word32 -> !Word32 -> !Word32 -> MempoolSizeAndCapacity
[capacityInBytes] :: MempoolSizeAndCapacity -> !Word32
[sizeInBytes] :: MempoolSizeAndCapacity -> !Word32
[numberOfTxs] :: MempoolSizeAndCapacity -> !Word32
data LocalTxSubmissionClient tx reject (m :: Type -> Type) a
data SubmitResult reason
SubmitSuccess :: SubmitResult reason
SubmitFail :: reason -> SubmitResult reason
data ShelleyGenesis era
ShelleyGenesis :: !UTCTime -> !Word32 -> !Network -> !PositiveUnitInterval -> !Word64 -> !EpochSize -> !Word64 -> !Word64 -> !NominalDiffTime -> !Word64 -> !Word64 -> !ShelleyPParams era -> !Map (KeyHash 'Genesis (Crypto era)) (GenDelegPair (Crypto era)) -> ListMap (Addr (Crypto era)) Coin -> ShelleyGenesisStaking (Crypto era) -> ShelleyGenesis era
[sgSystemStart] :: ShelleyGenesis era -> !UTCTime
[sgNetworkMagic] :: ShelleyGenesis era -> !Word32
[sgNetworkId] :: ShelleyGenesis era -> !Network
[sgActiveSlotsCoeff] :: ShelleyGenesis era -> !PositiveUnitInterval
[sgSecurityParam] :: ShelleyGenesis era -> !Word64
[sgEpochLength] :: ShelleyGenesis era -> !EpochSize
[sgSlotsPerKESPeriod] :: ShelleyGenesis era -> !Word64
[sgMaxKESEvolutions] :: ShelleyGenesis era -> !Word64
[sgSlotLength] :: ShelleyGenesis era -> !NominalDiffTime
[sgUpdateQuorum] :: ShelleyGenesis era -> !Word64
[sgMaxLovelaceSupply] :: ShelleyGenesis era -> !Word64
[sgProtocolParams] :: ShelleyGenesis era -> !ShelleyPParams era
[sgGenDelegs] :: ShelleyGenesis era -> !Map (KeyHash 'Genesis (Crypto era)) (GenDelegPair (Crypto era))
[sgInitialFunds] :: ShelleyGenesis era -> ListMap (Addr (Crypto era)) Coin
[sgStaking] :: ShelleyGenesis era -> ShelleyGenesisStaking (Crypto era)
fromShelleyTxId :: TxId StandardCrypto -> TxId
fromShelleyTxIn :: TxIn StandardCrypto -> TxIn
toShelleyTxId :: TxId -> TxId StandardCrypto
toShelleyTxIn :: TxIn -> TxIn StandardCrypto
calculateExecutionUnitsLovelace :: ExecutionUnitPrices -> ExecutionUnits -> Maybe Lovelace
fromAlonzoRdmrPtr :: RdmrPtr -> ScriptWitnessIndex
fromShelleyTxOut :: ShelleyLedgerEra era ~ ledgerera => ShelleyBasedEra era -> TxOut ledgerera -> TxOut ctx era
getTxIdShelley :: (Crypto (ShelleyLedgerEra era) ~ StandardCrypto, EraTxBody (ShelleyLedgerEra era)) => ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxId
toAlonzoRdmrPtr :: ScriptWitnessIndex -> RdmrPtr
toShelleyTxOut :: ShelleyLedgerEra era ~ ledgerera => ShelleyBasedEra era -> TxOut CtxUTxO era -> TxOut ledgerera
type family ShelleyLedgerEra era
data ReferenceTxInsScriptsInlineDatumsSupportedInEra era
[ReferenceTxInsScriptsInlineDatumsInBabbageEra] :: ReferenceTxInsScriptsInlineDatumsSupportedInEra BabbageEra
[ReferenceTxInsScriptsInlineDatumsInConwayEra] :: ReferenceTxInsScriptsInlineDatumsSupportedInEra ConwayEra
data ReferenceScript era
[ReferenceScript] :: forall era. ReferenceTxInsScriptsInlineDatumsSupportedInEra era -> ScriptInAnyLang -> ReferenceScript era
[ReferenceScriptNone] :: forall era. ReferenceScript era
data ProtocolParameters
ProtocolParameters :: (Natural, Natural) -> Maybe Rational -> Maybe PraosNonce -> Natural -> Natural -> Natural -> Natural -> Natural -> Maybe Lovelace -> Lovelace -> Lovelace -> Lovelace -> EpochNo -> Natural -> Rational -> Rational -> Rational -> Maybe Lovelace -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParameters
[protocolParamProtocolVersion] :: ProtocolParameters -> (Natural, Natural)
[protocolParamDecentralization] :: ProtocolParameters -> Maybe Rational
[protocolParamExtraPraosEntropy] :: ProtocolParameters -> Maybe PraosNonce
[protocolParamMaxBlockHeaderSize] :: ProtocolParameters -> Natural
[protocolParamMaxBlockBodySize] :: ProtocolParameters -> Natural
[protocolParamMaxTxSize] :: ProtocolParameters -> Natural
[protocolParamTxFeeFixed] :: ProtocolParameters -> Natural
[protocolParamTxFeePerByte] :: ProtocolParameters -> Natural
[protocolParamMinUTxOValue] :: ProtocolParameters -> Maybe Lovelace
[protocolParamStakeAddressDeposit] :: ProtocolParameters -> Lovelace
[protocolParamStakePoolDeposit] :: ProtocolParameters -> Lovelace
[protocolParamMinPoolCost] :: ProtocolParameters -> Lovelace
[protocolParamPoolRetireMaxEpoch] :: ProtocolParameters -> EpochNo
[protocolParamStakePoolTargetNum] :: ProtocolParameters -> Natural
[protocolParamPoolPledgeInfluence] :: ProtocolParameters -> Rational
[protocolParamMonetaryExpansion] :: ProtocolParameters -> Rational
[protocolParamTreasuryCut] :: ProtocolParameters -> Rational
[protocolParamUTxOCostPerWord] :: ProtocolParameters -> Maybe Lovelace
[protocolParamCostModels] :: ProtocolParameters -> Map AnyPlutusScriptVersion CostModel
[protocolParamPrices] :: ProtocolParameters -> Maybe ExecutionUnitPrices
[protocolParamMaxTxExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxBlockExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxValueSize] :: ProtocolParameters -> Maybe Natural
[protocolParamCollateralPercent] :: ProtocolParameters -> Maybe Natural
[protocolParamMaxCollateralInputs] :: ProtocolParameters -> Maybe Natural
[protocolParamUTxOCostPerByte] :: ProtocolParameters -> Maybe Lovelace
toAlonzoData :: HashableScriptData -> Data ledgerera
decodeCurrentEpochState :: (Era (ShelleyLedgerEra era), HashAnnotated (TxBody (ShelleyLedgerEra era)) EraIndependentTxBody (Crypto (ShelleyLedgerEra era)), FromSharedCBOR (TxOut (ShelleyLedgerEra era)), Share (TxOut (ShelleyLedgerEra era)) ~ Interns (Credential 'Staking (Crypto (ShelleyLedgerEra era))), FromCBOR (PParams (ShelleyLedgerEra era)), FromCBOR (Value (ShelleyLedgerEra era)), FromCBOR (State (EraRule "PPUP" (ShelleyLedgerEra era)))) => SerialisedCurrentEpochState era -> Either DecoderError (CurrentEpochState era)
decodeDebugLedgerState :: FromCBOR (DebugLedgerState era) => SerialisedDebugLedgerState era -> Either ByteString (DebugLedgerState era)
decodePoolDistribution :: FromCBOR (PoolDistr (Crypto (ShelleyLedgerEra era))) => SerialisedPoolDistribution era -> Either DecoderError (PoolDistribution era)
decodePoolState :: FromCBOR (PState (Crypto (ShelleyLedgerEra era))) => SerialisedPoolState era -> Either DecoderError (PoolState era)
decodeProtocolState :: FromCBOR (ChainDepState (ConsensusProtocol era)) => ProtocolState era -> Either (ByteString, DecoderError) (ChainDepState (ConsensusProtocol era))
decodeStakeSnapshot :: FromCBOR (StakeSnapshots (Crypto (ShelleyLedgerEra era))) => SerialisedStakeSnapshots era -> Either DecoderError (StakeSnapshot era)
newtype CurrentEpochState era
CurrentEpochState :: EpochState (ShelleyLedgerEra era) -> CurrentEpochState era
data DebugLedgerState era
[DebugLedgerState] :: forall era ledgerera. ShelleyLedgerEra era ~ ledgerera => NewEpochState ledgerera -> DebugLedgerState era
newtype PoolDistribution era
PoolDistribution :: PoolDistr (Crypto (ShelleyLedgerEra era)) -> PoolDistribution era
[unPoolDistr] :: PoolDistribution era -> PoolDistr (Crypto (ShelleyLedgerEra era))
newtype PoolState era
PoolState :: PState (Crypto (ShelleyLedgerEra era)) -> PoolState era
newtype ProtocolState era
ProtocolState :: Serialised (ChainDepState (ConsensusProtocol era)) -> ProtocolState era
newtype SerialisedCurrentEpochState era
SerialisedCurrentEpochState :: Serialised (EpochState (ShelleyLedgerEra era)) -> SerialisedCurrentEpochState era
newtype SerialisedDebugLedgerState era
SerialisedDebugLedgerState :: Serialised (NewEpochState (ShelleyLedgerEra era)) -> SerialisedDebugLedgerState era
newtype SerialisedPoolDistribution era
SerialisedPoolDistribution :: Serialised (PoolDistr (Crypto (ShelleyLedgerEra era))) -> SerialisedPoolDistribution era
newtype SerialisedPoolState era
SerialisedPoolState :: Serialised (PState (Crypto (ShelleyLedgerEra era))) -> SerialisedPoolState era
newtype SerialisedStakeSnapshots era
SerialisedStakeSnapshots :: Serialised (StakeSnapshots (Crypto (ShelleyLedgerEra era))) -> SerialisedStakeSnapshots era
newtype StakeSnapshot era
StakeSnapshot :: StakeSnapshots (Crypto (ShelleyLedgerEra era)) -> StakeSnapshot era
data StakePoolKey
type PoolId = Hash StakePoolKey
calcMinimumDeposit :: Value -> Lovelace -> Lovelace
fromMaryValue :: MaryValue StandardCrypto -> Value
fromShelleyLovelace :: Coin -> Lovelace
toMaryValue :: Value -> MaryValue StandardCrypto
toShelleyLovelace :: Lovelace -> Coin
fromShelleyAddr :: ShelleyBasedEra era -> Addr StandardCrypto -> AddressInEra era
fromShelleyAddrIsSbe :: IsShelleyBasedEra era => Addr StandardCrypto -> AddressInEra era
fromShelleyAddrToAny :: Addr StandardCrypto -> AddressAny
fromShelleyPaymentCredential :: PaymentCredential StandardCrypto -> PaymentCredential
fromShelleyStakeAddr :: RewardAcnt StandardCrypto -> StakeAddress
fromShelleyStakeCredential :: StakeCredential StandardCrypto -> StakeCredential
fromShelleyStakeReference :: StakeReference StandardCrypto -> StakeAddressReference
shelleyPayAddrToPlutusPubKHash :: Address ShelleyAddr -> Maybe PubKeyHash
toShelleyAddr :: AddressInEra era -> Addr StandardCrypto
toShelleyStakeAddr :: StakeAddress -> RewardAcnt StandardCrypto
toShelleyStakeCredential :: StakeCredential -> StakeCredential StandardCrypto
fromAllegraTimelock :: Timelock StandardCrypto -> SimpleScript
fromAlonzoExUnits :: ExUnits -> ExecutionUnits
fromShelleyBasedScript :: ShelleyBasedEra era -> Script (ShelleyLedgerEra era) -> ScriptInEra era
fromShelleyMultiSig :: MultiSig StandardCrypto -> SimpleScript
fromShelleyScriptHash :: ScriptHash StandardCrypto -> ScriptHash
refInsScriptsAndInlineDatsSupportedInEra :: CardanoEra era -> Maybe (ReferenceTxInsScriptsInlineDatumsSupportedInEra era)
refScriptToShelleyScript :: CardanoEra era -> ReferenceScript era -> StrictMaybe (Script (ShelleyLedgerEra era))
toAllegraTimelock :: SimpleScript -> Timelock StandardCrypto
toAlonzoExUnits :: ExecutionUnits -> ExUnits
toShelleyMultiSig :: SimpleScript -> Either MultiSigError (MultiSig StandardCrypto)
toShelleyScript :: ScriptInEra era -> Script (ShelleyLedgerEra era)
toShelleyScriptHash :: ScriptHash -> ScriptHash StandardCrypto
fromAlonzoData :: Data ledgerera -> HashableScriptData
fromPlutusData :: Data -> ScriptData
toPlutusData :: ScriptData -> Data
data PlutusScriptOrReferenceInput lang
PScript :: PlutusScript lang -> PlutusScriptOrReferenceInput lang
PReferenceScript :: TxIn -> Maybe ScriptHash -> PlutusScriptOrReferenceInput lang
data SimpleScriptOrReferenceInput lang
SScript :: SimpleScript -> SimpleScriptOrReferenceInput lang
SReferenceScript :: TxIn -> Maybe ScriptHash -> SimpleScriptOrReferenceInput lang
toShelleyNetwork :: NetworkId -> Network
fromConsensusBlock :: (ConsensusBlockForMode mode ~ block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => ConsensusMode mode -> block -> BlockInMode mode
fromConsensusPointInMode :: ConsensusMode mode -> Point (ConsensusBlockForMode mode) -> ChainPoint
fromConsensusTip :: ConsensusBlockForMode mode ~ block => ConsensusMode mode -> Tip block -> ChainTip
toConsensusBlock :: (ConsensusBlockForMode mode ~ block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => BlockInMode mode -> block
toConsensusPointHF :: forall block (xs :: [Type]). HeaderHash block ~ OneEraHash xs => ChainPoint -> Point block
toConsensusPointInMode :: ConsensusMode mode -> ChainPoint -> Point (ConsensusBlockForMode mode)
fromShelleyCertificate :: DCert StandardCrypto -> Certificate
toShelleyCertificate :: Certificate -> DCert StandardCrypto
shelleyGenesisDefaults :: ShelleyGenesis crypto
toConsensusGenTx :: ConsensusBlockForMode mode ~ block => TxInMode mode -> GenTx block
signArbitraryBytesKes :: SigningKey KesKey -> Period -> ByteString -> SignedKES (KES StandardCrypto) ByteString
currentEpochEligibleLeadershipSlots :: (ShelleyLedgerEra era ~ ledgerera, Era ledgerera, PraosProtocolSupportsNode (ConsensusProtocol era), HasField "_d" (PParams ledgerera) UnitInterval, FromCBOR (ChainDepState (ConsensusProtocol era))) => ShelleyBasedEra era -> ShelleyGenesis StandardShelley -> EpochInfo (Either Text) -> BundledProtocolParameters era -> ProtocolState era -> PoolId -> SigningKey VrfKey -> SerialisedPoolDistribution era -> EpochNo -> Either LeadershipError (Set SlotNo)
nextEpochEligibleLeadershipSlots :: (HasField "_d" (PParams (ShelleyLedgerEra era)) UnitInterval, HashAnnotated (TxBody (ShelleyLedgerEra era)) EraIndependentTxBody (Crypto (ShelleyLedgerEra era)), Era (ShelleyLedgerEra era), Share (TxOut (ShelleyLedgerEra era)) ~ Interns (Credential 'Staking (Crypto (ShelleyLedgerEra era))), FromCBOR (ChainDepState (ConsensusProtocol era)), PraosProtocolSupportsNode (ConsensusProtocol era)) => ShelleyBasedEra era -> ShelleyGenesis StandardShelley -> SerialisedCurrentEpochState era -> ProtocolState era -> PoolId -> SigningKey VrfKey -> BundledProtocolParameters era -> EpochInfo (Either Text) -> (ChainTip, EpochNo) -> Either LeadershipError (Set SlotNo)
checkProtocolParameters :: IsCardanoEra era => ShelleyBasedEra era -> ProtocolParameters -> Either ProtocolParametersError ()
fromAlonzoCostModels :: CostModels -> Map AnyPlutusScriptVersion CostModel
fromAlonzoPrices :: Prices -> ExecutionUnitPrices
fromShelleyPParams :: ShelleyPParams ledgerera -> ProtocolParameters
toAlonzoPrices :: ExecutionUnitPrices -> Maybe Prices
scriptDataFromJsonDetailedSchema :: Value -> Either ScriptDataJsonSchemaError HashableScriptData
scriptDataToJsonDetailedSchema :: HashableScriptData -> Value
getShelleyKeyWitnessVerificationKey :: ShelleySigningKey -> VKey 'Witness StandardCrypto
getTxBodyAndWitnesses :: Tx era -> (TxBody era, [KeyWitness era])
makeShelleySignature :: SignableRepresentation tosign => tosign -> ShelleySigningKey -> SignedDSIGN StandardCrypto tosign
toShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey
fromShelleyMetadata :: Map Word64 Metadatum -> Map Word64 TxMetadataValue
fromShelleyMetadatum :: Metadatum -> TxMetadataValue
toShelleyMetadata :: Map Word64 TxMetadataValue -> Map Word64 Metadatum
toShelleyMetadatum :: TxMetadataValue -> Metadatum
data AcquiringFailure
AFPointTooOld :: AcquiringFailure
AFPointNotOnChain :: AcquiringFailure
data KesKey
data VrfKey
data LeadershipError
LeaderErrDecodeLedgerStateFailure :: LeadershipError
LeaderErrDecodeProtocolStateFailure :: (ByteString, DecoderError) -> LeadershipError
LeaderErrDecodeProtocolEpochStateFailure :: DecoderError -> LeadershipError
LeaderErrGenesisSlot :: LeadershipError
LeaderErrStakePoolHasNoStake :: PoolId -> LeadershipError
LeaderErrStakeDistribUnstable :: SlotNo -> SlotNo -> SlotNo -> SlotNo -> LeadershipError
LeaderErrSlotRangeCalculationFailure :: Text -> LeadershipError
LeaderErrCandidateNonceStillEvolving :: LeadershipError
data ShelleyMode
data ProtocolParametersError
PParamsErrorMissingMinUTxoValue :: AnyCardanoEra -> ProtocolParametersError
PParamsErrorMissingAlonzoProtocolParameter :: ProtocolParametersError
data ShelleySigningKey
ShelleyNormalSigningKey :: SignKeyDSIGN StandardCrypto -> ShelleySigningKey
ShelleyExtendedSigningKey :: XPrv -> ShelleySigningKey
newtype KESPeriod
KESPeriod :: Word -> KESPeriod
[unKESPeriod] :: KESPeriod -> Word
class FromJSON a
parseJSON :: FromJSON a => Value -> Parser a
parseJSONList :: FromJSON a => Value -> Parser [a]
class ToJSON a
toJSON :: ToJSON a => a -> Value
toEncoding :: ToJSON a => a -> Encoding
toJSONList :: ToJSON a => [a] -> Value
toEncodingList :: ToJSON a => [a] -> Encoding

-- | Request a CallStack.
--   
--   NOTE: The implicit parameter <tt>?callStack :: CallStack</tt> is an
--   implementation detail and <b>should not</b> be considered part of the
--   <a>CallStack</a> API, we may decide to change the implementation in
--   the future.
type HasCallStack = ?callStack :: CallStack

-- | <a>Proxy</a> is a type that holds no data, but has a phantom parameter
--   of arbitrary type (or even kind). Its use is to provide type
--   information, even though there is no value available of that type (or
--   it may be too costly to create one).
--   
--   Historically, <tt><a>Proxy</a> :: <a>Proxy</a> a</tt> is a safer
--   alternative to the <tt><a>undefined</a> :: a</tt> idiom.
--   
--   <pre>
--   &gt;&gt;&gt; Proxy :: Proxy (Void, Int -&gt; Int)
--   Proxy
--   </pre>
--   
--   Proxy can even hold types of higher kinds,
--   
--   <pre>
--   &gt;&gt;&gt; Proxy :: Proxy Either
--   Proxy
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; Proxy :: Proxy Functor
--   Proxy
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; Proxy :: Proxy complicatedStructure
--   Proxy
--   </pre>
data Proxy (t :: k)
Proxy :: Proxy (t :: k)

-- | The class <a>Typeable</a> allows a concrete representation of a type
--   to be calculated.
class Typeable (a :: k)
type UTxO = UTxO' (TxOut CtxUTxO Era)

-- | Newtype with phantom types mostly required to work around the poor
--   interface of <a>UTXO</a> and provide <a>Monoid</a> and <a>Foldable</a>
--   instances to make utxo manipulation bareable.
newtype UTxO' out
UTxO :: Map TxIn out -> UTxO' out
data StandardCrypto
type Era = BabbageEra
type LedgerEra = BabbageEra StandardCrypto
type UsesStandardCrypto era = (Crypto (ShelleyLedgerEra era) ~ StandardCrypto)
data Text
decodeUtf8 :: ByteString -> Text
encodeUtf8 :: Text -> ByteString
toStrict :: ByteString -> ByteString
fromStrict :: ByteString -> ByteString
data ByteString
data Map k a
data Set a

-- | Interpret some raw <a>ByteString</a> as a particular <a>Hash</a>.
--   
--   NOTE: This throws if byte string has a length different that the
--   expected target digest length.
unsafeHashFromBytes :: (HasCallStack, HashAlgorithm hash) => ByteString -> Hash hash a
class Arbitrary a
arbitrary :: Arbitrary a => Gen a
shrink :: Arbitrary a => a -> [a]
data Gen a

module Hydra.Cardano.Api.PolicyId
toLedgerScriptHash :: PolicyId -> ScriptHash StandardCrypto

module Hydra.Cardano.Api.PlutusScript

-- | Convert a cardano-ledger <a>Script</a> into a cardano-api
--   <a>PlutusScript</a>
--   
--   NOTE: This function is unsafe in two manners:
--   
--   (a) If the given script is a timelock script, it throws an impure
--   exception; (b) If the given script is in a wrong language, it silently
--   coerces it.
fromLedgerScript :: HasCallStack => AlonzoScript era -> PlutusScript lang

-- | Convert a cardano-api <a>PlutusScript</a> into a cardano-ledger
--   <a>Script</a>.
toLedgerScript :: forall lang. IsPlutusScriptLanguage lang => PlutusScript lang -> AlonzoScript (ShelleyLedgerEra Era)

-- | Convert a serialized plutus script into a cardano-api
--   <a>PlutusScript</a>.
fromPlutusScript :: SerialisedScript -> PlutusScript lang
instance Cardano.Api.Script.IsPlutusScriptLanguage lang => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Api.Script.PlutusScript lang)
instance Cardano.Api.Script.IsPlutusScriptLanguage lang => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Api.Script.PlutusScript lang)
instance Test.QuickCheck.Arbitrary.Arbitrary (Cardano.Api.Script.PlutusScript lang)

module Hydra.Cardano.Api.NetworkId
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Api.NetworkId.NetworkId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Api.NetworkId.NetworkId

module Hydra.Cardano.Api.MultiAssetSupportedInEra

-- | Smart-constructor for <a>MultiAssetSupportedInEra</a> to write
--   functions manipulating values that do not commit to a particular era.
class HasMultiAsset era
multiAssetSupportedInEra :: HasMultiAsset era => MultiAssetSupportedInEra era
instance Hydra.Cardano.Api.MultiAssetSupportedInEra.HasMultiAsset Cardano.Api.Eras.MaryEra
instance Hydra.Cardano.Api.MultiAssetSupportedInEra.HasMultiAsset Cardano.Api.Eras.AlonzoEra
instance Hydra.Cardano.Api.MultiAssetSupportedInEra.HasMultiAsset Cardano.Api.Eras.BabbageEra

module Hydra.Cardano.Api.Lovelace

-- | Directly retrieve the amount of <a>Lovelace</a> stored in a
--   <a>TxOut</a>.
txOutLovelace :: TxOut ctx era -> Lovelace

-- | Convert a cardano-ledger's <tt>Coin</tt> into a cardano-api
--   <a>Lovelace</a>.
fromLedgerCoin :: Coin -> Lovelace

-- | Convert a cardano-api <a>Lovelace</a> into a cardano-ledger
--   <tt>Coin</tt>.
toLedgerCoin :: Lovelace -> Coin

module Hydra.Cardano.Api.KeyWitness

-- | Construct a <a>KeyWitness</a> from a transaction id and credentials.
signWith :: forall era. IsShelleyBasedEra era => TxId -> SigningKey PaymentKey -> KeyWitness era

-- | Convert a <tt>List</tt> of cardano-api's <a>KeyWitness</a> into a
--   <a>Set</a> of cardano-ledger's <tt>WitVKey</tt>.
--   
--   NOTE: <a>KeyWitness</a> is a bigger type than <tt>WitVKey</tt>
--   witness, this function does not only the type conversion but also the
--   selection of the right underlying constructors. That means the size of
--   the resulting set may be smaller than the size of the list (but never
--   bigger).
toLedgerKeyWitness :: [KeyWitness era] -> Set (WitVKey 'Witness StandardCrypto)

-- | Convert a <tt>List</tt> of cardano-api's <a>KeyWitness</a> into a
--   <a>Set</a> of cardano-ledger's <tt>BootstrapWitness</tt>.
--   
--   NOTE: See note on <a>toLedgerKeyWitness</a>.
toLedgerBootstrapWitness :: [KeyWitness era] -> Set (BootstrapWitness StandardCrypto)

-- | Convert a cardano-ledger's <tt>TxWitness</tt> object into a list of
--   cardano-api's <a>KeyWitness</a>.
--   
--   NOTE: this only concerns key and bootstrap witnesses. Scripts and
--   auxiliary data are obviously not part of the resulting list.
fromLedgerTxWitness :: forall era. (IsShelleyBasedEra era, UsesStandardCrypto era) => TxWitness (ShelleyLedgerEra era) -> [KeyWitness era]

module Hydra.Cardano.Api.Hash

-- | Convert a cardano-api <a>Hash</a> into a plutus <tt>PubKeyHash</tt>
toPlutusKeyHash :: Hash PaymentKey -> PubKeyHash

-- | Convert a cardano-api <a>Hash</a> into a cardano-ledger
--   <tt>KeyHash</tt>
toLedgerKeyHash :: Hash PaymentKey -> KeyHash 'Witness StandardCrypto

-- | Unsafe wrap some bytes as a 'Hash PaymentKey'.
--   
--   Pre-condition: the input bytestring MUST be of length 28.
unsafePaymentKeyHashFromBytes :: HasCallStack => ByteString -> Hash PaymentKey

-- | Unsafe wrap some bytes as a <a>ScriptHash</a>, relying on the fact
--   that Plutus is using Blake2b_224 for hashing data (according to
--   'cardano-ledger').
--   
--   Pre-condition: the input bytestring MUST be of length 28.
unsafeScriptHashFromBytes :: HasCallStack => ByteString -> ScriptHash

-- | Unsafe wrap some bytes as a 'Hash ScriptData', relying on the fact
--   that Plutus is using Blake2b_256 for hashing data (according to
--   'cardano-ledger').
--   
--   Pre-condition: the input bytestring MUST be of length 32.
unsafeScriptDataHashFromBytes :: HasCallStack => ByteString -> Hash ScriptData
unsafeCastHash :: (SerialiseAsCBOR (Hash a), SerialiseAsCBOR (Hash b), HasCallStack) => Hash a -> Hash b

module Hydra.Cardano.Api.ExecutionUnits

-- | Convert a cardano-api <a>ExecutionUnits</a> into a cardano-ledger
--   <tt>ExUnits</tt>
toLedgerExUnits :: ExecutionUnits -> ExUnits

-- | Convert a cardano-ledger <tt>ExUnits</tt> into a cardano-api
--   <a>ExecutionUnits</a>
fromLedgerExUnits :: ExUnits -> ExecutionUnits

module Hydra.Cardano.Api.CtxUTxO

-- | A convenient type-class for transforming types in <a>CtxTx</a> to
--   <a>CtxUTxO</a>.
--   
--   See also <tt>ToTxContext</tt> for the reverse.
class ToUTxOContext f
toUTxOContext :: ToUTxOContext f => f CtxTx era -> f CtxUTxO era
instance Hydra.Cardano.Api.CtxUTxO.ToUTxOContext Cardano.Api.TxBody.TxOutDatum
instance Hydra.Cardano.Api.CtxUTxO.ToUTxOContext Cardano.Api.TxBody.TxOut

module Hydra.Cardano.Api.ChainPoint

-- | Get the chain point corresponding to a given <a>BlockHeader</a>.
getChainPoint :: BlockHeader -> ChainPoint
instance Test.QuickCheck.Arbitrary.Arbitrary Cardano.Api.Block.ChainPoint

module Hydra.Cardano.Api.BlockHeader
unsafeBlockHeaderHashFromBytes :: HasCallStack => ByteString -> Hash BlockHeader

-- | Fully arbitrary block header with completely random hash.
genBlockHeader :: Gen BlockHeader

-- | Generate a random block header with completely random hash, but at a
--   certain slot.
genBlockHeaderAt :: SlotNo -> Gen BlockHeader
instance Test.QuickCheck.Arbitrary.Arbitrary Cardano.Api.Block.BlockHeader

module Hydra.Cardano.Api.AddressInEra

-- | Construct a Shelley-style address from a verification key. This
--   address has no stake rights.
--   
--   TODO: <a>NetworkId</a> here is an annoying API because it requires a
--   network magic for testnet addresses. Nevertheless, the network magic
--   is only needed for Byron addresses; Shelley addresses use a different
--   kind of network discriminant which is currently fully captured as
--   'Mainnet | Testnet'.
--   
--   So, it would be a slightly better DX to use Mainnet | Testnet as an
--   interface here since we are only constructing Shelley addresses.
mkVkAddress :: IsShelleyBasedEra era => NetworkId -> VerificationKey PaymentKey -> AddressInEra era

-- | Construct a Shelley-style address from a Plutus script. This address
--   has no stake rights.
mkScriptAddress :: forall lang era. (IsShelleyBasedEra era, IsPlutusScriptLanguage lang) => NetworkId -> PlutusScript lang -> AddressInEra era

-- | From a ledger <tt>Addr</tt> to an api <a>AddressInEra</a>
fromLedgerAddr :: IsShelleyBasedEra era => Addr StandardCrypto -> AddressInEra era

-- | From an api <a>AddressInEra</a> to a ledger <tt>Addr</tt>
toLedgerAddr :: AddressInEra era -> Addr StandardCrypto

-- | Convert a plutus <a>Address</a> to an api <a>AddressInEra</a>. NOTE:
--   Requires the <a>Network</a> discriminator (Testnet or Mainnet) because
--   Plutus addresses are stripped off it.
fromPlutusAddress :: IsShelleyBasedEra era => Network -> Address -> AddressInEra era

module Hydra.Cardano.Api.Address
instance Test.QuickCheck.Arbitrary.Arbitrary (Cardano.Api.Address.Address Cardano.Api.Address.ByronAddr)

module Hydra.Cardano.Api.ReferenceTxInsScriptsInlineDatumsSupportedInEra

-- | Smart-constructor for
--   <a>ReferenceTxInsScriptsInlineDatumsSupportedInEra</a> to write
--   functions using inline datums that do not commit to a particular era.
class HasInlineDatums era
inlineDatumsSupportedInEra :: HasInlineDatums era => ReferenceTxInsScriptsInlineDatumsSupportedInEra era
instance Hydra.Cardano.Api.ReferenceTxInsScriptsInlineDatumsSupportedInEra.HasInlineDatums Cardano.Api.Eras.BabbageEra

module Hydra.Cardano.Api.ReferenceScript

-- | Construct a <a>ReferenceScript</a> from any given Plutus script.
--   
--   NOTE: The script is treated as a <a>PlutusScriptV2</a>
mkScriptRef :: SerialisedScript -> ReferenceScript Era

module Hydra.Cardano.Api.ScriptData

-- | Data-types that can be marshalled into a generic <a>ScriptData</a>
--   structure.
type ToScriptData a = ToData a

-- | Data-types that can be unmarshalled from a generic <a>ScriptData</a>
--   structure.
type FromScriptData a = FromData a

-- | Serialise some type into a generic script data.
toScriptData :: ToScriptData a => a -> HashableScriptData

-- | Deserialise some generic script data into some type.
fromScriptData :: FromScriptData a => HashableScriptData -> Maybe a

-- | Get the <a>HashableScriptData</a> associated to the a <a>TxOut</a>.
--   Note that this requires the <a>CtxTx</a> context. To get script data
--   in a <a>CtxUTxO</a> context, see <a>lookupScriptData</a>.
txOutScriptData :: TxOut CtxTx era -> Maybe HashableScriptData

-- | Lookup included datum of given <a>TxOut</a>.
lookupScriptData :: forall era. (UsesStandardCrypto era, Typeable (ShelleyLedgerEra era)) => Tx era -> TxOut CtxUTxO era -> Maybe HashableScriptData

-- | Convert a cardano-ledger script <tt>Data</tt> into a cardano-api
--   <a>ScriptDatum</a>.
fromLedgerData :: Data era -> HashableScriptData

-- | Convert a cardano-api script data into a cardano-ledger script
--   <tt>Data</tt>.
toLedgerData :: HashableScriptData -> Data era
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Api.ScriptData.ScriptData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Api.ScriptData.ScriptData
instance Test.QuickCheck.Arbitrary.Arbitrary Cardano.Api.ScriptData.ScriptData
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Api.ScriptData.HashableScriptData
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Api.ScriptData.HashableScriptData
instance Test.QuickCheck.Arbitrary.Arbitrary Cardano.Api.ScriptData.HashableScriptData

module Hydra.Cardano.Api.ScriptDataSupportedInEra

-- | Smart-constructor for <a>ScriptDataSupportedInEra</a> to write
--   functions manipulating scripts that do not commit to a particular era.
class HasScriptData era
scriptDataSupportedInEra :: HasScriptData era => ScriptDataSupportedInEra era
instance Hydra.Cardano.Api.ScriptDataSupportedInEra.HasScriptData Cardano.Api.Eras.AlonzoEra
instance Hydra.Cardano.Api.ScriptDataSupportedInEra.HasScriptData Cardano.Api.Eras.BabbageEra

module Hydra.Cardano.Api.ScriptDatum

-- | Construct a <a>ScriptDatum</a> for use as transaction witness.
mkScriptDatum :: ToScriptData a => a -> ScriptDatum WitCtxTxIn

module Hydra.Cardano.Api.ScriptHash

-- | Extract the payment part of an address, as a script hash.
getPaymentScriptHash :: AddressInEra era -> Maybe ScriptHash

-- | Like <a>hashScript</a>, but for a <a>ScriptInAnyLang</a>.
hashScriptInAnyLang :: ScriptInAnyLang -> ScriptHash

module Hydra.Cardano.Api.ScriptLanguageInEra

-- | Smart-constructor for <a>ScriptLanguageInEra</a> to write functions
--   manipulating scripts that do not commit to a particular era.
class HasScriptLanguage lang era
scriptLanguageInEra :: HasScriptLanguage lang era => ScriptLanguageInEra lang era
instance Hydra.Cardano.Api.ScriptLanguageInEra.HasScriptLanguage Cardano.Api.Script.PlutusScriptV1 Cardano.Api.Eras.AlonzoEra
instance Hydra.Cardano.Api.ScriptLanguageInEra.HasScriptLanguage Cardano.Api.Script.PlutusScriptV1 Cardano.Api.Eras.BabbageEra
instance Hydra.Cardano.Api.ScriptLanguageInEra.HasScriptLanguage Cardano.Api.Script.PlutusScriptV2 Cardano.Api.Eras.BabbageEra

module Hydra.Cardano.Api.TxId

-- | Convert a cardano-api <a>TxId</a> into a cardano-ledger <a>TxId</a>.
toLedgerTxId :: TxId -> TxId StandardCrypto

-- | Convert a cardano-ledger <a>TxId</a> into a cardano-api <a>TxId</a>.
fromLedgerTxId :: TxId StandardCrypto -> TxId

module Hydra.Cardano.Api.TxIn

-- | Create a <a>TxIn</a> (a.k.a UTXO) from a transaction and output index.
mkTxIn :: Tx era -> Word -> TxIn

-- | Attach some verification-key witness to a <a>TxIn</a>.
withWitness :: TxIn -> (TxIn, BuildTxWith BuildTx (Witness WitCtxTxIn Era))

-- | Access inputs of a transaction, as an ordered list.
txIns' :: Tx era -> [TxIn]

-- | Access inputs of a transaction, as an ordered set.
txInputSet :: Tx era -> Set TxIn

-- | Convert a cardano-ledger <a>TxIn</a> into a cardano-api <a>TxIn</a>
fromLedgerTxIn :: TxIn StandardCrypto -> TxIn

-- | Convert a cardano-api <a>TxIn</a> into a cardano-ledger <a>TxIn</a>
toLedgerTxIn :: TxIn -> TxIn StandardCrypto

-- | Convert a plutus' <tt>TxOutRef</tt> into a cardano-api <a>TxIn</a>
fromPlutusTxOutRef :: TxOutRef -> TxIn

-- | Convert a cardano-api <a>TxIn</a> into a plutus <tt>TxOutRef</tt>.
toPlutusTxOutRef :: TxIn -> TxOutRef

-- | A more random generator than the 'Arbitrary TxIn' from cardano-ledger.
genTxIn :: Gen TxIn
instance Test.QuickCheck.Arbitrary.Arbitrary Cardano.Api.TxIn.TxIn

module Hydra.Cardano.Api.TxOutDatum

-- | Construct a <a>TxOutDatum</a> to be included in the tx from some
--   serialisable data.
mkTxOutDatum :: forall era a. (ToScriptData a, HasScriptData era) => a -> TxOutDatum CtxTx era

-- | Construct a <a>TxOutDatum</a> as a <a>ScriptData</a> hash from some
--   serialisable data.
mkTxOutDatumHash :: forall era a ctx. (ToScriptData a, HasScriptData era) => a -> TxOutDatum ctx era

-- | Construct an inline <a>TxOutDatum</a> from some serialisable data.
mkTxOutDatumInline :: forall era a ctx. (ToScriptData a, HasInlineDatums era) => a -> TxOutDatum ctx era

module Hydra.Cardano.Api.TxOutValue

-- | Inject some <a>Value</a> into a <a>TxOutValue</a>
mkTxOutValue :: forall era. HasMultiAsset era => Value -> TxOutValue era

module Hydra.Cardano.Api.TxScriptValidity

-- | Convert a cardano-api <a>TxScriptValidity</a> into a cardano-ledger
--   <tt>IsValid</tt> boolean wrapper.
toLedgerScriptValidity :: TxScriptValidity era -> IsValid

module Hydra.Cardano.Api.Tx

-- | Sign transaction using the provided secret key It only works for tx
--   not containing scripts. You can't sign a script utxo with this.
signTx :: IsShelleyBasedEra era => SigningKey PaymentKey -> Tx era -> Tx era

-- | Get the UTxO that are produced by some transaction. XXX: Defined here
--   to avoid cyclic module dependency
utxoProducedByTx :: Tx Era -> UTxO

-- | Get explicit fees allocated to a transaction.
--   
--   NOTE: this function is partial and throws if given a Byron transaction
--   for which fees are necessarily implicit.
txFee' :: HasCallStack => Tx era -> Lovelace

-- | Calculate the total execution cost of a transaction, according to the
--   budget assigned to each redeemer.
totalExecutionCost :: PParams (ShelleyLedgerEra Era) -> Tx Era -> Lovelace

-- | Convert a cardano-api <a>Tx</a> into a cardano-ledger <a>Tx</a> in the
--   Babbage era
toLedgerTx :: Tx Era -> Tx (ShelleyLedgerEra Era)

-- | Convert a cardano-ledger's <a>Tx</a> in the Babbage era into a
--   cardano-api <a>Tx</a>.
fromLedgerTx :: Tx (ShelleyLedgerEra Era) -> Tx Era


-- | Shamelessly stolen from cardan-api <a>SerialiseUsing</a> module.
--   
--   With some minor modifications of also using encodeUtf8 in
--   <a>IsString</a> instance.
--   
--   XXX: Expose / contribute upstream
module Hydra.Cardano.Api.UsingRawBytesHex

-- | For use with <tt>deriving via</tt>, to provide instances for any/all
--   of <a>Show</a>, <a>IsString</a>, <a>ToJSON</a>, <a>FromJSON</a>,
--   <a>ToJSONKey</a>, FromJSONKey' using a hex encoding, based on the
--   <a>SerialiseAsRawBytes</a> instance.
--   
--   <pre>
--   deriving (Show, IsString) via (UsingRawBytesHex Blah)
--   deriving (ToJSON, FromJSON) via (UsingRawBytesHex Blah)
--   deriving (ToJSONKey, FromJSONKey) via (UsingRawBytesHex Blah)
--   </pre>
newtype UsingRawBytesHex a
UsingRawBytesHex :: a -> UsingRawBytesHex a

-- | Don't use this, use <a>deserialiseFromRawBytesHex</a> instead.
deserialiseFromRawBytesBase16 :: SerialiseAsRawBytes a => ByteString -> Either String (UsingRawBytesHex a)
unsafeDeserialiseFromRawBytesBase16 :: (HasCallStack, SerialiseAsRawBytes a) => ByteString -> a
instance Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a => GHC.Show.Show (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)
instance Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a => Data.String.IsString (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)
instance Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a => Data.Aeson.Types.ToJSON.ToJSON (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)
instance (Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a, Data.Typeable.Internal.Typeable a) => Data.Aeson.Types.FromJSON.FromJSON (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)
instance Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a => Data.Aeson.Types.ToJSON.ToJSONKey (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)
instance (Cardano.Api.SerialiseRaw.SerialiseAsRawBytes a, Data.Typeable.Internal.Typeable a) => Data.Aeson.Types.FromJSON.FromJSONKey (Hydra.Cardano.Api.UsingRawBytesHex.UsingRawBytesHex a)

module Hydra.Cardano.Api.ValidityInterval
toLedgerValidityInterval :: (TxValidityLowerBound era, TxValidityUpperBound era) -> ValidityInterval
fromLedgerValidityInterval :: ValidityInterval -> (TxValidityLowerBound Era, TxValidityUpperBound Era)
instance Test.QuickCheck.Arbitrary.Arbitrary (Cardano.Api.TxBody.TxValidityLowerBound Hydra.Cardano.Api.Prelude.Era)
instance Test.QuickCheck.Arbitrary.Arbitrary (Cardano.Api.TxBody.TxValidityUpperBound Hydra.Cardano.Api.Prelude.Era)

module Hydra.Cardano.Api.Value

-- | Calculate minimum value for a UTxO. Note that cardano-api defines a
--   <a>calculateMinimumUTxO</a> function but it is flawed (see NOTE below)
--   and has an unsatisfactory API because it works across multiple era.
--   
--   This one is specialized to Babbage and therefore, can be pure.
minUTxOValue :: ProtocolParameters -> TxOut CtxTx Era -> Value

-- | Count number of assets in a <a>Value</a>.
valueSize :: Value -> Int

-- | Access minted assets of a transaction, as an ordered association list.
txMintAssets :: Tx era -> [(AssetId, Quantity)]

-- | Convert a cardano-ledger <a>Value</a> into a cardano-api <a>Value</a>.
fromLedgerValue :: MaryValue StandardCrypto -> Value

-- | Convert a cardano-api <a>Value</a> into a cardano-ledger <a>Value</a>.
toLedgerValue :: Value -> MaryValue StandardCrypto

-- | Convert a plutus <a>Value</a> into a cardano-api <a>Value</a>.
fromPlutusValue :: Value -> Value

-- | Convert a cardano-api <a>Value</a> into a plutus <a>Value</a>
toPlutusValue :: Value -> Value

-- | Convert Cardano api <a>PolicyId</a> to Plutus <a>CurrencySymbol</a>.
toPlutusCurrencySymbol :: PolicyId -> CurrencySymbol

-- | Convert a plutus <a>CurrencySymbol</a> into a cardano-api
--   <a>PolicyId</a>.
fromPlutusCurrencySymbol :: CurrencySymbol -> PolicyId

-- | Convert Cardano api <a>PolicyId</a> to Cardano ledger
--   <tt>PolicyID</tt>.
toLedgerPolicyID :: PolicyId -> PolicyID StandardCrypto

module Hydra.Cardano.Api.TxOut
txOuts' :: Tx era -> [TxOut CtxTx era]

-- | Automatically balance a given output with the minimum required amount.
--   Number of assets, presence of datum and/or reference scripts may
--   affect this minimum value.
mkTxOutAutoBalance :: ProtocolParameters -> AddressInEra Era -> Value -> TxOutDatum CtxTx Era -> ReferenceScript Era -> TxOut CtxTx Era

-- | Alter the address of a <a>TxOut</a> with the given transformation.
modifyTxOutAddress :: (AddressInEra era -> AddressInEra era) -> TxOut ctx era -> TxOut ctx era

-- | Alter the value of a <a>TxOut</a> with the given transformation.
modifyTxOutValue :: HasMultiAsset era => (Value -> Value) -> TxOut ctx era -> TxOut ctx era

-- | Alter the datum of a <a>TxOut</a> with the given transformation.
modifyTxOutDatum :: (TxOutDatum ctx0 era -> TxOutDatum ctx1 era) -> TxOut ctx0 era -> TxOut ctx1 era

-- | Find first <a>TxOut</a> which pays to given address and also return
--   the corresponding <a>TxIn</a> to reference it.
findTxOutByAddress :: AddressInEra era -> Tx era -> Maybe (TxIn, TxOut CtxTx era)
findTxOutByScript :: forall lang. IsPlutusScriptLanguage lang => UTxO -> PlutusScript lang -> Maybe (TxIn, TxOut CtxUTxO Era)

-- | Convert a cardano-ledger <a>TxOut</a> into a cardano-api <a>TxOut</a>
fromLedgerTxOut :: TxOut (ShelleyLedgerEra Era) -> TxOut ctx Era

-- | Convert a cardano-api <a>TxOut</a> into a cardano-ledger <a>TxOut</a>
toLedgerTxOut :: TxOut CtxUTxO Era -> TxOut (ShelleyLedgerEra Era)

-- | Convert a plutus <a>TxOut</a> into a cardano-api <a>TxOut</a>. NOTE:
--   Reference scripts are not resolvable right now. NOTE: Requires the
--   <a>Network</a> discriminator (Testnet or Mainnet) because Plutus
--   addresses are stripped off it.
fromPlutusTxOut :: (HasMultiAsset era, HasScriptData era, HasInlineDatums era, IsShelleyBasedEra era) => Network -> TxOut -> TxOut CtxUTxO era

-- | Convert a cardano-api <a>TxOut</a> into a plutus <a>TxOut</a>. Returns
--   <a>Nothing</a> if a byron address is used in the given <a>TxOut</a>.
toPlutusTxOut :: TxOut CtxUTxO Era -> Maybe TxOut

module Hydra.Cardano.Api.UTxO

-- | Get a human-readable pretty text representation of a UTxO.
renderUTxO :: IsString str => UTxO -> str

-- | Construct a UTxO from a transaction. This constructs artificial
--   <a>TxIn</a> (a.k.a output reference) from the transaction itself,
--   zipping them to the outputs they correspond to.
utxoFromTx :: Tx Era -> UTxO
toLedgerUTxO :: UTxO -> UTxO LedgerEra
fromLedgerUTxO :: UTxO LedgerEra -> UTxO

module Hydra.Cardano.Api.CtxTx

-- | A convenient type-class for transforming types in <a>CtxUTxO</a> to
--   <a>CtxTx</a>.
--   
--   See also <tt>ToUtxoContext</tt> for the reverse.
class ToTxContext f
toTxContext :: ToTxContext f => f CtxUTxO era -> f CtxTx era
instance Hydra.Cardano.Api.CtxTx.ToTxContext Cardano.Api.TxBody.TxOutDatum
instance Hydra.Cardano.Api.CtxTx.ToTxContext Cardano.Api.TxBody.TxOut

module Hydra.Cardano.Api.TxBody

-- | Find and deserialise from <a>ScriptData</a>, a redeemer from the
--   transaction associated to the given input.
findRedeemerSpending :: FromScriptData a => Tx Era -> TxIn -> Maybe a
findRedeemerMinting :: forall a. FromScriptData a => Tx Era -> PolicyId -> Maybe a
findScriptMinting :: forall lang. () => Tx Era -> PolicyId -> Maybe (PlutusScript lang)
lookupRedeemer :: forall a era. (FromScriptData a, Era (ShelleyLedgerEra era)) => RdmrPtr -> TxBodyScriptData era -> Maybe a

module Hydra.Cardano.Api.VerificationKey
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Api.Keys.Class.VerificationKey Cardano.Api.Keys.Shelley.PaymentKey)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Api.Keys.Class.VerificationKey Cardano.Api.Keys.Shelley.PaymentKey)

module Hydra.Cardano.Api.Witness

-- | Construct a full script witness from a datum, a redeemer and a full
--   <a>PlutusScript</a>. That witness has no execution budget.
mkScriptWitness :: forall ctx era lang. (IsPlutusScriptLanguage lang, HasScriptLanguage lang era) => PlutusScript lang -> ScriptDatum ctx -> ScriptRedeemer -> ScriptWitness ctx era

-- | Construct a reference script witness, only referring to a <a>TxIn</a>
--   which is expected to contain the given script (only required to
--   satisfy types).
mkScriptReference :: forall ctx era lang. (IsPlutusScriptLanguage lang, HasScriptLanguage lang era) => TxIn -> PlutusScript lang -> ScriptDatum ctx -> ScriptRedeemer -> ScriptWitness ctx era


-- | A Haskell API for Cardano, tailored to the Hydra project.
--   
--   This package provides a wrapper around the <tt>cardano-ledger</tt>,
--   <tt>cardano-api</tt> and <tt>plutus</tt> libraries with extra
--   utilities and function commonly used across the Hydra project.
--   
--   NOTE: We always use the **latest era** available in our codebase, so
--   to ease type signatures and notations, we specialize any type of the
--   <tt>cardano-api</tt> normally parameterized by an era to the latest
--   era <a>Era</a>. As a consequence, we've defined pattern synonyms for
--   most constructors in the <tt>cardano-api</tt> to also get rid of era
--   witnesses.
--   
--   NOTE: This module also uses the **latest plutus version** available
--   (currently <a>PlutusScriptV2</a>). So make sure that you give it a
--   plutus script of the right version (e.g. when compiling and
--   serializing plutus-tx).
module Hydra.Cardano.Api
data StandardCrypto
type Era = BabbageEra
type LedgerEra = BabbageEra StandardCrypto
type Witness witCtx = Witness witCtx Era
type TxValidityUpperBound = TxValidityUpperBound Era
type TxValidityLowerBound = TxValidityLowerBound Era
type TxScriptValidity = TxScriptValidity Era
type TxOutDatum ctx = TxOutDatum ctx Era
type ReferenceScript = ReferenceScript Era
type TxOut ctx = TxOut ctx Era
type TxMintValue build = TxMintValue build Era
type TxMetadataInEra = TxMetadataInEra Era
type TxInsCollateral = TxInsCollateral Era
type TxInsReference buidl = TxInsReference buidl Era
type TxIns buidl = [(TxIn, BuildTxWith buidl (Witness WitCtxTxIn Era))]
type TxFee = TxFee Era
type TxExtraKeyWitnesses = TxExtraKeyWitnesses Era
type TxBodyScriptData = TxBodyScriptData Era
type TxBodyContent build = TxBodyContent build Era
type TxBody = TxBody Era
type TxAuxScripts = TxAuxScripts Era
type Tx = Tx Era
type ScriptWitness witCtx = ScriptWitness witCtx Era
type ScriptLanguage = ScriptLanguage PlutusScriptV2
type ScriptInEra = ScriptInEra Era
type Script = Script PlutusScriptV2
type PlutusScript = PlutusScript PlutusScriptV2
type KeyWitness = KeyWitness Era
type BalancedTxBody = BalancedTxBody Era
type AddressTypeInEra addrType = AddressTypeInEra addrType Era
type AddressInEra = AddressInEra Era
pattern ScriptWitness :: ScriptWitnessInCtx ctx -> ScriptWitness ctx -> Witness ctx
pattern KeyWitness :: KeyWitnessInCtx ctx -> Witness ctx
pattern TxValidityUpperBound :: SlotNo -> TxValidityUpperBound
txValidityUpperBound :: TxValidityUpperBound -> SlotNo
pattern TxValidityNoUpperBound :: TxValidityUpperBound
pattern TxValidityLowerBound :: SlotNo -> TxValidityLowerBound
txValidityLowerBound :: TxValidityLowerBound -> SlotNo
pattern TxValidityNoLowerBound :: TxValidityLowerBound
pattern TxScriptValidity :: ScriptValidity -> TxScriptValidity
txScriptValidity' :: TxScriptValidity -> ScriptValidity
pattern TxScriptValidityNone :: TxScriptValidity
pattern TxOutDatumInline :: HashableScriptData -> TxOutDatum ctx
txOutDatumInlineScriptData :: TxOutDatum ctx -> HashableScriptData
pattern TxOutDatumInTx :: HashableScriptData -> TxOutDatum CtxTx
txOutDatumScriptData :: TxOutDatum CtxTx -> HashableScriptData
pattern TxOutDatumHash :: Hash ScriptData -> TxOutDatum ctx
txOutDatumHash :: TxOutDatum ctx -> Hash ScriptData
pattern TxOutDatumNone :: TxOutDatum ctx
pattern ReferenceScriptNone :: ReferenceScript Era
pattern ReferenceScript :: ScriptInAnyLang -> ReferenceScript
referenceScript :: ReferenceScript -> ScriptInAnyLang

-- | TxOut specialized for <a>Era</a>
pattern TxOut :: AddressInEra -> Value -> TxOutDatum ctx -> ReferenceScript -> TxOut ctx
txOutAddress :: TxOut ctx -> AddressInEra
txOutValue :: TxOut ctx -> Value
txOutDatum :: TxOut ctx -> TxOutDatum ctx
txOutReferenceScript :: TxOut ctx -> ReferenceScript
pattern TxMintValue :: Value -> BuildTxWith build (Map PolicyId (ScriptWitness WitCtxMint)) -> TxMintValue build
txMintValueInEra :: TxMintValue build -> Value
txMintValueScriptWitnesses :: TxMintValue build -> BuildTxWith build (Map PolicyId (ScriptWitness WitCtxMint))
pattern TxMintValueNone :: TxMintValue build
pattern TxMetadataInEra :: TxMetadata -> TxMetadataInEra
txMetadataInEra :: TxMetadataInEra -> TxMetadata
pattern TxMetadataNone :: TxMetadataInEra
pattern TxInsCollateral :: [TxIn] -> TxInsCollateral
txInsCollateral' :: TxInsCollateral -> [TxIn]
pattern TxInsCollateralNone :: TxInsCollateral
pattern TxInsReference :: [TxIn] -> TxInsReference buidl
txInsReference' :: TxInsReference buidl -> [TxIn]
pattern TxInsReferenceNone :: TxInsReference buidl
pattern TxFeeExplicit :: Lovelace -> TxFee
txFeeExplicit :: TxFee -> Lovelace
pattern TxExtraKeyWitnesses :: [Hash PaymentKey] -> TxExtraKeyWitnesses
txExtraKeyWitnesses :: TxExtraKeyWitnesses -> [Hash PaymentKey]
pattern TxExtraKeyWitnessesNone :: TxExtraKeyWitnesses
pattern TxBodyScriptData :: TxDats (ShelleyLedgerEra Era) -> Redeemers (ShelleyLedgerEra Era) -> TxBodyScriptData
txBodyScriptDatums :: TxBodyScriptData -> TxDats (ShelleyLedgerEra Era)
txBodyScriptRedeemers :: TxBodyScriptData -> Redeemers (ShelleyLedgerEra Era)
pattern TxBodyNoScriptData :: TxBodyScriptData
pattern TxBodyContent :: TxIns build -> TxInsCollateral -> TxInsReference build -> [TxOut CtxTx] -> TxTotalCollateral Era -> TxReturnCollateral CtxTx Era -> TxFee -> (TxValidityLowerBound, TxValidityUpperBound) -> TxMetadataInEra -> TxAuxScripts -> TxExtraKeyWitnesses -> BuildTxWith build (Maybe ProtocolParameters) -> TxWithdrawals build Era -> TxCertificates build Era -> TxUpdateProposal Era -> TxMintValue build -> TxScriptValidity -> TxBodyContent build
txIns :: TxBodyContent build -> TxIns build
txInsCollateral :: TxBodyContent build -> TxInsCollateral
txInsReference :: TxBodyContent build -> TxInsReference build
txOuts :: TxBodyContent build -> [TxOut CtxTx]
txTotalCollateral :: TxBodyContent build -> TxTotalCollateral Era
txReturnCollateral :: TxBodyContent build -> TxReturnCollateral CtxTx Era
txFee :: TxBodyContent build -> TxFee
txValidityRange :: TxBodyContent build -> (TxValidityLowerBound, TxValidityUpperBound)
txMetadata :: TxBodyContent build -> TxMetadataInEra
txAuxScripts :: TxBodyContent build -> TxAuxScripts
txExtraKeyWits :: TxBodyContent build -> TxExtraKeyWitnesses
txProtocolParams :: TxBodyContent build -> BuildTxWith build (Maybe ProtocolParameters)
txWithdrawals :: TxBodyContent build -> TxWithdrawals build Era
txCertificates :: TxBodyContent build -> TxCertificates build Era
txUpdateProposal :: TxBodyContent build -> TxUpdateProposal Era
txMintValue :: TxBodyContent build -> TxMintValue build
txScriptValidity :: TxBodyContent build -> TxScriptValidity
pattern TxBody :: TxBodyContent ViewTx -> TxBody
txBodyContent :: TxBody -> TxBodyContent ViewTx
pattern TxAuxScripts :: [ScriptInEra] -> TxAuxScripts
txAuxScripts' :: TxAuxScripts -> [ScriptInEra]
pattern TxAuxScriptsNone :: TxAuxScripts
pattern ShelleyTxBody :: TxBody LedgerEra -> [Script LedgerEra] -> TxBodyScriptData -> Maybe (AuxiliaryData LedgerEra) -> TxScriptValidity -> TxBody
txBodyLedgerTxBody :: TxBody -> TxBody LedgerEra
txBodyScripts :: TxBody -> [Script LedgerEra]
txBodyScriptData :: TxBody -> TxBodyScriptData
txBodyAuxiliaryData :: TxBody -> Maybe (AuxiliaryData LedgerEra)
txBodyScriptValidity :: TxBody -> TxScriptValidity
pattern Tx :: TxBody -> [KeyWitness] -> Tx
txBody :: Tx -> TxBody
txKeyWitnesses :: Tx -> [KeyWitness]
pattern PlutusScriptWitness :: PlutusScript -> ScriptDatum witctx -> ScriptRedeemer -> ExecutionUnits -> ScriptWitness witctx
plutusScriptWitnessScript :: ScriptWitness witctx -> PlutusScript
plutusScriptWitnessDatum :: ScriptWitness witctx -> ScriptDatum witctx
plutusScriptWitnessRedeemer :: ScriptWitness witctx -> ScriptRedeemer
plutusScriptWitnessExecutionUnits :: ScriptWitness witctx -> ExecutionUnits
pattern PlutusScriptLanguage :: ScriptLanguage
pattern PlutusScript :: PlutusScript -> Script
plutusScript :: Script -> PlutusScript
pattern PlutusScriptSerialised :: ShortByteString -> PlutusScript
plutusScriptSerialised :: PlutusScript -> ShortByteString
pattern ShelleyKeyWitness :: WitVKey 'Witness StandardCrypto -> KeyWitness
shelleyKeyWitness :: KeyWitness -> WitVKey 'Witness StandardCrypto
pattern ShelleyBootstrapWitness :: BootstrapWitness StandardCrypto -> KeyWitness
shelleyBootstrapWitness :: KeyWitness -> BootstrapWitness StandardCrypto
pattern BalancedTxBody :: TxBodyContent BuildTx -> TxBody -> TxOut CtxTx -> Lovelace -> BalancedTxBody
balancedTxBodyContent :: BalancedTxBody -> TxBodyContent BuildTx
balancedTxBody :: BalancedTxBody -> TxBody
balancedTxChangeOutput :: BalancedTxBody -> TxOut CtxTx
balancedTxFee :: BalancedTxBody -> Lovelace
pattern ShelleyAddressInAnyEra :: AddressTypeInEra ShelleyAddr
pattern ByronAddressInAnyEra :: AddressTypeInEra ByronAddr
pattern ByronAddressInEra :: Address ByronAddr -> AddressInEra
byronAddress :: AddressInEra -> Address ByronAddr
pattern ShelleyAddressInEra :: Address ShelleyAddr -> AddressInEra
address :: AddressInEra -> Address ShelleyAddr
type UTxO = UTxO' (TxOut CtxUTxO Era)

-- | Newtype with phantom types mostly required to work around the poor
--   interface of <a>UTXO</a> and provide <a>Monoid</a> and <a>Foldable</a>
--   instances to make utxo manipulation bareable.
newtype UTxO' out
UTxO :: Map TxIn out -> UTxO' out
anyAddressInEra :: CardanoEra era -> AddressAny -> Either String (AddressInEra era)
anyAddressInShelleyBasedEra :: IsShelleyBasedEra era => AddressAny -> AddressInEra era
byronAddressInEra :: Address ByronAddr -> AddressInEra era
isKeyAddress :: AddressInEra era -> Bool
lexPlausibleAddressString :: Parser Text
makeByronAddress :: NetworkId -> VerificationKey ByronKey -> Address ByronAddr
makeByronAddressInEra :: NetworkId -> VerificationKey ByronKey -> AddressInEra era
makeShelleyAddress :: NetworkId -> PaymentCredential -> StakeAddressReference -> Address ShelleyAddr
makeShelleyAddressInEra :: IsShelleyBasedEra era => NetworkId -> PaymentCredential -> StakeAddressReference -> AddressInEra era
makeStakeAddress :: NetworkId -> StakeCredential -> StakeAddress
parseAddressAny :: Parser AddressAny
shelleyAddressInEra :: IsShelleyBasedEra era => Address ShelleyAddr -> AddressInEra era
stakeAddressCredential :: StakeAddress -> StakeCredential
toAddressAny :: Address addr -> AddressAny
chainPointToHeaderHash :: ChainPoint -> Maybe (Hash BlockHeader)
chainPointToSlotNo :: ChainPoint -> Maybe SlotNo
chainTipToChainPoint :: ChainTip -> ChainPoint
getBlockHeader :: Block era -> BlockHeader
makeChainTip :: WithOrigin BlockNo -> ChainPoint -> ChainTip
makeGenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
makeMIRCertificate :: MIRPot -> MIRTarget -> Certificate
makeStakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
makeStakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
makeStakeAddressRegistrationCertificate :: StakeCredential -> Certificate
makeStakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
makeStakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
getIsCardanoEraConstraint :: CardanoEra era -> (IsCardanoEra era => a) -> a
constructBalancedTx :: IsShelleyBasedEra era => TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> UTxO era -> ProtocolParameters -> LedgerEpochInfo -> SystemStart -> Set PoolId -> [ShelleyWitnessSigningKey] -> Either TxBodyErrorAutoBalance (Tx era)
notScriptLockedTxIns :: [TxIn] -> UTxO era -> Either ScriptLockedTxInsError ()
renderNotScriptLockedTxInsError :: ScriptLockedTxInsError -> Text
renderTxInsExistError :: TxInsExistError -> Text
txInsExistInUTxO :: [TxIn] -> UTxO era -> Either TxInsExistError ()
determineEra :: ConsensusModeParams mode -> LocalNodeConnectInfo mode -> IO (Either AcquiringFailure AnyCardanoEra)
executeQueryCardanoMode :: CardanoEra era -> NetworkId -> QueryInMode CardanoMode (Either EraMismatch result) -> IO (Either QueryConvenienceError result)
queryStateForBalancedTx :: CardanoEra era -> NetworkId -> [TxIn] -> IO (Either QueryConvenienceError (UTxO era, ProtocolParameters, EraHistory CardanoMode, SystemStart, Set PoolId))
renderQueryConvenienceError :: QueryConvenienceError -> Text
deserialiseAnyVerificationKey :: ByteString -> Either InputDecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyBech32 :: ByteString -> Either Bech32DecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyTextEnvelope :: ByteString -> Either TextEnvelopeError SomeAddressVerificationKey
deserialiseInput :: AsType a -> NonEmpty (InputFormat a) -> ByteString -> Either InputDecodeError a
deserialiseInputAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> ByteString -> Either InputDecodeError b
renderInputDecodeError :: InputDecodeError -> Text
renderSomeAddressVerificationKey :: SomeAddressVerificationKey -> Text
readEnvSocketPath :: IO (Either EnvSocketError SocketPath)
renderEnvSocketError :: EnvSocketError -> Text
anyCardanoEra :: CardanoEra era -> AnyCardanoEra
cardanoEraStyle :: CardanoEra era -> CardanoEraStyle era
shelleyBasedToCardanoEra :: ShelleyBasedEra era -> CardanoEra era
throwErrorAsException :: Error e => e -> IO a
calculateMinimumUTxO :: ShelleyBasedEra era -> TxOut CtxTx era -> BundledProtocolParameters era -> Either MinimumUTxOError Lovelace
estimateTransactionFee :: IsShelleyBasedEra era => NetworkId -> Natural -> Natural -> Tx era -> Int -> Int -> Int -> Int -> Lovelace
estimateTransactionKeyWitnessCount :: TxBodyContent BuildTx era -> Word
evaluateTransactionBalance :: IsShelleyBasedEra era => BundledProtocolParameters era -> Set PoolId -> UTxO era -> TxBody era -> TxOutValue era
evaluateTransactionExecutionUnits :: SystemStart -> LedgerEpochInfo -> BundledProtocolParameters era -> UTxO era -> TxBody era -> Either TransactionValidityError (Map ScriptWitnessIndex (Either ScriptExecutionError ExecutionUnits))
evaluateTransactionFee :: IsShelleyBasedEra era => BundledProtocolParameters era -> TxBody era -> Word -> Word -> Lovelace
makeTransactionBodyAutoBalance :: IsShelleyBasedEra era => SystemStart -> LedgerEpochInfo -> ProtocolParameters -> Set PoolId -> UTxO era -> TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> Either TxBodyErrorAutoBalance (BalancedTxBody era)
mapTxScriptWitnesses :: (forall witctx. () => ScriptWitnessIndex -> ScriptWitness witctx era -> Either TxBodyErrorAutoBalance (ScriptWitness witctx era)) -> TxBodyContent BuildTx era -> Either TxBodyErrorAutoBalance (TxBodyContent BuildTx era)
transactionFee :: IsShelleyBasedEra era => Natural -> Natural -> Tx era -> Lovelace
writeByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFile :: MonadIO m => FilePath -> ByteString -> m (Either (FileError ()) ())
writeLazyByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError ()) ())
writeLazyByteStringOutput :: MonadIO m => Maybe FilePath -> ByteString -> m (Either (FileError ()) ())
writeTextFile :: MonadIO m => FilePath -> Text -> m (Either (FileError ()) ())
writeTextFileWithOwnerPermissions :: FilePath -> Text -> IO (Either (FileError ()) ())
writeTextOutput :: MonadIO m => Maybe FilePath -> Text -> m (Either (FileError ()) ())
connectToLocalNode :: LocalNodeConnectInfo mode -> LocalNodeClientProtocolsInMode mode -> IO ()
connectToLocalNodeWithVersion :: LocalNodeConnectInfo mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> IO ()
consensusModeOnly :: ConsensusModeParams mode -> ConsensusMode mode
getLocalChainTip :: LocalNodeConnectInfo mode -> IO ChainTip
mkLocalNodeClientParams :: ConsensusBlockForMode mode ~ block => ConsensusModeParams mode -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode mode) -> LocalNodeClientParams
queryNodeLocalState :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> QueryInMode mode result -> IO (Either AcquiringFailure result)
queryTxMonitoringLocal :: LocalNodeConnectInfo mode -> LocalTxMonitoringQuery mode -> IO (LocalTxMonitoringResult mode)
submitTxToNodeLocal :: LocalNodeConnectInfo mode -> TxInMode mode -> IO (SubmitResult (TxValidationErrorInMode mode))
determineEraExpr :: ConsensusModeParams mode -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError AnyCardanoEra)
executeLocalStateQueryExpr :: LocalNodeConnectInfo mode -> Maybe ChainPoint -> LocalStateQueryExpr (BlockInMode mode) ChainPoint (QueryInMode mode) () IO a -> IO (Either AcquiringFailure a)
queryExpr :: QueryInMode mode a -> LocalStateQueryExpr block point (QueryInMode mode) r IO (Either UnsupportedNtcVersionError a)
generateInsecureSigningKey :: (Key keyrole, SerialiseAsRawBytes (SigningKey keyrole)) => StdGen -> AsType keyrole -> IO (SigningKey keyrole, StdGen)
generateSigningKey :: Key keyrole => AsType keyrole -> IO (SigningKey keyrole)
readKeyFile :: AsType a -> NonEmpty (InputFormat a) -> FilePath -> IO (Either (FileError InputDecodeError) a)
readKeyFileAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError InputDecodeError) b)
readKeyFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError InputDecodeError) a)
applyBlock :: Env -> LedgerState -> ValidationMode -> Block era -> Either LedgerStateError (LedgerState, [LedgerEvent])
chainSyncClientPipelinedWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClientPipelined (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClientPipelined (BlockInMode CardanoMode) ChainPoint ChainTip m a
chainSyncClientWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClient (BlockInMode CardanoMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClient (BlockInMode CardanoMode) ChainPoint ChainTip m a
decodeLedgerState :: Decoder s LedgerState
encodeLedgerState :: LedgerState -> Encoding
envSecurityParam :: Env -> Word64
foldBlocks :: FilePath -> FilePath -> ValidationMode -> a -> (Env -> LedgerState -> [LedgerEvent] -> BlockInMode CardanoMode -> a -> IO a) -> ExceptT FoldBlocksError IO a
initialLedgerState :: FilePath -> ExceptT InitialLedgerStateError IO (Env, LedgerState)
renderFoldBlocksError :: FoldBlocksError -> Text
renderGenesisConfigError :: GenesisConfigError -> Text
renderInitialLedgerStateError :: InitialLedgerStateError -> Text
renderLedgerStateError :: LedgerStateError -> Text
renderMode :: AnyConsensusMode -> Text
toEraInMode :: CardanoEra era -> ConsensusMode mode -> Maybe (EraInMode era mode)
fromNetworkMagic :: NetworkMagic -> NetworkId
toNetworkMagic :: NetworkId -> NetworkMagic
getHotKey :: OperationalCertificate -> VerificationKey KesKey
getKesPeriod :: OperationalCertificate -> Word
getOpCertCount :: OperationalCertificate -> Word64
issueOperationalCertificate :: VerificationKey KesKey -> Either (SigningKey StakePoolKey) (SigningKey GenesisDelegateExtendedKey) -> KESPeriod -> OperationalCertificateIssueCounter -> Either OperationalCertIssueError (OperationalCertificate, OperationalCertificateIssueCounter)
bundleProtocolParams :: CardanoEra era -> ProtocolParameters -> BundledProtocolParameters era
fromLedgerPParams :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> ProtocolParameters
makePraosNonce :: ByteString -> PraosNonce
makeShelleyUpdateProposal :: ProtocolParametersUpdate -> [Hash GenesisKey] -> EpochNo -> UpdateProposal
toLedgerPParams :: ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era)
unbundleProtocolParams :: BundledProtocolParameters era -> ProtocolParameters
validateCostModel :: PlutusScriptVersion lang -> CostModel -> Either InvalidCostModel ()
getProgress :: SlotNo -> EraHistory mode -> Either PastHorizonException (RelativeTime, SlotLength)
slotToEpoch :: SlotNo -> EraHistory mode -> Either PastHorizonException (EpochNo, SlotsInEpoch, SlotsToEpochEnd)
toLedgerEpochInfo :: EraHistory mode -> LedgerEpochInfo
eraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era
eraOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ShelleyBasedEra era
examplePlutusScriptAlwaysFails :: WitCtx witctx -> PlutusScript PlutusScriptV1
examplePlutusScriptAlwaysSucceeds :: WitCtx witctx -> PlutusScript PlutusScriptV1
hashScript :: Script lang -> ScriptHash
languageOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ScriptLanguage lang
scriptWitnessScript :: ScriptWitness witctx era -> Maybe (ScriptInEra era)
toScriptInAnyLang :: Script lang -> ScriptInAnyLang
toScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)
getOriginalScriptDataBytes :: HashableScriptData -> ByteString
getScriptData :: HashableScriptData -> ScriptData
hashScriptData :: HashableScriptData -> Hash ScriptData
hashScriptDataBytes :: HashableScriptData -> Hash ScriptData
scriptDataFromJson :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonError HashableScriptData
scriptDataJsonToHashable :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonBytesError HashableScriptData
scriptDataToJson :: ScriptDataJsonSchema -> HashableScriptData -> Value
unsafeHashableScriptData :: ScriptData -> HashableScriptData
validateScriptData :: ScriptData -> Either ScriptDataRangeError ()
deserialiseAnyOfFromBech32 :: [FromSomeType SerialiseAsBech32 b] -> Text -> Either Bech32DecodeError b
deserialiseFromBech32 :: SerialiseAsBech32 a => AsType a -> Text -> Either Bech32DecodeError a
serialiseToBech32 :: SerialiseAsBech32 a => a -> Text
deserialiseFromJSON :: FromJSON a => AsType a -> ByteString -> Either JsonDecodeError a
prettyPrintJSON :: ToJSON a => a -> ByteString
readFileJSON :: FromJSON a => AsType a -> FilePath -> IO (Either (FileError JsonDecodeError) a)
serialiseToJSON :: ToJSON a => a -> ByteString
writeFileJSON :: ToJSON a => FilePath -> a -> IO (Either (FileError ()) ())
deserialiseFromTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> TextEnvelopeCddl -> Either TextEnvelopeCddlError b
deserialiseTxLedgerCddl :: IsCardanoEra era => CardanoEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (Tx era)
deserialiseWitnessLedgerCddl :: ShelleyBasedEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (KeyWitness era)
readFileTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> FilePath -> IO (Either (FileError TextEnvelopeCddlError) b)
serialiseTxLedgerCddl :: IsCardanoEra era => Tx era -> TextEnvelopeCddl
serialiseWitnessLedgerCddl :: ShelleyBasedEra era -> KeyWitness era -> TextEnvelopeCddl
writeTxFileTextEnvelopeCddl :: IsCardanoEra era => FilePath -> Tx era -> IO (Either (FileError ()) ())
writeTxWitnessFileTextEnvelopeCddl :: ShelleyBasedEra era -> FilePath -> KeyWitness era -> IO (Either (FileError ()) ())
deserialiseFromRawBytesHex :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either RawBytesHexError a
eitherDeserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
serialiseToRawBytesHex :: SerialiseAsRawBytes a => a -> ByteString
serialiseToRawBytesHexText :: SerialiseAsRawBytes a => a -> Text
deserialiseFromTextEnvelope :: HasTextEnvelope a => AsType a -> TextEnvelope -> Either TextEnvelopeError a
deserialiseFromTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> TextEnvelope -> Either TextEnvelopeError b
readFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError TextEnvelopeError) a)
readFileTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError TextEnvelopeError) b)
readTextEnvelopeFromFile :: FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
readTextEnvelopeOfTypeFromFile :: TextEnvelopeType -> FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
serialiseToTextEnvelope :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> TextEnvelope
textEnvelopeRawCBOR :: TextEnvelope -> ByteString
textEnvelopeToJSON :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> ByteString
writeFileTextEnvelope :: HasTextEnvelope a => FilePath -> Maybe TextEnvelopeDescr -> a -> IO (Either (FileError ()) ())
validateAndHashStakePoolMetadata :: ByteString -> Either StakePoolMetadataValidationError (StakePoolMetadata, Hash StakePoolMetadata)
getTxBody :: Tx era -> TxBody era
getTxWitnesses :: Tx era -> [KeyWitness era]
makeByronKeyWitness :: IsByronKey key => NetworkId -> TxBody ByronEra -> SigningKey key -> KeyWitness ByronEra
makeShelleyBootstrapWitness :: IsShelleyBasedEra era => WitnessNetworkIdOrByronAddress -> TxBody era -> SigningKey ByronKey -> KeyWitness era
makeShelleyKeyWitness :: IsShelleyBasedEra era => TxBody era -> ShelleyWitnessSigningKey -> KeyWitness era
makeSignedTransaction :: [KeyWitness era] -> TxBody era -> Tx era
signByronTransaction :: NetworkId -> TxBody ByronEra -> [SigningKey ByronKey] -> Tx ByronEra
signShelleyTransaction :: IsShelleyBasedEra era => TxBody era -> [ShelleyWitnessSigningKey] -> Tx era
addTxIn :: (TxIn, BuildTxWith build (Witness WitCtxTxIn era)) -> TxBodyContent build era -> TxBodyContent build era
addTxOut :: TxOut CtxTx era -> TxBodyContent build era -> TxBodyContent build era
auxScriptsSupportedInEra :: CardanoEra era -> Maybe (AuxScriptsSupportedInEra era)
certificatesSupportedInEra :: CardanoEra era -> Maybe (CertificatesSupportedInEra era)
collateralSupportedInEra :: CardanoEra era -> Maybe (CollateralSupportedInEra era)
collectTxBodyScriptWitnesses :: TxBodyContent BuildTx era -> [(ScriptWitnessIndex, AnyScriptWitness era)]
createAndValidateTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
defaultTxBodyContent :: IsCardanoEra era => TxBodyContent BuildTx era
defaultTxFee :: IsCardanoEra era => TxFee era
defaultTxValidityUpperBound :: IsCardanoEra era => TxValidityUpperBound era
extraKeyWitnessesSupportedInEra :: CardanoEra era -> Maybe (TxExtraKeyWitnessesSupportedInEra era)
fromLedgerTxOuts :: ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxBodyScriptData era -> [TxOut CtxTx era]
genesisUTxOPseudoTxIn :: NetworkId -> Hash GenesisUTxOKey -> TxIn
getTxId :: TxBody era -> TxId
lovelaceToTxOutValue :: IsCardanoEra era => Lovelace -> TxOutValue era
makeTransactionBody :: IsCardanoEra era => TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
modTxIns :: (TxIns build era -> TxIns build era) -> TxBodyContent build era -> TxBodyContent build era
modTxOuts :: ([TxOut CtxTx era] -> [TxOut CtxTx era]) -> TxBodyContent build era -> TxBodyContent build era
parseHash :: SerialiseAsRawBytes (Hash a) => AsType (Hash a) -> Parser (Hash a)
renderScriptWitnessIndex :: ScriptWitnessIndex -> String
scriptValidityToTxScriptValidity :: ShelleyBasedEra era -> ScriptValidity -> TxScriptValidity era
setTxAuxScripts :: TxAuxScripts era -> TxBodyContent build era -> TxBodyContent build era
setTxCertificates :: TxCertificates build era -> TxBodyContent build era -> TxBodyContent build era
setTxExtraKeyWits :: TxExtraKeyWitnesses era -> TxBodyContent build era -> TxBodyContent build era
setTxFee :: TxFee era -> TxBodyContent build era -> TxBodyContent build era
setTxIns :: TxIns build era -> TxBodyContent build era -> TxBodyContent build era
setTxInsCollateral :: TxInsCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxInsReference :: TxInsReference build era -> TxBodyContent build era -> TxBodyContent build era
setTxMetadata :: TxMetadataInEra era -> TxBodyContent build era -> TxBodyContent build era
setTxMintValue :: TxMintValue build era -> TxBodyContent build era -> TxBodyContent build era
setTxOuts :: [TxOut CtxTx era] -> TxBodyContent build era -> TxBodyContent build era
setTxProtocolParams :: BuildTxWith build (Maybe ProtocolParameters) -> TxBodyContent build era -> TxBodyContent build era
setTxReturnCollateral :: TxReturnCollateral CtxTx era -> TxBodyContent build era -> TxBodyContent build era
setTxScriptValidity :: TxScriptValidity era -> TxBodyContent build era -> TxBodyContent build era
setTxTotalCollateral :: TxTotalCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxUpdateProposal :: TxUpdateProposal era -> TxBodyContent build era -> TxBodyContent build era
setTxValidityRange :: (TxValidityLowerBound era, TxValidityUpperBound era) -> TxBodyContent build era -> TxBodyContent build era
setTxWithdrawals :: TxWithdrawals build era -> TxBodyContent build era -> TxBodyContent build era
toCtxUTxOTxOut :: TxOut CtxTx era -> TxOut CtxUTxO era
totalAndReturnCollateralSupportedInEra :: CardanoEra era -> Maybe (TxTotalAndReturnCollateralSupportedInEra era)
txFeesExplicitInEra :: CardanoEra era -> Either (TxFeesImplicitInEra era) (TxFeesExplicitInEra era)
txMetadataSupportedInEra :: CardanoEra era -> Maybe (TxMetadataSupportedInEra era)
txOutValueToLovelace :: TxOutValue era -> Lovelace
txOutValueToValue :: TxOutValue era -> Value
txScriptValiditySupportedInCardanoEra :: CardanoEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValiditySupportedInShelleyBasedEra :: ShelleyBasedEra era -> Maybe (TxScriptValiditySupportedInEra era)
txScriptValidityToScriptValidity :: TxScriptValidity era -> ScriptValidity
updateProposalSupportedInEra :: CardanoEra era -> Maybe (UpdateProposalSupportedInEra era)
validityLowerBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityLowerBoundSupportedInEra era)
validityNoUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityNoUpperBoundSupportedInEra era)
validityUpperBoundSupportedInEra :: CardanoEra era -> Maybe (ValidityUpperBoundSupportedInEra era)
withdrawalsSupportedInEra :: CardanoEra era -> Maybe (WithdrawalsSupportedInEra era)
renderTxIn :: TxIn -> Text
makeTransactionMetadata :: Map Word64 TxMetadataValue -> TxMetadata
metadataFromJson :: TxMetadataJsonSchema -> Value -> Either TxMetadataJsonError TxMetadata
metadataToJson :: TxMetadataJsonSchema -> TxMetadata -> Value
metadataValueToJsonNoSchema :: TxMetadataValue -> Value
validateTxMetadata :: TxMetadata -> Either [(Word64, TxMetadataRangeError)] ()
bounded :: (Bounded a, Integral a, Show a) => String -> ReadM a
parseFilePath :: String -> String -> Parser FilePath
renderEra :: AnyCardanoEra -> Text
runParsecParser :: Parser a -> Text -> Parser a
textShow :: Show a => a -> Text
writeSecrets :: FilePath -> [Char] -> [Char] -> (a -> ByteString) -> [a] -> IO ()
filterValue :: (AssetId -> Bool) -> Value -> Value
lovelaceToQuantity :: Lovelace -> Quantity
lovelaceToValue :: Lovelace -> Value
negateValue :: Value -> Value
quantityToLovelace :: Quantity -> Lovelace
renderValue :: Value -> Text
renderValuePretty :: Value -> Text
scriptPolicyId :: Script lang -> PolicyId
selectAsset :: Value -> AssetId -> Quantity
selectLovelace :: Value -> Lovelace
valueFromList :: [(AssetId, Quantity)] -> Value
valueFromNestedRep :: ValueNestedRep -> Value
valueToList :: Value -> [(AssetId, Quantity)]
valueToLovelace :: Value -> Maybe Lovelace
valueToNestedRep :: Value -> ValueNestedRep
parseValue :: Parser Value
class FromJSON a
class ToJSON a
data Address addrtype
[ByronAddress] :: Address -> Address ByronAddr
[ShelleyAddress] :: Network -> PaymentCredential StandardCrypto -> StakeReference StandardCrypto -> Address ShelleyAddr
data AddressAny
AddressByron :: !Address ByronAddr -> AddressAny
AddressShelley :: !Address ShelleyAddr -> AddressAny
data ByronAddr
data PaymentCredential
PaymentCredentialByKey :: Hash PaymentKey -> PaymentCredential
PaymentCredentialByScript :: ScriptHash -> PaymentCredential
class HasTypeProxy addr => SerialiseAddress addr
serialiseAddress :: SerialiseAddress addr => addr -> Text
deserialiseAddress :: SerialiseAddress addr => AsType addr -> Text -> Maybe addr
data ShelleyAddr
data StakeAddress
newtype StakeAddressPointer
StakeAddressPointer :: Ptr -> StakeAddressPointer
[unStakeAddressPointer] :: StakeAddressPointer -> Ptr
data StakeAddressReference
StakeAddressByValue :: StakeCredential -> StakeAddressReference
StakeAddressByPointer :: StakeAddressPointer -> StakeAddressReference
NoStakeAddress :: StakeAddressReference
data StakeCredential
data Block era
pattern Block :: BlockHeader -> [Tx era] -> Block era
data BlockHeader
BlockHeader :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> BlockHeader
data BlockInMode mode
[BlockInMode] :: forall era mode. IsCardanoEra era => Block era -> EraInMode era mode -> BlockInMode mode
data ChainPoint
ChainPointAtGenesis :: ChainPoint
ChainPoint :: !SlotNo -> !Hash BlockHeader -> ChainPoint
data ChainTip
ChainTipAtGenesis :: ChainTip
ChainTip :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> ChainTip
data Certificate
StakeAddressRegistrationCertificate :: StakeCredential -> Certificate
StakeAddressDeregistrationCertificate :: StakeCredential -> Certificate
StakeAddressDelegationCertificate :: StakeCredential -> PoolId -> Certificate
StakePoolRegistrationCertificate :: StakePoolParameters -> Certificate
StakePoolRetirementCertificate :: PoolId -> EpochNo -> Certificate
GenesisKeyDelegationCertificate :: Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> Certificate
MIRCertificate :: MIRPot -> MIRTarget -> Certificate
data MIRTarget
StakeAddressesMIR :: [(StakeCredential, Lovelace)] -> MIRTarget
SendToReservesMIR :: Lovelace -> MIRTarget
SendToTreasuryMIR :: Lovelace -> MIRTarget
data StakePoolMetadataReference
data StakePoolParameters
data StakePoolRelay
newtype ScriptLockedTxInsError
ScriptLockedTxIns :: [TxIn] -> ScriptLockedTxInsError
data TxInsExistError
TxInsDoNotExist :: [TxIn] -> TxInsExistError
EmptyUTxO :: TxInsExistError
data QueryConvenienceError
AcqFailure :: AcquiringFailure -> QueryConvenienceError
SockErr :: EnvSocketError -> QueryConvenienceError
QueryEraMismatch :: EraMismatch -> QueryConvenienceError
ByronEraNotSupported :: QueryConvenienceError
EraConsensusModeMismatch :: !AnyConsensusMode -> !AnyCardanoEra -> QueryConvenienceError
data InputDecodeError
InputTextEnvelopeError :: !TextEnvelopeError -> InputDecodeError
InputBech32DecodeError :: !Bech32DecodeError -> InputDecodeError
InputInvalidError :: InputDecodeError
data InputFormat a
[InputFormatBech32] :: forall a. SerialiseAsBech32 a => InputFormat a
[InputFormatHex] :: forall a. SerialiseAsRawBytes a => InputFormat a
[InputFormatTextEnvelope] :: forall a. HasTextEnvelope a => InputFormat a
data SomeAddressVerificationKey
AByronVerificationKey :: VerificationKey ByronKey -> SomeAddressVerificationKey
APaymentVerificationKey :: VerificationKey PaymentKey -> SomeAddressVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeAddressVerificationKey
AGenesisUTxOVerificationKey :: VerificationKey GenesisUTxOKey -> SomeAddressVerificationKey
AGenesisExtendedVerificationKey :: VerificationKey GenesisExtendedKey -> SomeAddressVerificationKey
AGenesisDelegateExtendedVerificationKey :: VerificationKey GenesisDelegateExtendedKey -> SomeAddressVerificationKey
AKesVerificationKey :: VerificationKey KesKey -> SomeAddressVerificationKey
AVrfVerificationKey :: VerificationKey VrfKey -> SomeAddressVerificationKey
AStakeVerificationKey :: VerificationKey StakeKey -> SomeAddressVerificationKey
AStakeExtendedVerificationKey :: VerificationKey StakeExtendedKey -> SomeAddressVerificationKey
newtype EnvSocketError
CliEnvVarLookup :: Text -> EnvSocketError
newtype SocketPath
SocketPath :: FilePath -> SocketPath
[unSocketPath] :: SocketPath -> FilePath
class EraCast (f :: Type -> Type)
eraCast :: (EraCast f, IsCardanoEra fromEra, IsCardanoEra toEra) => CardanoEra toEra -> f fromEra -> Either EraCastError (f toEra)
data EraCastError
EraCastError :: value -> CardanoEra fromEra -> CardanoEra toEra -> EraCastError
[originalValue] :: EraCastError -> value
[fromEra] :: EraCastError -> CardanoEra fromEra
[toEra] :: EraCastError -> CardanoEra toEra
type Allegra = AllegraEra
data AllegraEra
data AlonzoEra
data AnyCardanoEra
[AnyCardanoEra] :: forall era. IsCardanoEra era => CardanoEra era -> AnyCardanoEra
data BabbageEra
type Byron = ByronEra
data ByronEra
data CardanoEra era
[ByronEra] :: CardanoEra ByronEra
[ShelleyEra] :: CardanoEra ShelleyEra
[AllegraEra] :: CardanoEra AllegraEra
[MaryEra] :: CardanoEra MaryEra
[AlonzoEra] :: CardanoEra AlonzoEra
[BabbageEra] :: CardanoEra BabbageEra
[ConwayEra] :: CardanoEra ConwayEra
data CardanoEraStyle era
[LegacyByronEra] :: CardanoEraStyle ByronEra
[ShelleyBasedEra] :: forall era. IsShelleyBasedEra era => ShelleyBasedEra era -> CardanoEraStyle era
data ConwayEra
data InAnyCardanoEra (thing :: Type -> Type)
[InAnyCardanoEra] :: forall era (thing :: Type -> Type). IsCardanoEra era => CardanoEra era -> thing era -> InAnyCardanoEra thing
data InAnyShelleyBasedEra (thing :: Type -> Type)
[InAnyShelleyBasedEra] :: forall era (thing :: Type -> Type). IsShelleyBasedEra era => ShelleyBasedEra era -> thing era -> InAnyShelleyBasedEra thing
class HasTypeProxy era => IsCardanoEra era
cardanoEra :: IsCardanoEra era => CardanoEra era
class IsCardanoEra era => IsShelleyBasedEra era
shelleyBasedEra :: IsShelleyBasedEra era => ShelleyBasedEra era
type Mary = MaryEra
data MaryEra
type Shelley = ShelleyEra
data ShelleyBasedEra era
[ShelleyBasedEraShelley] :: ShelleyBasedEra ShelleyEra
[ShelleyBasedEraAllegra] :: ShelleyBasedEra AllegraEra
[ShelleyBasedEraMary] :: ShelleyBasedEra MaryEra
[ShelleyBasedEraAlonzo] :: ShelleyBasedEra AlonzoEra
[ShelleyBasedEraBabbage] :: ShelleyBasedEra BabbageEra
[ShelleyBasedEraConway] :: ShelleyBasedEra ConwayEra
data ShelleyEra
class Show e => Error e
displayError :: Error e => e -> String
data FileError e
FileError :: FilePath -> e -> FileError e
FileErrorTempFile :: FilePath -> FilePath -> Handle -> FileError e
FileIOError :: FilePath -> IOException -> FileError e
data MinimumUTxOError
data ScriptExecutionError
ScriptErrorMissingTxIn :: TxIn -> ScriptExecutionError
ScriptErrorTxInWithoutDatum :: TxIn -> ScriptExecutionError
ScriptErrorWrongDatum :: Hash ScriptData -> ScriptExecutionError
ScriptErrorEvaluationFailed :: EvaluationError -> [Text] -> ScriptExecutionError
ScriptErrorExecutionUnitsOverflow :: ScriptExecutionError
ScriptErrorNotPlutusWitnessedTxIn :: ScriptWitnessIndex -> ScriptHash -> ScriptExecutionError
ScriptErrorRedeemerPointsToUnknownScriptHash :: ScriptWitnessIndex -> ScriptExecutionError
ScriptErrorMissingScript :: RdmrPtr -> ResolvablePointers -> ScriptExecutionError
ScriptErrorMissingCostModel :: Language -> ScriptExecutionError
data TransactionValidityError
TransactionValidityIntervalError :: PastHorizonException -> TransactionValidityError
TransactionValidityTranslationError :: TranslationError StandardCrypto -> TransactionValidityError
TransactionValidityCostModelError :: Map AnyPlutusScriptVersion CostModel -> String -> TransactionValidityError
data TxBodyErrorAutoBalance
TxBodyError :: TxBodyError -> TxBodyErrorAutoBalance
TxBodyScriptExecutionError :: [(ScriptWitnessIndex, ScriptExecutionError)] -> TxBodyErrorAutoBalance
TxBodyScriptBadScriptValidity :: TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceNegative :: Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorAdaBalanceTooSmall :: TxOutInAnyEra -> Lovelace -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorByronEraNotSupported :: TxBodyErrorAutoBalance
TxBodyErrorMissingParamMinUTxO :: TxBodyErrorAutoBalance
TxBodyErrorValidityInterval :: TransactionValidityError -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxONotMet :: TxOutInAnyEra -> Lovelace -> TxBodyErrorAutoBalance
TxBodyErrorMinUTxOMissingPParams :: MinimumUTxOError -> TxBodyErrorAutoBalance
TxBodyErrorNonAdaAssetsUnbalanced :: Value -> TxBodyErrorAutoBalance
TxBodyErrorScriptWitnessIndexMissingFromExecUnitsMap :: ScriptWitnessIndex -> Map ScriptWitnessIndex ExecutionUnits -> TxBodyErrorAutoBalance
data GenesisParameters
GenesisParameters :: UTCTime -> NetworkId -> Rational -> Int -> EpochSize -> NominalDiffTime -> Int -> Int -> Int -> Lovelace -> ProtocolParameters -> GenesisParameters
[protocolParamSystemStart] :: GenesisParameters -> UTCTime
[protocolParamNetworkId] :: GenesisParameters -> NetworkId
[protocolParamActiveSlotsCoefficient] :: GenesisParameters -> Rational
[protocolParamSecurity] :: GenesisParameters -> Int
[protocolParamEpochLength] :: GenesisParameters -> EpochSize
[protocolParamSlotLength] :: GenesisParameters -> NominalDiffTime
[protocolParamSlotsPerKESPeriod] :: GenesisParameters -> Int
[protocolParamMaxKESEvolutions] :: GenesisParameters -> Int
[protocolParamUpdateQuorum] :: GenesisParameters -> Int
[protocolParamMaxLovelaceSupply] :: GenesisParameters -> Lovelace
[protocolInitialUpdateableProtocolParameters] :: GenesisParameters -> ProtocolParameters
data family AsType t
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsShelley :: AsType ShelleyEra
pattern AsMary :: AsType MaryEra
pattern AsConway :: AsType ConwayEra
pattern AsByron :: AsType ByronEra
pattern AsBabbage :: AsType BabbageEra
pattern AsAlonzo :: AsType AlonzoEra
pattern AsAllegra :: AsType AllegraEra
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsByronAddress :: AsType (Address ByronAddr)
data FromSomeType (c :: Type -> Constraint) b
[FromSomeType] :: forall (c :: Type -> Constraint) a b. c a => AsType a -> (a -> b) -> FromSomeType c b
class Typeable t => HasTypeProxy t where {
    data family AsType t;
}
proxyToAsType :: HasTypeProxy t => Proxy t -> AsType t
castHash :: CastHash roleA roleB => Hash roleA -> Hash roleB
data family Hash keyrole
newtype OutputFile
OutputFile :: FilePath -> OutputFile
[unOutputFile] :: OutputFile -> FilePath
data LocalChainSyncClient block point tip (m :: Type -> Type)
NoLocalChainSyncClient :: LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClientPipelined :: ChainSyncClientPipelined block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClient :: ChainSyncClient block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
data LocalNodeClientParams
[LocalNodeClientParamsSingleBlock] :: forall block. (ProtocolClient block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
[LocalNodeClientParamsCardano] :: forall block. (ProtocolClient block, CardanoHardForkConstraints (ConsensusCryptoForBlock block)) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
data LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
[localChainSyncClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> LocalChainSyncClient block point tip m
[localTxSubmissionClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxSubmissionClient tx txerr m ())
[localStateQueryClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalStateQueryClient block point query m ())
[localTxMonitoringClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxMonitorClient txid tx slot m ())
type LocalNodeClientProtocolsInMode mode = LocalNodeClientProtocols BlockInMode mode ChainPoint ChainTip SlotNo TxInMode mode TxIdInMode mode TxValidationErrorInMode mode QueryInMode mode IO
data LocalNodeConnectInfo mode
LocalNodeConnectInfo :: ConsensusModeParams mode -> NetworkId -> FilePath -> LocalNodeConnectInfo mode
[localConsensusModeParams] :: LocalNodeConnectInfo mode -> ConsensusModeParams mode
[localNodeNetworkId] :: LocalNodeConnectInfo mode -> NetworkId
[localNodeSocketPath] :: LocalNodeConnectInfo mode -> FilePath
data LocalTxMonitoringQuery mode
LocalTxMonitoringQueryTx :: TxIdInMode mode -> LocalTxMonitoringQuery mode
LocalTxMonitoringSendNextTx :: LocalTxMonitoringQuery mode
LocalTxMonitoringMempoolInformation :: LocalTxMonitoringQuery mode
data LocalTxMonitoringResult mode
LocalTxMonitoringTxExists :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringTxDoesNotExist :: TxId -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringNextTx :: Maybe (TxInMode mode) -> SlotNo -> LocalTxMonitoringResult mode
LocalTxMonitoringMempoolSizeAndCapacity :: MempoolSizeAndCapacity -> SlotNo -> LocalTxMonitoringResult mode
data LocalStateQueryExpr block point (query :: Type -> Type) r (m :: Type -> Type) a
data UnsupportedNtcVersionError
UnsupportedNtcVersionError :: !MinNodeToClientVersion -> !NodeToClientVersion -> UnsupportedNtcVersionError
data TxIdInMode mode
[TxIdInMode] :: forall era mode. TxId -> EraInMode era mode -> TxIdInMode mode
data TxInMode mode
[TxInMode] :: forall era mode. Tx era -> EraInMode era mode -> TxInMode mode
[TxInByronSpecial] :: forall mode. GenTx ByronBlock -> EraInMode ByronEra mode -> TxInMode mode
data TxValidationErrorInMode mode
[TxValidationErrorInMode] :: forall era mode. TxValidationError era -> EraInMode era mode -> TxValidationErrorInMode mode
[TxValidationEraMismatch] :: forall mode. EraMismatch -> TxValidationErrorInMode mode
data ByronKey
data ByronKeyLegacy
castSigningKey :: CastSigningKeyRole keyroleA keyroleB => SigningKey keyroleA -> SigningKey keyroleB
castVerificationKey :: CastVerificationKeyRole keyroleA keyroleB => VerificationKey keyroleA -> VerificationKey keyroleB
class (Eq VerificationKey keyrole, Show VerificationKey keyrole, SerialiseAsRawBytes Hash keyrole, HasTextEnvelope VerificationKey keyrole, HasTextEnvelope SigningKey keyrole) => Key keyrole where {
    data family VerificationKey keyrole;
    data family SigningKey keyrole;
}
getVerificationKey :: Key keyrole => SigningKey keyrole -> VerificationKey keyrole
deterministicSigningKey :: Key keyrole => AsType keyrole -> Seed -> SigningKey keyrole
deterministicSigningKeySeedSize :: Key keyrole => AsType keyrole -> Word
verificationKeyHash :: Key keyrole => VerificationKey keyrole -> Hash keyrole
data family SigningKey keyrole
data family VerificationKey keyrole
data GenesisDelegateExtendedKey
data GenesisDelegateKey
data GenesisExtendedKey
data GenesisKey
data GenesisUTxOKey
data PaymentExtendedKey
data PaymentKey
data StakeExtendedKey
data StakeKey
toLedgerEvent :: ConvertLedgerEvent blk => WrapLedgerEvent blk -> Maybe LedgerEvent
data LedgerEvent
PoolRegistration :: Certificate -> LedgerEvent
PoolReRegistration :: Certificate -> LedgerEvent
IncrementalRewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
RewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
MIRDistribution :: MIRDistributionDetails -> LedgerEvent
PoolReap :: PoolReapDetails -> LedgerEvent
SuccessfulPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
FailedPlutusScript :: NonEmpty PlutusDebug -> LedgerEvent
data MIRDistributionDetails
MIRDistributionDetails :: Map StakeCredential Lovelace -> Map StakeCredential Lovelace -> Lovelace -> Lovelace -> MIRDistributionDetails
[mirddReservePayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddTreasuryPayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddReservesToTreasury] :: MIRDistributionDetails -> Lovelace
[mirddTreasuryToReserves] :: MIRDistributionDetails -> Lovelace
data PoolReapDetails
PoolReapDetails :: EpochNo -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> PoolReapDetails
[prdEpochNo] :: PoolReapDetails -> EpochNo
[prdRefunded] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
[prdUnclaimed] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
data Env
Env :: HardForkLedgerConfig (CardanoEras StandardCrypto) -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto)) -> Env
[envLedgerConfig] :: Env -> HardForkLedgerConfig (CardanoEras StandardCrypto)
[envProtocolConfig] :: Env -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto))
data FoldBlocksError
FoldBlocksInitialLedgerStateError :: InitialLedgerStateError -> FoldBlocksError
FoldBlocksApplyBlockError :: LedgerStateError -> FoldBlocksError
data GenesisConfigError
NEError :: !Text -> GenesisConfigError
NEByronConfig :: !FilePath -> !ConfigurationError -> GenesisConfigError
NEShelleyConfig :: !FilePath -> !Text -> GenesisConfigError
NEAlonzoConfig :: !FilePath -> !Text -> GenesisConfigError
NEConwayConfig :: !FilePath -> !Text -> GenesisConfigError
NECardanoConfig :: !Text -> GenesisConfigError
data InitialLedgerStateError
ILSEConfigFile :: Text -> InitialLedgerStateError
ILSEGenesisFile :: GenesisConfigError -> InitialLedgerStateError
ILSELedgerConsensusConfig :: GenesisConfigError -> InitialLedgerStateError
newtype LedgerState
LedgerState :: LedgerState (HardForkBlock (CardanoEras StandardCrypto)) -> LedgerState
[clsState] :: LedgerState -> LedgerState (HardForkBlock (CardanoEras StandardCrypto))
pattern LedgerStateShelley :: () => LedgerState (ShelleyBlock protocol (ShelleyEra StandardCrypto)) -> LedgerState
pattern LedgerStateMary :: () => LedgerState (ShelleyBlock protocol (MaryEra StandardCrypto)) -> LedgerState
pattern LedgerStateConway :: () => LedgerState (ShelleyBlock protocol (ConwayEra StandardCrypto)) -> LedgerState
pattern LedgerStateByron :: LedgerState ByronBlock -> LedgerState
pattern LedgerStateBabbage :: () => LedgerState (ShelleyBlock protocol (BabbageEra StandardCrypto)) -> LedgerState
pattern LedgerStateAlonzo :: () => LedgerState (ShelleyBlock protocol (AlonzoEra StandardCrypto)) -> LedgerState
pattern LedgerStateAllegra :: () => LedgerState (ShelleyBlock protocol (AllegraEra StandardCrypto)) -> LedgerState
data LedgerStateError
ApplyBlockHashMismatch :: Text -> LedgerStateError
ApplyBlockError :: HardForkLedgerError (CardanoEras StandardCrypto) -> LedgerStateError
InvalidRollback :: SlotNo -> ChainPoint -> LedgerStateError
data ValidationMode
FullValidation :: ValidationMode
QuickValidation :: ValidationMode
data AnyConsensusMode
[AnyConsensusMode] :: forall mode. ConsensusMode mode -> AnyConsensusMode
data AnyConsensusModeParams
[AnyConsensusModeParams] :: forall mode. ConsensusModeParams mode -> AnyConsensusModeParams
data CardanoMode
type family ChainDepStateProtocol era
type family ConsensusBlockForEra era
type family ConsensusBlockForMode mode
data ConsensusMode mode
[CardanoMode] :: ConsensusMode CardanoMode
data ConsensusModeIsMultiEra mode
[CardanoModeIsMultiEra] :: ConsensusModeIsMultiEra CardanoMode
data ConsensusModeParams mode
[ByronModeParams] :: EpochSlots -> ConsensusModeParams ByronMode
[ShelleyModeParams] :: ConsensusModeParams ShelleyMode
[CardanoModeParams] :: EpochSlots -> ConsensusModeParams CardanoMode
type family ConsensusProtocol era
data EraInMode era mode
[ByronEraInByronMode] :: EraInMode ByronEra ByronMode
[ShelleyEraInShelleyMode] :: EraInMode ShelleyEra ShelleyMode
[ByronEraInCardanoMode] :: EraInMode ByronEra CardanoMode
[ShelleyEraInCardanoMode] :: EraInMode ShelleyEra CardanoMode
[AllegraEraInCardanoMode] :: EraInMode AllegraEra CardanoMode
[MaryEraInCardanoMode] :: EraInMode MaryEra CardanoMode
[AlonzoEraInCardanoMode] :: EraInMode AlonzoEra CardanoMode
[BabbageEraInCardanoMode] :: EraInMode BabbageEra CardanoMode
[ConwayEraInCardanoMode] :: EraInMode ConwayEra CardanoMode
data NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
data OperationalCertIssueError
data OperationalCertificate
data OperationalCertificateIssueCounter
data BlockType blk
[ByronBlockType] :: BlockType (HardForkBlock '[ByronBlock])
[ShelleyBlockType] :: BlockType (HardForkBlock '[ShelleyBlock (TPraos StandardCrypto) StandardShelley])
[CardanoBlockType] :: BlockType (HardForkBlock (CardanoEras StandardCrypto))
class (RunNode blk, IOLike m) => Protocol (m :: Type -> Type) blk where {
    data family ProtocolInfoArgs (m :: Type -> Type) blk;
}
protocolInfo :: Protocol m blk => ProtocolInfoArgs m blk -> ProtocolInfo m blk
data family ProtocolInfoArgs (m :: Type -> Type) blk
data BundledProtocolParameters era
[BundleAsByronProtocolParameters] :: ProtocolParameters -> BundledProtocolParameters ByronEra
[BundleAsShelleyBasedProtocolParameters] :: forall era. ShelleyBasedEra era -> ProtocolParameters -> PParams (ShelleyLedgerEra era) -> BundledProtocolParameters era
newtype CostModel
CostModel :: Map Text Integer -> CostModel
data ExecutionUnitPrices
ExecutionUnitPrices :: Rational -> Rational -> ExecutionUnitPrices
[priceExecutionSteps] :: ExecutionUnitPrices -> Rational
[priceExecutionMemory] :: ExecutionUnitPrices -> Rational
data PraosNonce
data ProtocolParametersUpdate
ProtocolParametersUpdate :: Maybe (Natural, Natural) -> Maybe Rational -> Maybe (Maybe PraosNonce) -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe EpochNo -> Maybe Natural -> Maybe Rational -> Maybe Rational -> Maybe Rational -> Maybe Lovelace -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParametersUpdate
[protocolUpdateProtocolVersion] :: ProtocolParametersUpdate -> Maybe (Natural, Natural)
[protocolUpdateDecentralization] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateExtraPraosEntropy] :: ProtocolParametersUpdate -> Maybe (Maybe PraosNonce)
[protocolUpdateMaxBlockHeaderSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxBlockBodySize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxTxSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeeFixed] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateTxFeePerByte] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMinUTxOValue] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakeAddressDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakePoolDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateMinPoolCost] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdatePoolRetireMaxEpoch] :: ProtocolParametersUpdate -> Maybe EpochNo
[protocolUpdateStakePoolTargetNum] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdatePoolPledgeInfluence] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateMonetaryExpansion] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateTreasuryCut] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateUTxOCostPerWord] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateCostModels] :: ProtocolParametersUpdate -> Map AnyPlutusScriptVersion CostModel
[protocolUpdatePrices] :: ProtocolParametersUpdate -> Maybe ExecutionUnitPrices
[protocolUpdateMaxTxExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxBlockExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxValueSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateCollateralPercent] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxCollateralInputs] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateUTxOCostPerByte] :: ProtocolParametersUpdate -> Maybe Lovelace
data UpdateProposal
UpdateProposal :: !Map (Hash GenesisKey) ProtocolParametersUpdate -> !EpochNo -> UpdateProposal
data EraHistory mode
[EraHistory] :: forall mode (xs :: [Type]). ConsensusBlockForMode mode ~ HardForkBlock xs => ConsensusMode mode -> Interpreter xs -> EraHistory mode
newtype LedgerEpochInfo
LedgerEpochInfo :: EpochInfo (Either Text) -> LedgerEpochInfo
[unLedgerEpochInfo] :: LedgerEpochInfo -> EpochInfo (Either Text)
data QueryInEra era result
[QueryByronUpdateState] :: QueryInEra ByronEra ByronUpdateState
[QueryInShelleyBasedEra] :: forall era result. ShelleyBasedEra era -> QueryInShelleyBasedEra era result -> QueryInEra era result
data QueryInMode mode result
[QueryCurrentEra] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode AnyCardanoEra
[QueryInEra] :: forall era mode result1. EraInMode era mode -> QueryInEra era result1 -> QueryInMode mode (Either EraMismatch result1)
[QueryEraHistory] :: forall mode. ConsensusModeIsMultiEra mode -> QueryInMode mode (EraHistory mode)
[QuerySystemStart] :: forall mode. QueryInMode mode SystemStart
[QueryChainBlockNo] :: forall mode. QueryInMode mode (WithOrigin BlockNo)
[QueryChainPoint] :: forall mode. ConsensusMode mode -> QueryInMode mode ChainPoint
data QueryInShelleyBasedEra era result
[QueryEpoch] :: forall era. QueryInShelleyBasedEra era EpochNo
[QueryGenesisParameters] :: forall era. QueryInShelleyBasedEra era GenesisParameters
[QueryProtocolParameters] :: forall era. QueryInShelleyBasedEra era ProtocolParameters
[QueryProtocolParametersUpdate] :: forall era. QueryInShelleyBasedEra era (Map (Hash GenesisKey) ProtocolParametersUpdate)
[QueryStakeDistribution] :: forall era. QueryInShelleyBasedEra era (Map (Hash StakePoolKey) Rational)
[QueryUTxO] :: forall era. QueryUTxOFilter -> QueryInShelleyBasedEra era (UTxO era)
[QueryStakeAddresses] :: forall era. Set StakeCredential -> NetworkId -> QueryInShelleyBasedEra era (Map StakeAddress Lovelace, Map StakeAddress PoolId)
[QueryStakePools] :: forall era. QueryInShelleyBasedEra era (Set PoolId)
[QueryStakePoolParameters] :: forall era. Set PoolId -> QueryInShelleyBasedEra era (Map PoolId StakePoolParameters)
[QueryDebugLedgerState] :: forall era. QueryInShelleyBasedEra era (SerialisedDebugLedgerState era)
[QueryProtocolState] :: forall era. QueryInShelleyBasedEra era (ProtocolState era)
[QueryCurrentEpochState] :: forall era. QueryInShelleyBasedEra era (SerialisedCurrentEpochState era)
[QueryPoolState] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolState era)
[QueryPoolDistribution] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolDistribution era)
[QueryStakeSnapshot] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedStakeSnapshots era)
data QueryUTxOFilter
QueryUTxOWhole :: QueryUTxOFilter
QueryUTxOByAddress :: Set AddressAny -> QueryUTxOFilter
QueryUTxOByTxIn :: Set TxIn -> QueryUTxOFilter
newtype SlotsInEpoch
SlotsInEpoch :: Word64 -> SlotsInEpoch
newtype SlotsToEpochEnd
SlotsToEpochEnd :: Word64 -> SlotsToEpochEnd
data AnyPlutusScriptVersion
[AnyPlutusScriptVersion] :: forall lang. PlutusScriptVersion lang -> AnyPlutusScriptVersion
data AnyScriptLanguage
[AnyScriptLanguage] :: forall lang. ScriptLanguage lang -> AnyScriptLanguage
data ExecutionUnits
ExecutionUnits :: Natural -> Natural -> ExecutionUnits
[executionSteps] :: ExecutionUnits -> Natural
[executionMemory] :: ExecutionUnits -> Natural
class IsScriptLanguage lang => IsPlutusScriptLanguage lang
plutusScriptVersion :: IsPlutusScriptLanguage lang => PlutusScriptVersion lang
class HasTypeProxy lang => IsScriptLanguage lang
scriptLanguage :: IsScriptLanguage lang => ScriptLanguage lang
class IsScriptWitnessInCtx ctx
scriptWitnessInCtx :: IsScriptWitnessInCtx ctx => ScriptWitnessInCtx ctx
data KeyWitnessInCtx witctx
[KeyWitnessForSpending] :: KeyWitnessInCtx WitCtxTxIn
[KeyWitnessForStakeAddr] :: KeyWitnessInCtx WitCtxStake
data PlutusScriptV1
data PlutusScriptV2
data PlutusScriptVersion lang
[PlutusScriptV1] :: PlutusScriptVersion PlutusScriptV1
[PlutusScriptV2] :: PlutusScriptVersion PlutusScriptV2
data ScriptDatum witctx
[ScriptDatumForTxIn] :: HashableScriptData -> ScriptDatum WitCtxTxIn
[InlineScriptDatum] :: ScriptDatum WitCtxTxIn
[NoScriptDatumForMint] :: ScriptDatum WitCtxMint
[NoScriptDatumForStake] :: ScriptDatum WitCtxStake
data ScriptHash
data ScriptInAnyLang
[ScriptInAnyLang] :: forall lang. ScriptLanguage lang -> Script lang -> ScriptInAnyLang
data ScriptLanguageInEra lang era
[SimpleScriptInShelley] :: ScriptLanguageInEra SimpleScript' ShelleyEra
[SimpleScriptInAllegra] :: ScriptLanguageInEra SimpleScript' AllegraEra
[SimpleScriptInMary] :: ScriptLanguageInEra SimpleScript' MaryEra
[SimpleScriptInAlonzo] :: ScriptLanguageInEra SimpleScript' AlonzoEra
[SimpleScriptInBabbage] :: ScriptLanguageInEra SimpleScript' BabbageEra
[SimpleScriptInConway] :: ScriptLanguageInEra SimpleScript' ConwayEra
[PlutusScriptV1InAlonzo] :: ScriptLanguageInEra PlutusScriptV1 AlonzoEra
[PlutusScriptV1InBabbage] :: ScriptLanguageInEra PlutusScriptV1 BabbageEra
[PlutusScriptV1InConway] :: ScriptLanguageInEra PlutusScriptV1 ConwayEra
[PlutusScriptV2InBabbage] :: ScriptLanguageInEra PlutusScriptV2 BabbageEra
[PlutusScriptV2InConway] :: ScriptLanguageInEra PlutusScriptV2 ConwayEra
type ScriptRedeemer = HashableScriptData
data ScriptWitnessInCtx witctx
[ScriptWitnessForSpending] :: ScriptWitnessInCtx WitCtxTxIn
[ScriptWitnessForMinting] :: ScriptWitnessInCtx WitCtxMint
[ScriptWitnessForStakeAddr] :: ScriptWitnessInCtx WitCtxStake
data SimpleScript
RequireSignature :: !Hash PaymentKey -> SimpleScript
RequireTimeBefore :: !SlotNo -> SimpleScript
RequireTimeAfter :: !SlotNo -> SimpleScript
RequireAllOf :: ![SimpleScript] -> SimpleScript
RequireAnyOf :: ![SimpleScript] -> SimpleScript
RequireMOf :: !Int -> ![SimpleScript] -> SimpleScript
data SimpleScript'
data WitCtx witctx
[WitCtxTxIn] :: WitCtx WitCtxTxIn
[WitCtxMint] :: WitCtx WitCtxMint
[WitCtxStake] :: WitCtx WitCtxStake
data WitCtxMint
data WitCtxStake
data WitCtxTxIn
data HashableScriptData
data ScriptData
ScriptDataConstructor :: Integer -> [ScriptData] -> ScriptData
ScriptDataMap :: [(ScriptData, ScriptData)] -> ScriptData
ScriptDataList :: [ScriptData] -> ScriptData
ScriptDataNumber :: Integer -> ScriptData
ScriptDataBytes :: ByteString -> ScriptData
data ScriptDataJsonBytesError
data ScriptDataJsonError
ScriptDataJsonSchemaError :: !Value -> !ScriptDataJsonSchemaError -> ScriptDataJsonError
ScriptDataRangeError :: !Value -> !ScriptDataRangeError -> ScriptDataJsonError
data ScriptDataJsonSchema
ScriptDataJsonNoSchema :: ScriptDataJsonSchema
ScriptDataJsonDetailedSchema :: ScriptDataJsonSchema
data ScriptDataJsonSchemaError
ScriptDataJsonNullNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonBoolNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonNumberNotInteger :: !Double -> ScriptDataJsonSchemaError
ScriptDataJsonNotObject :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonBadObject :: ![(Text, Value)] -> ScriptDataJsonSchemaError
ScriptDataJsonBadMapPair :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonTypeMismatch :: !Text -> !Value -> ScriptDataJsonSchemaError
newtype ScriptDataRangeError
ScriptDataConstructorOutOfRange :: Integer -> ScriptDataRangeError
data Bech32DecodeError
Bech32DecodingError :: !DecodingError -> Bech32DecodeError
Bech32UnexpectedPrefix :: !Text -> !Set Text -> Bech32DecodeError
Bech32DataPartToBytesError :: !Text -> Bech32DecodeError
Bech32DeserialiseFromBytesError :: !ByteString -> Bech32DecodeError
Bech32WrongPrefix :: !Text -> !Text -> Bech32DecodeError
class (HasTypeProxy a, SerialiseAsRawBytes a) => SerialiseAsBech32 a
class HasTypeProxy a => SerialiseAsCBOR a
serialiseToCBOR :: SerialiseAsCBOR a => a -> ByteString
deserialiseFromCBOR :: SerialiseAsCBOR a => AsType a -> ByteString -> Either DecoderError a
newtype JsonDecodeError
JsonDecodeError :: String -> JsonDecodeError
data FromSomeTypeCDDL c b
[FromCDDLTx] :: forall b. Text -> (InAnyCardanoEra Tx -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
[FromCDDLWitness] :: forall b. Text -> (InAnyCardanoEra KeyWitness -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
data TextEnvelopeCddl
TextEnvelopeCddl :: !Text -> !Text -> !ByteString -> TextEnvelopeCddl
[teCddlType] :: TextEnvelopeCddl -> !Text
[teCddlDescription] :: TextEnvelopeCddl -> !Text
[teCddlRawCBOR] :: TextEnvelopeCddl -> !ByteString
data TextEnvelopeCddlError
TextEnvelopeCddlErrCBORDecodingError :: DecoderError -> TextEnvelopeCddlError
TextEnvelopeCddlAesonDecodeError :: FilePath -> String -> TextEnvelopeCddlError
TextEnvelopeCddlUnknownKeyWitness :: TextEnvelopeCddlError
TextEnvelopeCddlTypeError :: [Text] -> Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrUnknownType :: Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrByronKeyWitnessUnsupported :: TextEnvelopeCddlError
data RawBytesHexError
RawBytesHexErrorBase16DecodeFail :: ByteString -> String -> RawBytesHexError
RawBytesHexErrorRawBytesDecodeFail :: ByteString -> TypeRep -> SerialiseAsRawBytesError -> RawBytesHexError
class (HasTypeProxy a, Typeable a) => SerialiseAsRawBytes a
serialiseToRawBytes :: SerialiseAsRawBytes a => a -> ByteString
deserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
class SerialiseAsCBOR a => HasTextEnvelope a
textEnvelopeType :: HasTextEnvelope a => AsType a -> TextEnvelopeType
textEnvelopeDefaultDescr :: HasTextEnvelope a => a -> TextEnvelopeDescr
data TextEnvelope
TextEnvelope :: !TextEnvelopeType -> !TextEnvelopeDescr -> !ByteString -> TextEnvelope
[teType] :: TextEnvelope -> !TextEnvelopeType
[teDescription] :: TextEnvelope -> !TextEnvelopeDescr
[teRawCBOR] :: TextEnvelope -> !ByteString
data TextEnvelopeDescr
data TextEnvelopeError
TextEnvelopeTypeError :: ![TextEnvelopeType] -> !TextEnvelopeType -> TextEnvelopeError
TextEnvelopeDecodeError :: !DecoderError -> TextEnvelopeError
TextEnvelopeAesonDecodeError :: !String -> TextEnvelopeError
newtype TextEnvelopeType
TextEnvelopeType :: String -> TextEnvelopeType
data StakePoolMetadata
data StakePoolMetadataValidationError
data ShelleyWitnessSigningKey
WitnessPaymentKey :: SigningKey PaymentKey -> ShelleyWitnessSigningKey
WitnessPaymentExtendedKey :: SigningKey PaymentExtendedKey -> ShelleyWitnessSigningKey
WitnessStakeKey :: SigningKey StakeKey -> ShelleyWitnessSigningKey
WitnessStakeExtendedKey :: SigningKey StakeExtendedKey -> ShelleyWitnessSigningKey
WitnessStakePoolKey :: SigningKey StakePoolKey -> ShelleyWitnessSigningKey
WitnessGenesisKey :: SigningKey GenesisKey -> ShelleyWitnessSigningKey
WitnessGenesisExtendedKey :: SigningKey GenesisExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateKey :: SigningKey GenesisDelegateKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateExtendedKey :: SigningKey GenesisDelegateExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisUTxOKey :: SigningKey GenesisUTxOKey -> ShelleyWitnessSigningKey
data AnyScriptWitness era
[AnyScriptWitness] :: forall witctx era. ScriptWitness witctx era -> AnyScriptWitness era
data AuxScriptsSupportedInEra era
[AuxScriptsInAllegraEra] :: AuxScriptsSupportedInEra AllegraEra
[AuxScriptsInMaryEra] :: AuxScriptsSupportedInEra MaryEra
[AuxScriptsInAlonzoEra] :: AuxScriptsSupportedInEra AlonzoEra
[AuxScriptsInBabbageEra] :: AuxScriptsSupportedInEra BabbageEra
[AuxScriptsInConwayEra] :: AuxScriptsSupportedInEra ConwayEra
data BuildTx
data BuildTxWith build a
[ViewTx] :: forall a. BuildTxWith ViewTx a
[BuildTxWith] :: forall a. a -> BuildTxWith BuildTx a
data CertificatesSupportedInEra era
[CertificatesInShelleyEra] :: CertificatesSupportedInEra ShelleyEra
[CertificatesInAllegraEra] :: CertificatesSupportedInEra AllegraEra
[CertificatesInMaryEra] :: CertificatesSupportedInEra MaryEra
[CertificatesInAlonzoEra] :: CertificatesSupportedInEra AlonzoEra
[CertificatesInBabbageEra] :: CertificatesSupportedInEra BabbageEra
[CertificatesInConwayEra] :: CertificatesSupportedInEra ConwayEra
data CollateralSupportedInEra era
[CollateralInAlonzoEra] :: CollateralSupportedInEra AlonzoEra
[CollateralInBabbageEra] :: CollateralSupportedInEra BabbageEra
[CollateralInConwayEra] :: CollateralSupportedInEra ConwayEra
data CtxTx
data CtxUTxO
data MultiAssetSupportedInEra era
[MultiAssetInMaryEra] :: MultiAssetSupportedInEra MaryEra
[MultiAssetInAlonzoEra] :: MultiAssetSupportedInEra AlonzoEra
[MultiAssetInBabbageEra] :: MultiAssetSupportedInEra BabbageEra
[MultiAssetInConwayEra] :: MultiAssetSupportedInEra ConwayEra
data OnlyAdaSupportedInEra era
[AdaOnlyInByronEra] :: OnlyAdaSupportedInEra ByronEra
[AdaOnlyInShelleyEra] :: OnlyAdaSupportedInEra ShelleyEra
[AdaOnlyInAllegraEra] :: OnlyAdaSupportedInEra AllegraEra
data ScriptDataSupportedInEra era
[ScriptDataInAlonzoEra] :: ScriptDataSupportedInEra AlonzoEra
[ScriptDataInBabbageEra] :: ScriptDataSupportedInEra BabbageEra
[ScriptDataInConwayEra] :: ScriptDataSupportedInEra ConwayEra
data ScriptValidity
ScriptInvalid :: ScriptValidity
ScriptValid :: ScriptValidity
data ScriptWitnessIndex
ScriptWitnessIndexTxIn :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexMint :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexCertificate :: !Word -> ScriptWitnessIndex
ScriptWitnessIndexWithdrawal :: !Word -> ScriptWitnessIndex
data TxBodyError
TxBodyEmptyTxIns :: TxBodyError
TxBodyEmptyTxInsCollateral :: TxBodyError
TxBodyEmptyTxOuts :: TxBodyError
TxBodyOutputNegative :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyOutputOverflow :: Quantity -> TxOutInAnyEra -> TxBodyError
TxBodyMetadataError :: [(Word64, TxMetadataRangeError)] -> TxBodyError
TxBodyMintAdaError :: TxBodyError
TxBodyMissingProtocolParams :: TxBodyError
TxBodyInIxOverflow :: TxIn -> TxBodyError
data TxCertificates build era
[TxCertificatesNone] :: forall build era. TxCertificates build era
[TxCertificates] :: forall era build. CertificatesSupportedInEra era -> [Certificate] -> BuildTxWith build (Map StakeCredential (Witness WitCtxStake era)) -> TxCertificates build era
data TxExtraKeyWitnessesSupportedInEra era
[ExtraKeyWitnessesInAlonzoEra] :: TxExtraKeyWitnessesSupportedInEra AlonzoEra
[ExtraKeyWitnessesInBabbageEra] :: TxExtraKeyWitnessesSupportedInEra BabbageEra
[ExtraKeyWitnessesInConwayEra] :: TxExtraKeyWitnessesSupportedInEra ConwayEra
data TxFeesExplicitInEra era
[TxFeesExplicitInShelleyEra] :: TxFeesExplicitInEra ShelleyEra
[TxFeesExplicitInAllegraEra] :: TxFeesExplicitInEra AllegraEra
[TxFeesExplicitInMaryEra] :: TxFeesExplicitInEra MaryEra
[TxFeesExplicitInAlonzoEra] :: TxFeesExplicitInEra AlonzoEra
[TxFeesExplicitInBabbageEra] :: TxFeesExplicitInEra BabbageEra
[TxFeesExplicitInConwayEra] :: TxFeesExplicitInEra ConwayEra
data TxFeesImplicitInEra era
[TxFeesImplicitInByronEra] :: TxFeesImplicitInEra ByronEra
data TxMetadataSupportedInEra era
[TxMetadataInShelleyEra] :: TxMetadataSupportedInEra ShelleyEra
[TxMetadataInAllegraEra] :: TxMetadataSupportedInEra AllegraEra
[TxMetadataInMaryEra] :: TxMetadataSupportedInEra MaryEra
[TxMetadataInAlonzoEra] :: TxMetadataSupportedInEra AlonzoEra
[TxMetadataInBabbageEra] :: TxMetadataSupportedInEra BabbageEra
[TxMetadataInConwayEra] :: TxMetadataSupportedInEra ConwayEra
data TxOutValue era
[TxOutAdaOnly] :: forall era. OnlyAdaSupportedInEra era -> Lovelace -> TxOutValue era
[TxOutValue] :: forall era. MultiAssetSupportedInEra era -> Value -> TxOutValue era
data TxReturnCollateral ctx era
[TxReturnCollateralNone] :: forall ctx era. TxReturnCollateral ctx era
[TxReturnCollateral] :: forall era ctx. TxTotalAndReturnCollateralSupportedInEra era -> TxOut ctx era -> TxReturnCollateral ctx era
data TxScriptValiditySupportedInEra era
[TxScriptValiditySupportedInAlonzoEra] :: TxScriptValiditySupportedInEra AlonzoEra
[TxScriptValiditySupportedInBabbageEra] :: TxScriptValiditySupportedInEra BabbageEra
[TxScriptValiditySupportedInConwayEra] :: TxScriptValiditySupportedInEra ConwayEra
data TxTotalAndReturnCollateralSupportedInEra era
[TxTotalAndReturnCollateralInBabbageEra] :: TxTotalAndReturnCollateralSupportedInEra BabbageEra
[TxTotalAndReturnCollateralInConwayEra] :: TxTotalAndReturnCollateralSupportedInEra ConwayEra
data TxTotalCollateral era
[TxTotalCollateralNone] :: forall era. TxTotalCollateral era
[TxTotalCollateral] :: forall era. TxTotalAndReturnCollateralSupportedInEra era -> Lovelace -> TxTotalCollateral era
data TxUpdateProposal era
[TxUpdateProposalNone] :: forall era. TxUpdateProposal era
[TxUpdateProposal] :: forall era. UpdateProposalSupportedInEra era -> UpdateProposal -> TxUpdateProposal era
data TxWithdrawals build era
[TxWithdrawalsNone] :: forall build era. TxWithdrawals build era
[TxWithdrawals] :: forall era build. WithdrawalsSupportedInEra era -> [(StakeAddress, Lovelace, BuildTxWith build (Witness WitCtxStake era))] -> TxWithdrawals build era
data UpdateProposalSupportedInEra era
[UpdateProposalInShelleyEra] :: UpdateProposalSupportedInEra ShelleyEra
[UpdateProposalInAllegraEra] :: UpdateProposalSupportedInEra AllegraEra
[UpdateProposalInMaryEra] :: UpdateProposalSupportedInEra MaryEra
[UpdateProposalInAlonzoEra] :: UpdateProposalSupportedInEra AlonzoEra
[UpdateProposalInBabbageEra] :: UpdateProposalSupportedInEra BabbageEra
[UpdateProposalInConwayEra] :: UpdateProposalSupportedInEra ConwayEra
data ValidityLowerBoundSupportedInEra era
[ValidityLowerBoundInAllegraEra] :: ValidityLowerBoundSupportedInEra AllegraEra
[ValidityLowerBoundInMaryEra] :: ValidityLowerBoundSupportedInEra MaryEra
[ValidityLowerBoundInAlonzoEra] :: ValidityLowerBoundSupportedInEra AlonzoEra
[ValidityLowerBoundInBabbageEra] :: ValidityLowerBoundSupportedInEra BabbageEra
[ValidityLowerBoundInConwayEra] :: ValidityLowerBoundSupportedInEra ConwayEra
data ValidityNoUpperBoundSupportedInEra era
[ValidityNoUpperBoundInByronEra] :: ValidityNoUpperBoundSupportedInEra ByronEra
[ValidityNoUpperBoundInAllegraEra] :: ValidityNoUpperBoundSupportedInEra AllegraEra
[ValidityNoUpperBoundInMaryEra] :: ValidityNoUpperBoundSupportedInEra MaryEra
[ValidityNoUpperBoundInAlonzoEra] :: ValidityNoUpperBoundSupportedInEra AlonzoEra
[ValidityNoUpperBoundInBabbageEra] :: ValidityNoUpperBoundSupportedInEra BabbageEra
[ValidityNoUpperBoundInConwayEra] :: ValidityNoUpperBoundSupportedInEra ConwayEra
data ValidityUpperBoundSupportedInEra era
[ValidityUpperBoundInShelleyEra] :: ValidityUpperBoundSupportedInEra ShelleyEra
[ValidityUpperBoundInAllegraEra] :: ValidityUpperBoundSupportedInEra AllegraEra
[ValidityUpperBoundInMaryEra] :: ValidityUpperBoundSupportedInEra MaryEra
[ValidityUpperBoundInAlonzoEra] :: ValidityUpperBoundSupportedInEra AlonzoEra
[ValidityUpperBoundInBabbageEra] :: ValidityUpperBoundSupportedInEra BabbageEra
[ValidityUpperBoundInConwayEra] :: ValidityUpperBoundSupportedInEra ConwayEra
data ViewTx
data WithdrawalsSupportedInEra era
[WithdrawalsInShelleyEra] :: WithdrawalsSupportedInEra ShelleyEra
[WithdrawalsInAllegraEra] :: WithdrawalsSupportedInEra AllegraEra
[WithdrawalsInMaryEra] :: WithdrawalsSupportedInEra MaryEra
[WithdrawalsInAlonzoEra] :: WithdrawalsSupportedInEra AlonzoEra
[WithdrawalsInBabbageEra] :: WithdrawalsSupportedInEra BabbageEra
[WithdrawalsInConwayEra] :: WithdrawalsSupportedInEra ConwayEra
newtype TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
data TxIn
TxIn :: TxId -> TxIx -> TxIn
newtype TxIx
TxIx :: Word -> TxIx
newtype TxMetadata
TxMetadata :: Map Word64 TxMetadataValue -> TxMetadata
data TxMetadataJsonError
TxMetadataJsonToplevelNotMap :: TxMetadataJsonError
TxMetadataJsonToplevelBadKey :: !Text -> TxMetadataJsonError
TxMetadataJsonSchemaError :: !Word64 -> !Value -> !TxMetadataJsonSchemaError -> TxMetadataJsonError
TxMetadataRangeError :: !Word64 -> !Value -> !TxMetadataRangeError -> TxMetadataJsonError
data TxMetadataJsonSchema
TxMetadataJsonNoSchema :: TxMetadataJsonSchema
TxMetadataJsonDetailedSchema :: TxMetadataJsonSchema
data TxMetadataJsonSchemaError
TxMetadataJsonNullNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonBoolNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonNumberNotInteger :: !Double -> TxMetadataJsonSchemaError
TxMetadataJsonNotObject :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonBadObject :: ![(Text, Value)] -> TxMetadataJsonSchemaError
TxMetadataJsonBadMapPair :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonTypeMismatch :: !Text -> !Value -> TxMetadataJsonSchemaError
data TxMetadataRangeError
TxMetadataNumberOutOfRange :: !Integer -> TxMetadataRangeError
TxMetadataTextTooLong :: !Int -> TxMetadataRangeError
TxMetadataBytesTooLong :: !Int -> TxMetadataRangeError
data TxMetadataValue
TxMetaMap :: [(TxMetadataValue, TxMetadataValue)] -> TxMetadataValue
TxMetaList :: [TxMetadataValue] -> TxMetadataValue
TxMetaNumber :: Integer -> TxMetadataValue
TxMetaBytes :: ByteString -> TxMetadataValue
TxMetaText :: Text -> TxMetadataValue
data AssetId
AdaAssetId :: AssetId
AssetId :: !PolicyId -> !AssetName -> AssetId
newtype AssetName
AssetName :: ByteString -> AssetName
newtype Lovelace
Lovelace :: Integer -> Lovelace
newtype PolicyId
PolicyId :: ScriptHash -> PolicyId
[unPolicyId] :: PolicyId -> ScriptHash
newtype Quantity
Quantity :: Integer -> Quantity
data Value
data ValueNestedBundle
ValueNestedBundleAda :: Quantity -> ValueNestedBundle
ValueNestedBundle :: PolicyId -> Map AssetName Quantity -> ValueNestedBundle
newtype ValueNestedRep
ValueNestedRep :: [ValueNestedBundle] -> ValueNestedRep
class Typeable a => FromCBOR a
class Typeable a => ToCBOR a
newtype EpochSlots
EpochSlots :: Word64 -> EpochSlots
[unEpochSlots] :: EpochSlots -> Word64
newtype BlockNo
BlockNo :: Word64 -> BlockNo
[unBlockNo] :: BlockNo -> Word64
newtype EpochNo
EpochNo :: Word64 -> EpochNo
[unEpochNo] :: EpochNo -> Word64
newtype SlotNo
SlotNo :: Word64 -> SlotNo
[unSlotNo] :: SlotNo -> Word64
newtype SystemStart
SystemStart :: UTCTime -> SystemStart
[getSystemStart] :: SystemStart -> UTCTime
newtype NetworkMagic
NetworkMagic :: Word32 -> NetworkMagic
[unNetworkMagic] :: NetworkMagic -> Word32
data NodeToClientVersion
NodeToClientV_9 :: NodeToClientVersion
NodeToClientV_10 :: NodeToClientVersion
NodeToClientV_11 :: NodeToClientVersion
NodeToClientV_12 :: NodeToClientVersion
NodeToClientV_13 :: NodeToClientVersion
NodeToClientV_14 :: NodeToClientVersion
NodeToClientV_15 :: NodeToClientVersion
newtype ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
newtype ChainSyncClientPipelined header point tip (m :: Type -> Type) a
ChainSyncClientPipelined :: m (ClientPipelinedStIdle 'Z header point tip m a) -> ChainSyncClientPipelined header point tip (m :: Type -> Type) a
[runChainSyncClientPipelined] :: ChainSyncClientPipelined header point tip (m :: Type -> Type) a -> m (ClientPipelinedStIdle 'Z header point tip m a)
newtype LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
LocalStateQueryClient :: m (ClientStIdle block point query m a) -> LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
[runLocalStateQueryClient] :: LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a -> m (ClientStIdle block point query m a)
newtype LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
LocalTxMonitorClient :: m (ClientStIdle txid tx slot m a) -> LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
[runLocalTxMonitorClient] :: LocalTxMonitorClient txid tx slot (m :: Type -> Type) a -> m (ClientStIdle txid tx slot m a)
data MempoolSizeAndCapacity
MempoolSizeAndCapacity :: !Word32 -> !Word32 -> !Word32 -> MempoolSizeAndCapacity
[capacityInBytes] :: MempoolSizeAndCapacity -> !Word32
[sizeInBytes] :: MempoolSizeAndCapacity -> !Word32
[numberOfTxs] :: MempoolSizeAndCapacity -> !Word32
data LocalTxSubmissionClient tx reject (m :: Type -> Type) a
data SubmitResult reason
SubmitSuccess :: SubmitResult reason
SubmitFail :: reason -> SubmitResult reason
data ShelleyGenesis era
ShelleyGenesis :: !UTCTime -> !Word32 -> !Network -> !PositiveUnitInterval -> !Word64 -> !EpochSize -> !Word64 -> !Word64 -> !NominalDiffTime -> !Word64 -> !Word64 -> !ShelleyPParams era -> !Map (KeyHash 'Genesis (Crypto era)) (GenDelegPair (Crypto era)) -> ListMap (Addr (Crypto era)) Coin -> ShelleyGenesisStaking (Crypto era) -> ShelleyGenesis era
[sgSystemStart] :: ShelleyGenesis era -> !UTCTime
[sgNetworkMagic] :: ShelleyGenesis era -> !Word32
[sgNetworkId] :: ShelleyGenesis era -> !Network
[sgActiveSlotsCoeff] :: ShelleyGenesis era -> !PositiveUnitInterval
[sgSecurityParam] :: ShelleyGenesis era -> !Word64
[sgEpochLength] :: ShelleyGenesis era -> !EpochSize
[sgSlotsPerKESPeriod] :: ShelleyGenesis era -> !Word64
[sgMaxKESEvolutions] :: ShelleyGenesis era -> !Word64
[sgSlotLength] :: ShelleyGenesis era -> !NominalDiffTime
[sgUpdateQuorum] :: ShelleyGenesis era -> !Word64
[sgMaxLovelaceSupply] :: ShelleyGenesis era -> !Word64
[sgProtocolParams] :: ShelleyGenesis era -> !ShelleyPParams era
[sgGenDelegs] :: ShelleyGenesis era -> !Map (KeyHash 'Genesis (Crypto era)) (GenDelegPair (Crypto era))
[sgInitialFunds] :: ShelleyGenesis era -> ListMap (Addr (Crypto era)) Coin
[sgStaking] :: ShelleyGenesis era -> ShelleyGenesisStaking (Crypto era)
type family ShelleyLedgerEra era
data ProtocolParameters
ProtocolParameters :: (Natural, Natural) -> Maybe Rational -> Maybe PraosNonce -> Natural -> Natural -> Natural -> Natural -> Natural -> Maybe Lovelace -> Lovelace -> Lovelace -> Lovelace -> EpochNo -> Natural -> Rational -> Rational -> Rational -> Maybe Lovelace -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParameters
[protocolParamProtocolVersion] :: ProtocolParameters -> (Natural, Natural)
[protocolParamDecentralization] :: ProtocolParameters -> Maybe Rational
[protocolParamExtraPraosEntropy] :: ProtocolParameters -> Maybe PraosNonce
[protocolParamMaxBlockHeaderSize] :: ProtocolParameters -> Natural
[protocolParamMaxBlockBodySize] :: ProtocolParameters -> Natural
[protocolParamMaxTxSize] :: ProtocolParameters -> Natural
[protocolParamTxFeeFixed] :: ProtocolParameters -> Natural
[protocolParamTxFeePerByte] :: ProtocolParameters -> Natural
[protocolParamMinUTxOValue] :: ProtocolParameters -> Maybe Lovelace
[protocolParamStakeAddressDeposit] :: ProtocolParameters -> Lovelace
[protocolParamStakePoolDeposit] :: ProtocolParameters -> Lovelace
[protocolParamMinPoolCost] :: ProtocolParameters -> Lovelace
[protocolParamPoolRetireMaxEpoch] :: ProtocolParameters -> EpochNo
[protocolParamStakePoolTargetNum] :: ProtocolParameters -> Natural
[protocolParamPoolPledgeInfluence] :: ProtocolParameters -> Rational
[protocolParamMonetaryExpansion] :: ProtocolParameters -> Rational
[protocolParamTreasuryCut] :: ProtocolParameters -> Rational
[protocolParamUTxOCostPerWord] :: ProtocolParameters -> Maybe Lovelace
[protocolParamCostModels] :: ProtocolParameters -> Map AnyPlutusScriptVersion CostModel
[protocolParamPrices] :: ProtocolParameters -> Maybe ExecutionUnitPrices
[protocolParamMaxTxExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxBlockExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxValueSize] :: ProtocolParameters -> Maybe Natural
[protocolParamCollateralPercent] :: ProtocolParameters -> Maybe Natural
[protocolParamMaxCollateralInputs] :: ProtocolParameters -> Maybe Natural
[protocolParamUTxOCostPerByte] :: ProtocolParameters -> Maybe Lovelace
type PoolId = Hash StakePoolKey
fromPlutusData :: Data -> ScriptData
toPlutusData :: ScriptData -> Data
data PlutusScriptOrReferenceInput lang
PScript :: PlutusScript lang -> PlutusScriptOrReferenceInput lang
toShelleyNetwork :: NetworkId -> Network
fromConsensusPointInMode :: ConsensusMode mode -> Point (ConsensusBlockForMode mode) -> ChainPoint
toConsensusPointInMode :: ConsensusMode mode -> ChainPoint -> Point (ConsensusBlockForMode mode)
fromAlonzoCostModels :: CostModels -> Map AnyPlutusScriptVersion CostModel
fromAlonzoPrices :: Prices -> ExecutionUnitPrices
toAlonzoPrices :: ExecutionUnitPrices -> Maybe Prices
data AcquiringFailure
AFPointTooOld :: AcquiringFailure
AFPointNotOnChain :: AcquiringFailure


-- | Pretty printing transactions and utxo's
module Hydra.Cardano.Api.Pretty

-- | Obtain a human-readable pretty text representation of a transaction.
renderTx :: Tx -> String
renderTxs :: [Tx] -> String

-- | Like <a>renderTx</a>, but uses the given UTxO to resolve inputs.
renderTxWithUTxO :: UTxO -> Tx -> String
