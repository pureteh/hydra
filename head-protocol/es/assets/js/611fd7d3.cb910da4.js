"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[6816],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(r),y=a,h=p["".concat(d,".").concat(y)]||p[y]||u[y]||o;return r?n.createElement(h,i(i({ref:t},l),{},{components:r})):n.createElement(h,i({ref:t},l))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},73995:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_label:"Basic Hydra Head",sidebar_position:2},i="Basic Hydra Head",s={unversionedId:"basic/index",id:"basic/index",title:"Basic Hydra Head",description:"This document is a work in progress",source:"@site/topologies/basic/index.md",sourceDirName:"basic",slug:"/basic/",permalink:"/head-protocol/es/topologies/basic/",draft:!1,editUrl:"https://github.com/input-output-hk/hydra/tree/master/docs/topologies/basic/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Basic Hydra Head",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Topologies",permalink:"/head-protocol/es/topologies/"},next:{title:"Managed Hydra Head",permalink:"/head-protocol/es/topologies/managed/"}},d={},c=[],l={toc:c},p="wrapper";function u(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"basic-hydra-head"},"Basic Hydra Head"),(0,a.kt)("p",null,"\ud83d\udee0\ufe0f This document is a work in progress"),(0,a.kt)("p",null,"This document explains the deployment architecture of a basic Hydra Head. It\nserves as a reference to other topologies discussed in this chapter and is\nschematically depicted below:"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:r(62914).Z,alt:"Basic Hydra Head",height:400})),(0,a.kt)("p",null,"The basic setup of a Hydra Head consists of several ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-node"),"s, each connected to the Cardano network through a (not pictured) ",(0,a.kt)("inlineCode",{parentName:"p"},"cardano-node"),". A Hydra client (like the ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-tui"),") would connect, usually via a local connection, to a ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-node")," to open a Hydra Head using an off-chain network. The picture shows two Hydra Heads (blue and green) opened between two distinct sets of ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-node"),"s, where the lines indicate Hydra network connections and circles represent a Hydra Head state and credentials - summarized by a socalled ",(0,a.kt)("em",{parentName:"p"},"Hydra Head Party"),". "),(0,a.kt)("p",null,"Not shown in the picture are multiple, logical Hydra Heads being open in the same ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-node"),", which is very likely something we will support eventually and allow for re-using network connections between ",(0,a.kt)("inlineCode",{parentName:"p"},"hydra-node")," processes."),(0,a.kt)("p",null,"Each head, the blue or green one, can progress independently and requires a signature of all the respective ",(0,a.kt)("em",{parentName:"p"},"Hydra Parties")," of each head. That is, 2 signatures in the green Head and 4 signatures in the blue Head."))}u.isMDXComponent=!0},62914:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/basic-hydra-head-31e4fded6123899b955e2ec45ad63e78.jpg"}}]);